,fname,text
0,developer.mozilla.org/en-US/docs/Web/HTML/Attributes,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes. HTML attribute reference - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLHTML attribute referenceArticle ActionsEnglish (US)In this articleAttribute listContent versus IDL attributesBoolean AttributesEvent handler attributesSee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleAttribute listContent versus IDL attributesBoolean AttributesEvent handler attributesSee alsoHTML attribute referenceElements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.Attribute list Attribute Name Elements Description  accept <form>, <input> List of types the server accepts, typically a file type. accept-charset <form> List of supported charsets. accesskey Global attribute Keyboard shortcut to activate or add focus to the element. action <form>   The URI of a program that processes the information submitted via the   form.   align <caption>, <col>,   <colgroup>,   <hr>, <iframe>,   <img>, <table>,   <tbody>, <td>,   <tfoot>, <th>,   <thead>, <tr> Specifies the horizontal alignment of the element. allow <iframe> Specifies a feature-policy for the iframe. alt <area>,   <img>, <input> Alternative text in case an image can't be displayed. async <script> Executes the script asynchronously. autocapitalize Global attribute Sets whether input is automatically capitalized when entered by user autocomplete <form>, <input>,   <select>,   <textarea>   Indicates whether controls in this form can by default have their values   automatically completed by the browser.   autofocus <button>,   <input>,   <select>,   <textarea> The element should be automatically focused after the page loaded. autoplay <audio>,   <video> The audio or video should play as soon as possible. background <body>, <table>,   <td>, <th> Specifies the URL of an image file.   Note: Although browsers and email clients may still    support this attribute, it is obsolete. Use CSS    background-image instead.    bgcolor <body>, <col>,   <colgroup>,   <marquee>,   <table>,   <tbody>,   <tfoot>, <td>,   <th>, <tr> Background color of the element. Note: This is a legacy attribute. Please use the    CSS background-color property instead.    border <img>, <object>,   <table> The border width. Note: This is a legacy attribute. Please use the    CSS border property instead.    buffered <audio>,   <video> Contains the time range of already buffered media. capture <input>   From the Media Capture specification,   specifies a new file can be captured.   charset <meta>, <script> Declares the character encoding of the page or script. checked <input> Indicates whether the element should be checked on page load. cite <blockquote>,   <del>, <ins>,   <q> Contains a URI which points to the source of the quote or change. class Global attribute Often used with CSS to style elements with common properties. color <font>, <hr>    This attribute sets the text color using either a named color or a   color specified in the hexadecimal #RRGGBB format.   Note: This is a legacy attribute. Please use the    CSS color property instead.    cols <textarea> Defines the number of columns in a textarea. colspan <td>, <th> The colspan attribute defines the number of columns a cell should span. content <meta>   A value associated with http-equiv or   name depending on the context.   contenteditable Global attribute Indicates whether the element's content is editable. contextmenu Global attribute   Defines the ID of a <menu> element which will   serve as the element's context menu.   controls <audio>,   <video> Indicates whether the browser should show playback controls to the user. coords <area> A set of values specifying the coordinates of the hot-spot region. crossorigin <audio>, <img>,   <link>, <script>,   <video> How the element handles cross-origin requests csp Experimental <iframe>   Specifies the Content Security Policy that an embedded document must   agree to enforce upon itself.   data <object> Specifies the URL of the resource. data-* Global attribute Lets you attach custom attributes to an HTML element. datetime <del>, <ins>,   <time> Indicates the date and time associated with the element. decoding <img> Indicates the preferred method to decode the image. default <track>   Indicates that the track should be enabled unless the user's preferences   indicate something different.   defer <script>   Indicates that the script should be executed after the page has been   parsed.   dir Global attribute   Defines the text direction. Allowed values are ltr (Left-To-Right) or   rtl (Right-To-Left)   dirname <input>,   <textarea>  disabled <button>,   <fieldset>,   <input>,   <optgroup>,   <option>,   <select>,   <textarea> Indicates whether the user can interact with the element. download <a>, <area> Indicates that the hyperlink is to be used for downloading a resource. draggable Global attribute Defines whether the element can be dragged. enctype <form>   Defines the content type of the form data when the   method is POST.   enterkeyhint Experimental <textarea>,   contenteditable   The enterkeyhint   specifies what action label (or icon) to present for the enter key on   virtual keyboards. The attribute can be used with form controls (such as   the value of textarea elements), or in elements in an   editing host (e.g., using contenteditable attribute).   for <label>,   <output> Describes elements which belongs to this one. form <button>,   <fieldset>,   <input>,   <label>,   <meter>,   <object>,   <output>,   <progress>,   <select>,   <textarea> Indicates the form that is the owner of the element. formaction <input>,   <button>   Indicates the action of the element, overriding the action defined in   the <form>.   formenctype <button>,   <input>   If the button/input is a submit button (e.g. type=""submit""),   this attribute sets the encoding type to use during form submission. If   this attribute is specified, it overrides the   enctype attribute of the button's   form owner.   formmethod <button>,   <input>   If the button/input is a submit button (e.g. type=""submit""),   this attribute sets the submission method to use during form submission   (GET, POST, etc.). If this attribute is   specified, it overrides the method attribute of the   button's form owner.   formnovalidate <button>,   <input>   If the button/input is a submit button (e.g. type=""submit""),   this boolean attribute specifies that the form is not to be validated   when it is submitted. If this attribute is specified, it overrides the   novalidate attribute of the button's   form owner.   formtarget <button>,   <input>   If the button/input is a submit button (e.g. type=""submit""),   this attribute specifies the browsing context (for example, tab, window,   or inline frame) in which to display the response that is received after   submitting the form. If this attribute is specified, it overrides the   target attribute of the button's   form owner.   headers <td>, <th>   IDs of the <th> elements which applies to this   element.   height <canvas>,   <embed>,   <iframe>, <img>,   <input>,   <object>,   <video>    Specifies the height of elements listed here. For all other elements,   use the CSS height property.   Note: In some instances, such as    <div>, this is a legacy attribute, in    which case the CSS height property should    be used instead.    hidden Global attribute   Prevents rendering of given element, while keeping child elements, e.g.   script elements, active.   high <meter> Indicates the lower bound of the upper range. href <a>, <area>,   <base>, <link> The URL of a linked resource. hreflang <a>, <link> Specifies the language of the linked resource. http-equiv <meta> Defines a pragma directive. id Global attribute   Often used with CSS to style a specific element. The value of this   attribute must be unique.   integrity <link>, <script>    Specifies a   Subresource Integrity   value that allows browsers to verify what they fetch.    intrinsicsize Deprecated <img>   This attribute tells the browser to ignore the actual intrinsic size of   the image and pretend it's the size specified in the attribute.   inputmode <textarea>,   contenteditable   Provides a hint as to the type of data that might be entered by the user   while editing the element or its contents. The attribute can be used   with form controls (such as the value of   textarea elements), or in elements in an editing host   (e.g., using contenteditable attribute).   ismap <img> Indicates that the image is part of a server-side image map. itemprop Global attribute kind <track> Specifies the kind of text track. label <optgroup>,   <option>,   <track> Specifies a user-readable title of the element. lang Global attribute Defines the language used in the element. language Deprecated <script> Defines the script language used in the element. loading Experimental <img>, <iframe>   Indicates if the element should be loaded lazily   (loading=""lazy"") or loaded immediately   (loading=""eager"").   list <input> Identifies a list of pre-defined options to suggest to the user. loop <audio>,   <marquee>,   <video>   Indicates whether the media should start playing from the start when   it's finished.   low <meter> Indicates the upper bound of the lower range. manifest Deprecated <html> Specifies the URL of the document's cache manifest.   Note: This attribute is obsolete, use    <link rel=""manifest"">    instead.    max <input>,   <meter>,   <progress> Indicates the maximum value allowed. maxlength <input>,   <textarea> Defines the maximum number of characters allowed in the element. minlength <input>,   <textarea> Defines the minimum number of characters allowed in the element. media <a>, <area>,   <link>, <source>,   <style>   Specifies a hint of the media for which the linked resource was   designed.   method <form>   Defines which HTTP method to use when   submitting the form. Can be GET (default) or   POST.   min <input>,   <meter> Indicates the minimum value allowed. multiple <input>,   <select>   Indicates whether multiple values can be entered in an input of the type   email or file.   muted <audio>,   <video> Indicates whether the audio will be initially silenced on page load. name <button>, <form>,   <fieldset>,   <iframe>,   <input>,   <object>,   <output>,   <select>,   <textarea>,   <map>, <meta>,   <param>   Name of the element. For example used by the server to identify the   fields in form submits.   novalidate <form>   This attribute indicates that the form shouldn't be validated when   submitted.   open <details>,   <dialog>   Indicates whether the contents are currently visible (in the case of   a <details> element) or whether the dialog is active   and can be interacted with (in the case of a   <dialog> element).   optimum <meter> Indicates the optimal numeric value. pattern <input>   Defines a regular expression which the element's value will be validated   against.   ping <a>, <area>   The ping attribute specifies a space-separated list of URLs   to be notified if a user follows the hyperlink.   placeholder <input>,   <textarea> Provides a hint to the user of what can be entered in the field. playsinline <video> A Boolean attribute indicating that the video is to be played ""inline""; that is, within the element's playback area. Note that the absence of this attribute does not imply that the video will always be played in fullscreen. poster <video> A URL indicating a poster frame to show until the user plays or seeks. preload <audio>,   <video>   Indicates whether the whole resource, parts of it or nothing should be   preloaded.   readonly <input>,   <textarea> Indicates whether the element can be edited. referrerpolicy <a>, <area>,   <iframe>, <img>,   <link>, <script> Specifies which referrer is sent when fetching the resource. rel <a>, <area>,   <link> Specifies the relationship of the target object to the link object. required <input>,   <select>,   <textarea> Indicates whether this element is required to fill out or not. reversed <ol>   Indicates whether the list should be displayed in a descending order   instead of an ascending order.   role Global attribute Defines an explicit role for an element for use by assistive technologies. rows <textarea> Defines the number of rows in a text area. rowspan <td>, <th> Defines the number of rows a table cell should span over. sandbox <iframe>   Stops a document loaded in an iframe from using certain features (such   as submitting forms or opening new windows).   scope <th>   Defines the cells that the header test (defined in the   th element) relates to.   scoped Non-standard Deprecated <style> selected <option> Defines a value which will be selected on page load. shape <a>, <area> size <input>,   <select>   Defines the width of the element (in pixels). If the element's   type attribute is text or   password then it's the number of characters.   sizes <link>, <img>,   <source>  slot Global attribute Assigns a slot in a shadow DOM shadow tree to an element. span <col>,   <colgroup>  spellcheck Global attribute Indicates whether spell checking is allowed for the element. src <audio>,   <embed>,   <iframe>, <img>,   <input>,   <script>,   <source>,   <track>,   <video> The URL of the embeddable content. srcdoc <iframe> srclang <track> srcset <img>, <source> One or more responsive image candidates. start <ol> Defines the first number if other than 1. step <input> style Global attribute Defines CSS styles which will override styles previously set. summary Deprecated <table> tabindex Global attribute   Overrides the browser's default tab order and follows the one specified   instead.   target <a>, <area>,   <base>, <form>   Specifies where to open the linked document (in the case of an   <a> element) or where to display the response received   (in the case of a <form> element)   title Global attribute Text to be displayed in a tooltip when hovering over the element. translate Global attribute   Specify whether an element's attribute values and the values of its   Text node   children are to be translated when the page is localized, or whether to   leave them unchanged.   type <button>,   <input>,   <embed>,   <object>,   <ol>,   <script>,   <source>,   <style>, <menu>,   <link> Defines the type of the element. usemap <img>, <input>,   <object>  value <button>, <data>,   <input>, <li>,   <meter>,   <option>,   <progress>,   <param>   Defines a default value which will be displayed in the element on page   load.   width <canvas>,   <embed>,   <iframe>, <img>,   <input>,   <object>,   <video> For the elements listed here, this establishes the element's width. Note: For all other instances, such as    <div>, this is a legacy attribute, in    which case the CSS width property should be    used instead.    wrap <textarea> Indicates whether the text should be wrapped. Content versus IDL attributesIn HTML, most attributes have two faces: the content attribute and the IDL (Interface Definition Language) attribute. The content attribute is the attribute as you set it from the content (the HTML code) and you can set it or get it via element.setAttribute() or element.getAttribute(). The content attribute is always a string even when the expected value should be an integer. For example, to set an <input> element's maxlength to 42 using the content attribute, you have to call setAttribute(""maxlength"", ""42"") on that element. The IDL attribute is also known as a JavaScript property. These are the attributes you can read or set using JavaScript properties like element.foo. The IDL attribute is always going to use (but might transform) the underlying content attribute to return a value when you get it and is going to save something in the content attribute when you set it. In other words, the IDL attributes, in essence, reflect the content attributes. Most of the time, IDL attributes will return their values as they are really used. For example, the default type for <input> elements is ""text"", so if you set input.type=""foobar"", the <input> element will be of type text (in the appearance and the behavior) but the ""type"" content attribute's value will be ""foobar"". However, the type IDL attribute will return the string ""text"". IDL attributes are not always strings; for example, input.maxlength is a number (a signed long). When using IDL attributes, you read or set values of the desired type, so input.maxlength is always going to return a number and when you set input.maxlength, it wants a number. If you pass another type, it is automatically converted to a number as specified by the standard JavaScript rules for type conversion. IDL attributes can reflect other types such as unsigned long, URLs, booleans, etc. Unfortunately, there are no clear rules and the way IDL attributes behave in conjunction with their corresponding content attributes depends on the attribute. Most of the time, it will follow the rules laid out in the specification, but sometimes it doesn't. HTML specifications try to make this as developer-friendly as possible, but for various reasons (mostly historical), some attributes behave oddly (select.size, for example) and you should read the specifications to understand how exactly they behave.Boolean AttributesSome content attributes (e.g. required, readonly, disabled) are called boolean attributes. If a boolean attribute is present, its value is true, and if it's absent, its value is false. HTML defines restrictions on the allowed values of boolean attributes: If the attribute is present, its value must either be the empty string (equivalently, the attribute may have an unassigned value), or a value that is an ASCII case-insensitive match for the attribute's canonical name, with no leading or trailing whitespace. The following examples are valid ways to mark up a boolean attribute: <div itemscope>This is valid HTML but invalid XML.</div> <div itemscope=itemscope>This is also valid HTML but invalid XML.</div> <div itemscope="""">This is valid HTML and also valid XML.</div> <div itemscope=""itemscope""> This is also valid HTML and XML, but perhaps a bit verbose. </div> To be clear, the values ""true"" and ""false"" are not allowed on boolean attributes. To represent a false value, the attribute has to be omitted altogether. This restriction clears up some common misunderstandings: With checked=""false"" for example, the element's checked attribute would be interpreted as true because the attribute is present.Event handler attributes Warning: The use of event handler content attributes is discouraged. The mix of HTML and JavaScript often produces unmaintainable code, and the execution of event handler attributes may also be blocked by content security policies. In addition to the attributes listed in the table above, global event handlers â such as onclick â can also be specified as content attributes on all elements. All event handler attributes accept a string. The string will be used to synthesize a JavaScript function like function name(/*args*/) {body}, where name is the attribute's name, and body is the attribute's value. The handler receives the same parameters as its JavaScript event handler counterpart â most handlers receive only one event parameter, while onerror receives five: event, source, lineno, colno, error. This means you can, in general, use the event variable within the attribute. <div onclick=""console.log(event)"">Click me!</div> <!-- The synthesized handler has a name; you can reference itself --> <div onclick=""console.log(onclick)"">Click me!</div> See also HTML elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
1,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment/operators,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators#assignment/operators. Expressions and operators - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceExpressions and operatorsArticle ActionsEnglish (US)In this articleExpressions and operators by categorySpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleExpressions and operators by categorySpecificationsBrowser compatibilitySee alsoExpressions and operatorsThis chapter documents all the JavaScript language operators, expressions and keywords.Expressions and operators by categoryFor an alphabetical listing see the sidebar on the left.Primary expressionsBasic keywords and general expressions in JavaScript. These expressions have the highest precedence (higher than operators). this The this keyword refers to a special property of an execution context. Literals Basic null, boolean, number, and string literals. [] Array initializer/literal syntax. {} Object initializer/literal syntax. function The function keyword defines a function expression. class The class keyword defines a class expression. function* The function* keyword defines a generator function expression. async function The async function defines an async function expression. async function* The async function* keywords define an async generator function expression. /ab+c/i Regular expression literal syntax. `string` Template literal syntax. ( ) Grouping operator. Left-hand-side expressionsLeft values are the destination of an assignment. Property accessors Member operators provide access to a property or method of an object (object.property and object[""property""]). ?. The optional chaining operator returns undefined instead of causing an error if a reference is nullish (null or undefined). new The new operator creates an instance of a constructor. new.target In constructors, new.target refers to the constructor that was invoked by new. import.meta An object exposing context-specific metadata to a JavaScript module. super The super keyword calls the parent constructor or allows accessing properties of the parent object. import() The import() syntax allows loading a module asynchronously and dynamically into a potentially non-module environment. Increment and decrementPostfix/prefix increment and postfix/prefix decrement operators. A++ Postfix increment operator. A-- Postfix decrement operator. ++A Prefix increment operator. --A Prefix decrement operator. Unary operatorsA unary operation is an operation with only one operand. delete The delete operator deletes a property from an object. void The void operator evaluates an expression and discards its return value. typeof The typeof operator determines the type of a given object. + The unary plus operator converts its operand to Number type. - The unary negation operator converts its operand to Number type and then negates it. ~ Bitwise NOT operator. ! Logical NOT operator. await Pause and resume an async function and wait for the promise's fulfillment/rejection. Arithmetic operatorsArithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. ** Exponentiation operator. * Multiplication operator. / Division operator. % Remainder operator. + (Plus) Addition operator. - Subtraction operator. Relational operatorsA comparison operator compares its operands and returns a boolean value based on whether the comparison is true. < (Less than) Less than operator. > (Greater than) Greater than operator. <= Less than or equal operator. >= Greater than or equal operator. instanceof The instanceof operator determines whether an object is an instance of another object. in The in operator determines whether an object has a given property. Note: => is not an operator, but the notation for Arrow functions. Equality operatorsThe result of evaluating an equality operator is always of type boolean based on whether the comparison is true. == Equality operator. != Inequality operator. === Strict equality operator. !== Strict inequality operator. Bitwise shift operatorsOperations to shift all bits of the operand. << Bitwise left shift operator. >> Bitwise right shift operator. >>> Bitwise unsigned right shift operator. Binary bitwise operatorsBitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values. & Bitwise AND. | Bitwise OR. ^ Bitwise XOR. Binary logical operatorsLogical operators implement boolean (logical) values and have short-circuiting behavior. && Logical AND. || Logical OR. ?? Nullish Coalescing Operator. Conditional (ternary) operator (condition ? ifTrue : ifFalse) The conditional operator returns one of two values based on the logical value of the condition. Assignment operatorsAn assignment operator assigns a value to its left operand based on the value of its right operand. = Assignment operator. *= Multiplication assignment. /= Division assignment. %= Remainder assignment. += Addition assignment. -= Subtraction assignment <<= Left shift assignment. >>= Right shift assignment. >>>= Unsigned right shift assignment. &= Bitwise AND assignment. ^= Bitwise XOR assignment. |= Bitwise OR assignment. **= Exponentiation assignment. &&= Logical AND assignment. ||= Logical OR assignment. ??= Nullish coalescing assignment. [a, b] = arr, { a, b } = obj Destructuring assignment allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals. Yield operators yield Pause and resume a generator function. yield* Delegate to another generator function or iterable object. Spread syntax ...obj Spread syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created. Comma operator , The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression. SpecificationsSpecificationECMAScript Language Specification # sec-addition-operator-plusECMAScript Language Specification # sec-assignment-operatorsECMAScript Language Specification # sec-async-function-definitionsECMAScript Language Specification # sec-async-generator-function-definitionsECMAScript Language Specification # prod-BitwiseANDExpressionECMAScript Language Specification # sec-bitwise-not-operatorECMAScript Language Specification # prod-BitwiseORExpressionECMAScript Language Specification # prod-BitwiseXORExpressionECMAScript Language Specification # sec-class-definitionsECMAScript Language Specification # sec-comma-operatorECMAScript Language Specification # sec-conditional-operatorECMAScript Language Specification # sec-postfix-decrement-operatorECMAScript Language Specification # sec-delete-operatorECMAScript Language Specification # sec-destructuring-assignmentECMAScript Language Specification # sec-destructuring-binding-patternsECMAScript Language Specification # sec-multiplicative-operatorsECMAScript Language Specification # sec-equality-operatorsECMAScript Language Specification # sec-exp-operatorECMAScript Language Specification # sec-function-definitionsECMAScript Language Specification # sec-generator-function-definitionsECMAScript Language Specification # sec-relational-operatorsECMAScript Language Specification # sec-grouping-operatorECMAScript Language Specification # sec-import-callsECMAScript Language Specification # prod-ImportMetaHTML Standard # hostgetimportmetapropertiesECMAScript Language Specification # sec-postfix-increment-operatorECMAScript Language Specification # sec-left-shift-operatorECMAScript Language Specification # prod-LogicalANDExpressionECMAScript Language Specification # sec-logical-not-operatorECMAScript Language Specification # prod-LogicalORExpressionECMAScript Language Specification # sec-new-operatorECMAScript Language Specification # sec-built-in-function-objectsECMAScript Language Specification # sec-null-valueECMAScript Language Specification # prod-CoalesceExpressionECMAScript Language Specification # sec-object-initializerECMAScript Language Specification # prod-OptionalExpressionECMAScript Language Specification # sec-property-accessorsECMAScript Language Specification # sec-signed-right-shift-operatorECMAScript Language Specification # prod-SpreadElementECMAScript Language Specification # prod-ArgumentListECMAScript Language Specification # prod-PropertyDefinitionECMAScript Language Specification # sec-subtraction-operator-minusECMAScript Language Specification # sec-super-keywordECMAScript Language Specification # sec-this-keywordECMAScript Language Specification # sec-typeof-operatorECMAScript Language Specification # sec-unary-minus-operatorECMAScript Language Specification # sec-unary-plus-operatorECMAScript Language Specification # sec-unsigned-right-shift-operatorECMAScript Language Specification # sec-void-operatorECMAScript Language Specification # prod-YieldExpressionECMAScript Language Specification # sec-generator-function-definitions-runtime-semantics-evaluationBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Operator precedence Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
2,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical/grammar#exponential,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical/grammar#exponential. Lexical grammar - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceLexical grammarArticle ActionsEnglish (US)In this articleFormat-control charactersWhite spaceLine terminatorsCommentsIdentifiersKeywordsLiteralsAutomatic semicolon insertionSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleFormat-control charactersWhite spaceLine terminatorsCommentsIdentifiersKeywordsLiteralsAutomatic semicolon insertionSpecificationsBrowser compatibilitySee alsoLexical grammarThis page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters â in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step â they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.Format-control charactersFormat-control characters have no visual representation but are used to control the interpretation of the text. Code point Name Abbreviation Description  U+200C Zero width non-joiner <ZWNJ> Placed between characters to prevent being connected into ligatures in certain languages (Wikipedia). U+200D Zero width joiner <ZWJ> Placed between characters that would not normally be connected in order to cause the characters to be rendered using their connected form in certain languages (Wikipedia). U+FEFF Byte order mark <BOM> Used at the start of the script to mark it as Unicode and the text's byte order (Wikipedia). In JavaScript source text, <ZWNJ> and <ZWJ> are treated as identifier parts, while <BOM> (also called a zero-width no-break space <ZWNBSP> when not at the start of text) is treated as white space.White spaceWhite space characters improve the readability of source text and separate tokens from each other. These characters are usually unnecessary for the functionality of the code. Minification tools are often used to remove whitespace in order to reduce the amount of data that needs to be transferred. Code point Name Abbreviation Description Escape sequence  U+0009 Character tabulation <TAB> Horizontal tabulation \t U+000B Line tabulation <VT> Vertical tabulation \v U+000C Form feed <FF> Page breaking control character (Wikipedia). \f U+0020 Space <SP> Normal space U+00A0 No-break space <NBSP> Normal space, but no point at which a line may break U+FEFF Zero-width no-break space <ZWNBSP> When not at the start of a script, the BOM marker is a normal whitespace character. Others Other Unicode space characters <USP> Characters in the ""Space_Separator"" general category  Note: Of those characters with the ""White_Space"" property but are not in the ""Space_Separator"" general category, U+0009, U+000B, and U+000C are still treated as white space in JavaScript; U+0085 NEXT LINE has no special role; others become the set of line terminators. Note: Changes to the Unicode standard used by the JavaScript engine may affect programs' behavior. For example, ES2016 upgraded the reference Unicode standard from 5.1 to 8.0.0, which caused U+180E MONGOLIAN VOWEL SEPARATOR to be moved from the ""Space_Separator"" category to the ""Format (Cf)"" category, and made it a non-whitespace. Subsequently, the result of ""\u180E"".trim().length changed from 0 to 1. Line terminatorsIn addition to white space characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of automatic semicolon insertion. Outside the context of lexical grammar, white space and line terminators are often conflated. For example, String.prototype.trim() removes all white space and line terminators from the beginning and end of a string. The \s character class escape in regular expressions matches all white space and line terminators. Only the following Unicode code points are treated as line terminators in ECMAScript, other line breaking characters are treated as white space (for example, Next Line, NEL, U+0085 is considered as white space). Code point Name Abbreviation Description Escape sequence  U+000A Line Feed <LF> New line character in UNIX systems.  U+000D Carriage Return <CR> New line character in Commodore and early Mac systems. \r U+2028 Line Separator <LS> Wikipedia U+2029 Paragraph Separator <PS> Wikipedia CommentsComments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool. JavaScript has two long-standing ways to add comments to code: line comments and block comments. In addition, there's a special hashbang comment syntax.Line commentsThe first way is the // comment; this makes all text following it on the same line into a comment. For example: function comment() { // This is a one line JavaScript comment console.log(""Hello world!""); } comment(); Block commentsThe second way is the /* */ style, which is much more flexible. For example, you can use it on a single line: function comment() { /* This is a one line JavaScript comment */ console.log(""Hello world!""); } comment(); You can also make multiple-line comments, like this: function comment() { /* This comment spans multiple lines. Notice  that we don't need to end the comment until we're done. */ console.log(""Hello world!""); } comment(); You can also use it in the middle of a line, if you wish, although this can make your code harder to read so it should be used with caution: function comment(x) { console.log(""Hello "" + x /* insert the value of x */ + "" !""); } comment(""world""); In addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this: function comment() { /* console.log(""Hello world!""); */ } comment(); In this case, the console.log() call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way. Block comments that contain at least one line terminator behave like line terminators in automatic semicolon insertion.Hashbang commentsThere's a special third comment syntax, the hashbang comment. A hashbang comment behaves exactly like a single line-only (//) comment, except that it begins with #! and is only valid at the absolute start of a script or module. Note also that no whitespace of any kind is permitted before the #!. The comment consists of all the characters after #! up to the end of the first line; only one such comment is permitted. Hashbang comments in JavaScript resemble shebangs in Unix which provide the path to a specific JavaScript interpreter that you want to use to execute the script. Before the hashbang comment became standardized, it had already been de-facto implemented in non-browser hosts like Node.js, where it was stripped from the source text before being passed to the engine. An example is as follows: #!/usr/bin/env node console.log(""Hello world""); The JavaScript interpreter will treat it as a normal comment â it only has semantic meaning to the shell if the script is directly run in a shell. Warning: If you want scripts to be runnable directly in a shell environment, encode them in UTF-8 without a BOM. Although a BOM will not cause any problems for code running in a browser â because it's stripped during UTF-8 decoding, before the source text is analyzed â a Unix/Linux shell will not recognize the hashbang if it's preceded by a BOM character. You must only use the #! comment style to specify a JavaScript interpreter. In all other cases just use a // comment (or multiline comment).IdentifiersAn identifier is used to link a value with a name. Identifiers can be used in various places: const decl = 1; // Variable declaration (may also be `let` or `var`) function fn() {} // Function declaration const obj = { key: ""value"" }; // Object keys // Class declaration class C { #priv = ""value""; // Private property } lbl: console.log(1); // Label In JavaScript, identifiers are commonly made of alphanumeric characters, underscores (_), and dollar signs ($). Identifiers are not allowed to start with numbers. However, JavaScript identifiers are not only limited to ASCII â many Unicode code points are allowed as well. Namely, any character in the ID_Start category can start an identifier, while any character in the ID_Continue category can appear after the first character. Note: If, for some reason, you need to parse some JavaScript source yourself, do not assume all identifiers follow the pattern /[A-Za-z_$][\w$]*/ (i.e. ASCII-only)! The range of identifiers can be described by the regex /[$_\p{ID_Start}][$\u200c\u200d\p{ID_Continue}]*/u (excluding unicode escape sequences). In addition, JavaScript allows using Unicode escape sequences in the form of \u0000 or \u{000000} in identifiers, which encode the same string value as the actual Unicode characters. For example, ä½ å¥½ and \u4f60\u597d are the same identifiers: const ä½ å¥½ = ""Hello""; console.log(\u4f60\u597d); // Hello Not all places accept the full range of identifiers. Certain syntaxes, such as function declarations, function expressions, and variable declarations require using identifiers names that are not reserved words. function import() {} // Illegal: import is a reserved word. Most notably, private properties and object properties allow reserved words. const obj = { import: ""value"" }; // Legal despite `import` being reserved class C { #import = ""value""; } KeywordsKeywords are tokens that look like identifiers but have special meanings in JavaScript. For example, the keyword async before a function declaration indicates that the function is asynchronous. Some keywords are reserved, meaning that they cannot be used as an identifier for variable declarations, function declarations, etc. They are often called reserved words. A list of these reserved words is provided below. Not all keywords are reserved â for example, async can be used as an identifier anywhere. Some keywords are only contextually reserved â for example, await is only reserved within the body of an async function, and let is only reserved in strict mode code, or const and let declarations. Identifiers are always compared by string value, so escape sequences are interpreted. For example, this is still a syntax error: const els\u{65} = 1; // `els\u{65}` encodes the same identifier as `else` Reserved wordsThese keywords cannot be used as identifiers for variables, functions, classes, etc. anywhere in JavaScript source. break case catch class const continue debugger default delete do else export extends false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with The following are only reserved when they are found in strict mode code: let (also reserved in const, let, and class declarations) static yield (also reserved in generator function bodies) The following are only reserved when they are found in module code or async function bodies: await Future reserved wordsThe following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers. These are always reserved: enum The following are only reserved when they are found in strict mode code: implements interface package private protected public Future reserved words in older standards The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3). abstract boolean byte char double final float goto int long native short synchronized throws transient volatile Identifiers with special meaningsA few identifiers have a special meaning in some contexts without being reserved words of any kind. They include: arguments (not a keyword, but cannot be declared as identifier in strict mode) as (import * as ns from ""mod"") async eval (not a keyword, but cannot be declared as identifier in strict mode) from (import x from ""mod"") get of set Literals Note: This section discusses literals that are atomic tokens. Object literals and array literals are expressions that consist of a series of tokens. Null literalSee also null for more information. null Boolean literalSee also boolean type for more information. true false Numeric literalsThe Number and BigInt types use numeric literals. Decimal 1234567890 42 Decimal literals can start with a zero (0) followed by another decimal digit, but if all digits after the leading 0 are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with 0, whether interpreted as octal or decimal, cause a syntax error in strict mode â so, use the 0o prefix instead. 0888 // 888 parsed as decimal 0777 // parsed as octal, 511 in decimal Exponential The decimal exponential literal is specified by the following format: beN; where b is a base number (integer or floating), followed by an E or e character (which serves as separator or exponent indicator) and N, which is exponent or power number â a signed integer. 0e-5 // 0 0e+5 // 0 5e1 // 50 175e-2 // 1.75 1e3 // 1000 1e-3 // 0.001 1E3 // 1000 Binary Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""B"" (0b or 0B). Any character after the 0b that is not 0 or 1 will terminate the literal sequence. 0b10000000000000000000000000000000 // 2147483648 0b01111111100000000000000000000000 // 2139095040 0B00000000011111111111111111111111 // 8388607 Octal Octal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""O"" (0o or 0O). Any character after the 0o that is outside the range (01234567) will terminate the literal sequence. 0O755 // 493 0o644 // 420 Hexadecimal Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""X"" (0x or 0X). Any character after the 0x that is outside the range (0123456789ABCDEF) will terminate the literal sequence. 0xFFFFFFFFFFFFFFFFF // 295147905179352830000 0x123456789ABCDEF // 81985529216486900 0XA     // 10 BigInt literal The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. BigInt literals are created by appending n to the end of an integer. 123456789123456789n  // 123456789123456789 0o777777777777n   // 68719476735 0x123456789ABCDEFn  // 81985529216486895 0b11101001010101010101n // 955733 BigInt literals cannot start with 0 to avoid confusion with legacy octal literals. 0755n; // SyntaxError: invalid BigInt syntax For octal BigInt numbers, always use zero followed by the letter ""o"" (uppercase or lowercase): 0o755n; For more information about BigInt, see also JavaScript data structures. Numeric separators To improve readability for numeric literals, underscores (_, U+005F) can be used as separators: 1_000_000_000_000 1_050.95 0b1010_0001_1000_0101 0o2_2_5_6 0xA0_B0_C0 1_000_000_000_000_000_000_000n Note these limitations: // More than one underscore in a row is not allowed 100__000; // SyntaxError // Not allowed at the end of numeric literals 100_; // SyntaxError // Can not be used after leading 0 0_1; // SyntaxError String literalsA string literal is zero or more Unicode code points enclosed in single or double quotes. Unicode code points may also be represented by an escape sequence. All code points may appear literally in a string literal except for these code points: U+005C \ (backslash) U+000D <CR> U+000A <LF> The same kind of quote that begins the string literal Any code points may appear in the form of an escape sequence. String literals evaluate to ECMAScript String values. When generating these String values Unicode code points are UTF-16 encoded. 'foo' ""bar"" The following subsections describe various escape sequences (\ followed by one or more characters) available in string literals. Any escape sequence not listed below becomes an ""identity escape"" that becomes the code point itself. For example, \z is the same as z. There's a deprecated octal escape sequence syntax described in the Deprecated and obsolete features page. Many of these escape sequences are also valid in regular expressions â see Character escape. Escape sequences Special characters can be encoded using escape sequences: Escape sequence Unicode code point  \0 null character (U+0000 NULL) \' single quote (U+0027 APOSTROPHE) \"" double quote (U+0022 QUOTATION MARK) \\ backslash (U+005C REVERSE SOLIDUS)  newline (U+000A LINE FEED; LF) \r carriage return (U+000D CARRIAGE RETURN; CR) \v vertical tab (U+000B LINE TABULATION) \t tab (U+0009 CHARACTER TABULATION) \b backspace (U+0008 BACKSPACE) \f form feed (U+000C FORM FEED) \ followed by a line terminator empty string The last escape sequence, \ followed by a line terminator, is useful for splitting a string literal across multiple lines without changing its meaning. const longString = ""This is a very long string which needs \ to wrap across multiple lines because \ otherwise my code is unreadable.""; Make sure there is no space or any other character after the backslash (except for a line break), otherwise it will not work. If the next line is indented, the extra spaces will also be present in the string's value. You can also use the + operator to append multiple strings together, like this: const longString = ""This is a very long string which needs "" + ""to wrap across multiple lines because "" + ""otherwise my code is unreadable.""; Both of the above methods result in identical strings. Hexadecimal escape sequences Hexadecimal escape sequences consist of \x followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF. ""\xA9""; // ""Â©"" Unicode escape sequences A Unicode escape sequence consists of exactly four hexadecimal digits following \u. It represents a code unit in the UTF-16 encoding. For code points U+0000 to U+FFFF, the code unit is equal to the code point. Code points U+10000 to U+10FFFF require two escape sequences representing the two code units (a surrogate pair) used to encode the character; the surrogate pair is distinct from the code point. See also String.fromCharCode() and String.prototype.charCodeAt(). ""\u00A9""; // ""Â©"" (U+A9) Unicode code point escapes A Unicode code point escape consists of \u{, followed by a code point in hexadecimal base, followed by }. The value of the hexadecimal digits must be in the range 0 and 0x10FFFF inclusive. Code points in the range U+10000 to U+10FFFF do not need to be represented as a surrogate pair. See also String.fromCodePoint() and String.prototype.codePointAt(). ""\u{2F804}""; // CJK COMPATIBILITY IDEOGRAPH-2F804 (U+2F804) // the same character represented as a surrogate pair ""\uD87E\uDC04""; Regular expression literalsRegular expression literals are enclosed by two forward slashes (/). The lexer consumes all characters up to the next unescaped forward slash or the end of the line, unless the forward slash appears within a character class ([]). Some characters (namely, those that are identifier parts) can appear after the closing slash, denoting flags. The lexical grammar is very lenient: not all regular expression literals that get identified as one token are valid regular expressions. See also RegExp for more information. /ab+c/g /[/]/ A regular expression literal cannot start with two forward slashes (//), because that would be a line comment. To specify an empty regular expression, use /(?:)/.Template literalsOne template literal consists of several tokens: `xxx${ (template head), }xxx${ (template middle), and }xxx` (template tail) are individual tokens, while any expression may come between them. See also template literals for more information. `string text` `string text line 1 string text line 2` `string text ${expression} string text` tag`string text ${expression} string text` Automatic semicolon insertionSome JavaScript statements' syntax definitions require semicolons (;) at the end. They include: var, let, const Expression statements do...while continue, break, return, throw debugger Class field declarations (public or private) import, export However, to make the language more approachable and convenient, JavaScript is able to automatically insert semicolons when consuming the token stream, so that some invalid token sequences can be ""fixed"" to valid syntax. This step happens after the program text has been parsed to tokens according to the lexical grammar. There are three cases when semicolons are automatically inserted: 1. When a token not allowed by the grammar is encountered, and it's separated from the previous token by at least one line terminator (including a block comment that includes at least one line terminator), or the token is ""}"", then a semicolon is inserted before the token. { 1 2 } 3 // is transformed by ASI into: { 1 ;2 ;} 3; // Which is valid grammar encoding three statements, // each consisting of a number literal The ending "")"" of do...while is taken care of as a special case by this rule as well. do { // ... } while (condition) /* ; */ // ASI here const a = 1 However, semicolons are not inserted if the semicolon would then become the separator in the for statement's head. for ( let a = 1 // No ASI here a < 10 // No ASI here a++ ) {} Semicolons are also never inserted as empty statements. For example, in the code below, if a semicolon is inserted after "")"", then the code would be valid, with an empty statement as the if body and the const declaration being a separate statement. However, because automatically inserted semicolons cannot become empty statements, this causes a declaration to become the body of the if statement, which is not valid. if (Math.random() > 0.5) const x = 1 // SyntaxError: Unexpected token 'const' 2. When the end of the input stream of tokens is reached, and the parser is unable to parse the single input stream as a complete program, a semicolon is inserted at the end. const a = 1 /* ; */ // ASI here This rule is a complement to the previous rule, specifically for the case where there's no ""offending token"" but the end of input stream. 3. When the grammar forbids line terminators in some place but a line terminator is found, a semicolon is inserted. These places include: expr <here> ++, expr <here> -- continue <here> lbl break <here> lbl return <here> expr throw <here> expr yield <here> expr yield <here> * expr (param) <here> => {} async <here> function, async <here> prop(), async <here> function*, async <here> *prop(), async <here> (param) <here> => {} Here ++ is not treated as a postfix operator applying to variable b, because a line terminator occurs between b and ++. a = b ++c // is transformed by ASI into a = b; ++c; Here, the return statement returns undefined, and the a + b becomes an unreachable statement. return a + b // is transformed by ASI into return; a + b; Note that ASI would only be triggered if a line break separates tokens that would otherwise produce invalid syntax. If the next token can be parsed as part of a valid structure, semicolons would not be inserted. For example: const a = 1 (1).toString() const b = 1 [1, 2, 3].forEach(console.log) Because () can be seen as a function call, it would usually not trigger ASI. Similarly, [] may be a member access. The code above is equivalent to: const a = 1(1).toString(); const b = 1[1, 2, 3].forEach(console.log); This happens to be valid syntax. 1[1, 2, 3] is a property accessor with a comma-joined expression. Therefore, you would get errors like ""1 is not a function"" and ""Cannot read properties of undefined (reading 'forEach')"" when running the code. Within classes, class fields and generator methods can be a pitfall as well. class A { a = 1 *gen() {} } It is seen as: class A { a = 1 * gen() {} } And therefore will be a syntax error around {. There are the following rules-of-thumb for dealing with ASI, if you want to enforce semicolon-less style: Write postfix ++ and -- on the same line as their operands.  const a = b ++ console.log(a) // ReferenceError: Invalid left-hand side expression in prefix operation const a = b++ console.log(a) The expressions after return, throw, or yield should be on the same line as the keyword.  function foo() { return  1 + 1 // Returns undefined; 1 + 1 is ignored } function foo() { return 1 + 1 } function foo() { return (  1 + 1 ) } Similarly, the label identifier after break or continue should be on the same line as the keyword.  outerBlock: { innerBlock: {  break  outerBlock // SyntaxError: Illegal break statement } } outerBlock: { innerBlock: {  break outerBlock } } The => of an arrow function should be on the same line as the end of its parameters.  const foo = (a, b) => a + b const foo = (a, b) => a + b The async of async functions, methods, etc. cannot be directly followed by a line terminator.  async function foo() {} async function foo() {} If a line starts with one of (, [, `, +, -, / (as in regex literals), prefix it with a semicolon, or end the previous line with a semicolon.  // The () may be merged with the previous line as a function call (() => { // ... })() // The [ may be merged with the previous line as a property access [1, 2, 3].forEach(console.log) // The ` may be merged with the previous line as a tagged template literal `string text ${data}`.match(pattern).forEach(console.log) // The + may be merged with the previous line as a binary + expression +a.toString() // The - may be merged with the previous line as a binary - expression -a.toString() // The / may be merged with the previous line as a division expression /pattern/.exec(str).forEach(console.log) ;(() => { // ... })() ;[1, 2, 3].forEach(console.log) ;`string text ${data}`.match(pattern).forEach(console.log) ;+a.toString() ;-a.toString() ;/pattern/.exec(str).forEach(console.log) Class fields should preferably always be ended with semicolons â in addition to the previous rule (which includes a field declaration followed by a computed property, since the latter starts with [), semicolons are also required between a field declaration and a generator method.  class A { a = 1 [b] = 2 *gen() {} // Seen as a = 1[b] = 2 * gen() {} } class A { a = 1; [b] = 2; *gen() {} } SpecificationsSpecificationECMAScript Language Specification Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Grammar and types Micro-feature from ES6, now in Firefox Aurora and Nightly: binary and octal numbers by Jeff Walden (August 12, 2013) JavaScript character escape sequences by Mathias Bynens (December 21, 2011) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 16, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
3,developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover/event,"developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover/event. HTMLElement: dragover event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdragoverArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover Experimental styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover() Experimental showPopover() Experimental togglePopover() Experimental Eventsbeforeinputbeforetoggle Experimental changecopycutdragdragenddragenterdragleavedragover dragstartdroperrorinputloadmscandidatewindowhide Non-standard mscandidatewindowshow Non-standard mscandidatewindowupdate Non-standard pastetoggle Experimental Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: dragover eventThe dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds). The event is fired on the drop target(s).SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""dragover"", (event) => {}); ondragover = (event) => {}; Event typeA DragEvent. Inherits from Event.   Event     UIEvent     MouseEvent     DragEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ExamplesA minimal drag and drop exampleIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it over the other container, and then releasing it. We use three event handlers here: in the dragstart event handler, we get a reference to the element that the user dragged in the dragover event handler for the target container, we call event.preventDefault(), which enables it to receive drop events. in the drop event handler for the drop zone, we handle moving the draggable element from the original container to the drop zone. For a more complete example of drag and drop, see the page for the drag event. HTML <div class=""dropzone""> <div id=""draggable"" draggable=""true"">This div is draggable</div> </div> <div class=""dropzone"" id=""droptarget""></div> CSS body { /* Prevent the user selecting text in the example */ user-select: none; } #draggable { text-align: center; background: white; } .dropzone { width: 200px; height: 20px; background: blueviolet; margin: 10px; padding: 10px; } JavaScript let dragged = null; const source = document.getElementById(""draggable""); source.addEventListener(""dragstart"", (event) => { // store a ref. on the dragged elem dragged = event.target; }); const target = document.getElementById(""droptarget""); target.addEventListener(""dragover"", (event) => { // prevent default to allow drop event.preventDefault(); }); target.addEventListener(""drop"", (event) => { // prevent default action (open as link for some elements) event.preventDefault(); // move dragged element to the selected drop target if (event.target.className === ""dropzone"") {  dragged.parentNode.removeChild(dragged);  event.target.appendChild(dragged); } }); ResultSpecificationsSpecificationHTML Standard # ix-handler-ondragoverHTML Standard # event-dnd-dragoverBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Other drag and drop events:  drag dragstart dragend dragenter dragleave drop This event on other targets:  Window: dragover event Document: dragover event SVGElement: dragover event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
4,developer.mozilla.org/en-US/docs/Web/Security/Referer/header:/privacy/and/security/concerns,"developer.mozilla.org/en-US/docs/Web/Security/Referer/header:/privacy/and/security/concerns. Referer header: privacy and security concerns - Web security | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb securityReferer header: privacy and security concernsArticle ActionsEnglish (US)In this articleThe referrer problemHow can we fix this?Policy and requirementsSee also Certificate TransparencyFeatures gated by user activationFirefox security guidelinesIFrame credentiallessInsecure passwordsMixed contentMixed contentHow to fix a website with blocked mixed contentReferer header: privacy and security concernsSame-origin policySecure contextsSecure contextsFeatures restricted to secure contextsSecuring your siteSecuring your siteHow to turn off form autocompletionSubdomain takeoversSubresource IntegrityTransport Layer SecurityTypes of attacksWeak signature algorithms In this articleThe referrer problemHow can we fix this?Policy and requirementsSee alsoReferer header: privacy and security concernsThere are privacy and security risks associated with the Referer HTTP header. This article describes them, and offers advice on mitigating those risks.The referrer problemThe Referer (sic) header contains the address of a request (for example, the address of the previous web page from which a link to the currently requested page was followed, or the address of a page loading an image or other resource). This has many fairly innocent uses, including analytics, logging, or optimized caching. However, there are more problematic uses such as tracking or stealing information, or even just side effects such as inadvertently leaking sensitive information. For example, consider a ""reset password"" page with a social media link in a footer. If the link was followed, depending on how information was shared the social media site may receive the reset password URL and may still be able to use the shared information, potentially compromising a user's security. By the same logic, an image from a third party site embedded in your page could result in sensitive information being leaked to the third party. Even if security is not compromised, the information may not be something the user wants shared.How can we fix this?Much of this risk can be mitigated by sensible design of applications. A sensible application would remove such risks by making single-use password reset URLs, or combining them with a unique user token. The risk can also be reduced by transmitting sensitive data in more secure ways. You should use POST rather than GET wherever possible, to avoid passing sensitive data to other locations via URLs. You should always use HTTPS for your sites. This has many security advantages, including the fact that HTTPS sites will never transmit referrer information to non-HTTPS sites. This advice is less relevant now that most of the web is using HTTPS, but it is still a worthy consideration. In addition, you should consider removing any third party content (e.g. social networking widgets embedded in <iframe>) from secure areas of your website, like password reset pages, payment forms, login areas, etc. You can also mitigate such risks using: The Referrer-Policy header on your server to control what information is sent through the Referer header. For example, a directive of no-referrer would omit the Referer header entirely. The referrerpolicy attribute on HTML elements that are in danger of leaking such information (such as <img> and <a>). This can for example be set to no-referrer to stop the Referer header being sent altogether. The rel attribute set to noreferrer on HTML elements that are in danger of leaking such information (such as <img> and <a>). A <meta> element with a name of referrer and the content set to no-referrer to disable the Referer header for the whole document. See Referrer-Policy Integration with HTML. The Exit page technique. Security-conscious server-side frameworks tend to have built in mitigations for such problems, for example: Security in Django (especially see Cross site request forgery (CSRF) protection). helmetjs referrer-policy â middleware for setting Referrer-Policy in Node.js/Express apps (see also helmetjs for more security provisions). Policy and requirementsIt would make sense to write a set of security and privacy requirements for your project team(s) that specify usage of such features to mitigate the associated risks. You should enlist the help of a web security expert to write these requirements, and consider both user needs and welfare, as well as other issues like policy and regulation enforced by legislation such as the EU General Data Protection Regulation (GDPR).See also Mozilla security team guidelines on Referrer-Policy Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 2, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
5,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#description,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#description. const - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStatements and declarationsconstArticle ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoconstThe const declaration creates block-scoped constants, much like variables declared using the let keyword. The value of a constant can't be changed through reassignment (i.e. by using the assignment operator), and it can't be redeclared (i.e. through a variable declaration). However, if a constant is an object or array its properties or items can be updated or removed.Try itSyntaxconst name1 = value1; const name1 = value1, name2 = value2; const name1 = value1, name2 = value2, /* â¦, */ nameN = valueN; nameN The constant's name, which can be any legal identifier. valueN The constant's value. This can be any legal expression, including a function expression. The destructuring assignment syntax can also be used to declare variables. const { bar } = foo; // where foo = { bar: 10, baz: 12 }; // This creates a constant with the name 'bar', which has a value of 10 DescriptionThis declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do not become properties of the globalThis object, unlike var variables. An initializer for a constant is required. You must specify its value in the same declaration. (This makes sense, given that it can't be changed later.) The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutableâjust that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered. All the considerations about the temporal dead zone apply to both let and const. For this reason, const declarations are commonly regarded as non-hoisted. A constant cannot share its name with a function or a variable in the same scope. If you're experimenting in a REPL, such as the Firefox web console (Tools > Web Developer > Web Console), and you run two const declarations with the same name in two separate inputs, you may get a syntax error due to re-declaration. See further discussion of this issue in Firefox bug 1580891. The Chrome console allows const re-declarations between different REPL inputs. Unlike var, const begins declarations, not statements. That means you cannot use a lone const declaration as the body of a block (which makes sense, since there's no way to access the variable). if (true) const a = 1; // SyntaxError: Unexpected token 'const' ExamplesBasic const usageConstants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters. // define MY_FAV as a constant and give it the value 7 const MY_FAV = 7; // this throws an error // Uncaught TypeError: Assignment to constant variable MY_FAV = 20; // MY_FAV is 7 console.log(""my favorite number is: "" + MY_FAV); // trying to redeclare a constant throws an error // Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared const MY_FAV = 20; // this throws an error too var MY_FAV = 20; // this throws an error too let MY_FAV = 20; Block scopingIt's important to note the nature of block scoping. if (MY_FAV === 7) { // this is fine and creates a block scoped MY_FAV variable // (works equally well with let to declare a block scoped non const variable) const MY_FAV = 20; // MY_FAV is now 20 console.log(""my favorite number is "" + MY_FAV); // this gets hoisted into the global context and throws an error var MY_FAV = 20; } // MY_FAV is still 7 console.log(""my favorite number is "" + MY_FAV); const needs to be initialized// throws an error // Uncaught SyntaxError: Missing initializer in const declaration const FOO; const in objects and arraysconst also works on objects and arrays. Attempting to overwrite the object throws an error ""Assignment to constant variable"". const MY_OBJECT = { key: ""value"" }; MY_OBJECT = { OTHER_KEY: ""value"" }; However, object keys are not protected, so the following statement is executed without problem. MY_OBJECT.key = ""otherValue""; You would need to use Object.freeze() to make an object immutable. The same applies to arrays. Assigning a new array to the variable throws an error ""Assignment to constant variable"". const MY_ARRAY = []; MY_ARRAY = [""B""]; Still, it's possible to push items into the array and thus mutate it. MY_ARRAY.push(""A""); // [""A""] SpecificationsSpecificationECMAScript Language Specification # sec-let-and-const-declarationsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also var let Constants in the JavaScript Guide Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 4, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
6,developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Perceivable#guideline/1.4/make/it/easier/for/users/to/see/and/hear/content/including/separating/foreground/from/background,"developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Perceivable#guideline/1.4/make/it/easier/for/users/to/see/and/hear/content/including/separating/foreground/from/background. Perceivable - Accessibility | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesAccessibilityUnderstanding the Web Content Accessibility GuidelinesPerceivableArticle ActionsEnglish (US)In this articleGuideline 1.1 â Providing text alternatives for non-text contentGuideline 1.2 â Providing text alternatives for time-based mediaGuideline 1.3 â Create content that can be presented in different waysGuideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundSee also KeyboardOperablePerceivablePerceivableColor contrastUse of colorRobustText labels and namesUnderstandable In this articleGuideline 1.1 â Providing text alternatives for non-text contentGuideline 1.2 â Providing text alternatives for time-based mediaGuideline 1.3 â Create content that can be presented in different waysGuideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundSee alsoPerceivableThis article provides practical advice on how to write your web content so that it conforms to the success criteria outlined in the Perceivable principle of the Web Content Accessibility Guidelines (WCAG) 2.0 and 2.1. Perceivable states that users must be able to perceive it in some way, using one or more of their senses. Note: To read the W3C definitions for Perceivable and its guidelines and success criteria, see Principle 1: Perceivable - Information and user interface components must be presentable to users in ways they can perceive. Guideline 1.1 â Providing text alternatives for non-text contentThe key here is that text can be converted to other forms that people with disabilities can use. For example, it can be spoken by a screen reader, converted to large print, or represented on a braille display. Non-text content refers to multimedia such as images, audio, and video. Success criteria How to conform to the criteria Practical resource  1.1.1 Provide text equivalents (A)   All images that convey meaningful content should be given suitable   alternative text.  Text alternatives.   Complex images or charts should have an accessible alternative provided,   either on the same page or via a link. Use a regular link instead of   a `longdesc` attribute.     A text description may work, or an accessible data table (see   HTML table advanced features and accessibility). See   Other text alternative mechanisms   for the argument against `longdesc`.      Multimedia content (i.e., audio or video) should at least have a   descriptive identification available, such as a caption or similar.     See Text alternatives   for static caption options, and   Audio transcripts,   Video text tracks, and   Other multimedia content   for other alternatives.      UI controls such as form elements and buttons should have text labels   that describe their purpose.     Buttons are simpleâyou should make sure the button text describes the   function of the button (e.g., <button>Upload image</button>). For more information on other UI controls, see   UI controls.     Implement decorative (non-content) images, video, etc., in a way that is   invisible to assistive technology, so it doesn't confuse users.     Decorative images should be implemented using CSS background images   (see   Backgrounds). If you have to include an image via an   <img> element, give it a blank alt   (alt=""""). Otherwise, screen readers may try to read out   the filepath, etc.      If you are including background video or audio that autoplays, make it   as unobtrusive as possible. Don't make it look/sound like content, and   provide a control to turn it off. Ideally, don't include it at all.    Note: Also see the WCAG description for Guideline 1.1: Text alternatives. Guideline 1.2 â Providing text alternatives for time-based mediaTime-based media refers to multimedia with a duration, such as audio and video. Note that if the audio/video serves as an alternative to existing text content, you don't need to provide another text alternative. Success criteria How to conform to the criteria Practical resource  1.2.1 Provide alternatives for pre-recorded audio-only and video-only content (A) A transcript should be provided for prerecorded audio-only media, and a transcript or audio description should be provided for prerecorded video-only media (i.e., silent video). See Audio transcripts for transcript information. No audio description tutorial is available yet. 1.2.2 Provide captions for web-based video (A) You should provide captions for video presented on the web (e.g., HTML video). This is for the benefit of people who can't hear the audio part of the video. See Video text tracks for HTML video captions, and Other multimedia content for other technologies. See also Add your own subtitles & closed captions (YouTube). 1.2.3 Provide text transcript or audio description for web-based video (A) You should provide text transcripts or audio descriptions for video presented on the web (e.g., HTML video. This is for the benefit of people who can't see the visual part of the video, and don't get the full content from the audio alone. See Audio transcripts for transcript information. No audio description tutorial is available yet. 1.2.4 Provide captions for live audio (AA) You should provide synchronized captions for all live multimedia that contains audio (e.g., video conferences, live audio broadcasts). 1.2.5 Provide audio descriptions for prerecorded video (AA) Audio descriptions should be provided for prerecorded video, but only where the existing audio does not convey the full meaning expressed by the video. 1.2.6 Provide sign language equivalent to prerecorded audio (AAA) An equivalent sign language video should be provided for any prerecorded content containing audio. 1.2.7 Provide extended video with audio descriptions (AAA) Where audio descriptions cannot be provided (see 1.2.5) due to video timing issues (e.g., there are no suitable pauses in the content in which to insert the audio descriptions), an alternative version of the video should be provided that includes inserted pauses (and audio descriptions). 1.2.8 Provide an alternative for prerecorded media (AAA) For all content that features video, a descriptive text transcript should be provided, for example a script of the movie you are watching. This is for the benefit of hearing-impaired viewers who cannot hear the content. See Audio transcripts for transcript information. 1.2.9 Provide a transcript for live audio (AAA) For any live audio content being broadcast, a descriptive text should be provided, for example a script of the play or musical you are listening to. This is for the benefit of hearing-impaired viewers who cannot hear the content. See Audio transcripts for transcript information.  Note: Also see the WCAG description for Guideline 1.2: Time-based Media: Provide alternatives for time-based media. Guideline 1.3 â Create content that can be presented in different waysThis guideline refers to the ability of content to be consumed by users in multiple ways, accommodating their differing needs. Success criteria How to conform to the criteria Practical resource 1.3.1 Info and relationships (A)    Any content structureâor visual relationship made between contentâcan   also be determined programmatically, or be inferred from text   description. The main situations in which this is relevant are:      Text labels and the form elements they describe. These are    associated unambiguously using the <label>    element, which can be picked up by screen readers, etc.       Image alt text. Content images should have text available that    clearly describes the image's contents, which can be    programmatically associated with it (e.g., `alt` text),    or otherwise is easy to associate (e.g., describes it and is sat    right next to it). This should mean that the full meaning can still    be inferred even if you can't see the image.       Lists. If the order of list items is important, use an ordered list    (<ol>).    The whole of   HTML: A good basis for accessibility   is packed with information about this, but you should particularly   refer to   Good semantics,   UI controls, and   Text alternatives.    1.3.2 Meaningful content sequence (A)   A sensible, logical reading order should be easy to determine for any   content, even if it is visually presented in an unusual way. The order   should be made obvious by use of correct semantic elements (e.g.,   headings, paragraphs), with CSS being used to create any unusual layout   styles, irrespective of the markup.     Again, refer to   HTML: A good basis for accessibility.   1.3.3 Sensory characteristics (A)    Instructions for operating controls or understanding content do not   rely on a single sense. This may prove inaccessible to people with a   disability related to that sense, or a device that does not support   that sense. So, for example:      ""Click the round button to continue""The button should be    clearly labelled so that it is obvious that it is the button you    need to press. If there are multiple buttons, make sure they are all    clearly labelled to distinguish their function.       ""Listen to the audio instructions for guidance""This is    obviously problematicâaudio will be inaccessible to those with    hearing impairments, whereas text can be read, but also spoken by a    screen reader if required.       ""Swipe from the right-hand side of the screen to reveal the menu""Some    users might not be able to swipe the screen, either due to    disability or because their device does not support touch. An    alternative should be provided, such as a keyboard shortcut or    button that can be activated by keyboard or other means.    Note: Conveying instructions solely by color is    related, but covered in a different guideline â 1.4.1.       1.3.4 Orientation (AA)   added in 2.1   Content does not restrict its view and operation to a single display   orientation, such as portrait or landscape, unless a specific display   orientation is essential.   Understanding Orientation 1.3.5 Identify Input Purpose (AA) added in 2.1    Follow the list of   53 input fields   to programmatically identify the purpose of a field.   Understanding Identify Input Purpose 1.3.6 Identify Purpose (AAA) added in 2.1   In content implemented using markup languages, the purpose of user   interface components, icons, and regions can be programmatically   determined.  Understanding Identify Purpose  Note: Also see the WCAG description for Guideline 1.3: Adaptable: Create content that can be presented in different ways without losing information or structure. Guideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundThis guideline relates to making sure core content is easy to discern from backgrounds and other decoration. The classic example is color (both color contrast and use of color to convey instructions), but it applies in other situations too. Success criteria How to conform to the criteria Practical resource 1.4.1 Use of color (A)    Color should not be solely relied upon to convey information. For   example, in forms, you should never mark required fields purely with a   color (like red). Instead (or as well as), something like an asterisk   with a label of ""required"" would be more appropriate.     See   Color and color contrast   and   Multiple labels.   1.4.2 Audio controls (A)   For any audio that plays for longer than three seconds, provide   accessible controls to play and pause the audio/video, and mute/adjust   volume.     Use native `<button>`s to provide accessible keyboard   controls, as shown in   Video player styling basics.   1.4.3 Minimum contrast (AA)    The color contrast between background and foreground content should be   at a minimum level to ensure legibility:      Text and its background should have a contrast ratio of at least    4.5:1.       Heading (or just larger) text should have a ratio of at least 3:1.    Larger text is defined as at least 18pt, or 14pt bold.      See   Color and color contrast.   1.4.4 Resize text (AA)   The page should be readable and usable when the text size is doubled.   This means that designs should be responsive, so that when the text size   is increased, the content is still accessible.   1.4.5 Images of text (AA)   Images should NOT be used to present content where text would do the   job. For example, if an image is mostly textual, it could be represented   using text as well as images.   1.4.6 Enhanced contrast (AAA) This follows, and builds on, criterion 1.4.3.    Text and its background should have a contrast ratio of at least    7:1.       Heading (or just larger) text should have a ratio of at least 4.5:1.    Larger text is defined as at least 18pt, or 14pt bold.      See   Color and color contrast.   1.4.7 Low or no background audio (AAA)   Prerecorded audio recordings that primarily feature speech should have   minimal background noise, so the content can be easily understood.   1.4.8 Visual presentation (AAA) For text content presentation, the following should be true: Foreground and background colors should be user-selectable.    Text blocks should be no wider than 80 characters (or glyphs), for    maximum readability.   Text should not be fully justified (e.g., text-align: justify;).    Line height should be at least 1.5 times the text size within    paragraphs (e.g., `line-height: 1.5;`), and at least 2.25    times the text size between paragraphs (e.g., padding: 2.25rem;).       When the text size is doubled, the content should not need to be    scrolled.     1.4.9 Images of text (No Exception) (AAA)   Text should not be presented as part of an image unless it is purely   decoration (i.e., it does not convey any content) or cannot be presented   in any other way.   1.4.10 Reflow (AA) added in 2.1    No horizontal scrolling for left-to-right languages (like English)    or right-to-left languages (like Arabic)   No vertical scrolling for top-to-bottom languages (like Japanese)    Except for parts of the content which require two-dimensional layout    for usage or meaning (like a large data table)    Understanding Reflow 1.4.11 Non-Text Contrast(AA) added in 2.1   Minimum color contrast ratio of 3:1 for user interface components and   graphical objects.  Understanding Non-Text Contrast 1.4.12 Text Spacing (AA) added in 2.1    No loss of content or functionality occurs when the following styles   are applied:   Line height (line spacing) to at least 1.5 times the font size Spacing following paragraphs to at least 2 times the font size Letter spacing (tracking) to at least 0.12 times the font size Word spacing to at least 0.16 times the font size Understanding Text Spacing 1.4.13 Content on Hover or Focus (AA) added in 2.1    While additional content may appear and disappear in coordination with   hover and keyboard focus, this success criterion specifies three   conditions that must be met:   dismissible (can be closed/removed)    hoverable (the additional content does not disappear when the    pointer is over it)       persistent (the additional content does not disappear without user    action)    Understanding Content on Hover or Focus  Note: Also see the WCAG description for Guideline 1.4: Distinguishable: Make it easier for users to see and hear content including separating foreground from background. See also WCAG Perceivable Operable Understandable Robust Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
7,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/media,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/media. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
8,developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead,"developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead. HTMLTableElement: createTHead() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLTableElementcreateTHead()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilityHTML DOM APIHTMLTableElementInstance propertiesalign Deprecated bgColor Deprecated border Deprecated captioncellPadding Deprecated cellSpacing Deprecated frame Deprecated rowsrules Deprecated summary Deprecated tBodiestFoottHeadwidth Deprecated Instance methodscreateCaption()createTBody()createTFoot()createTHead() deleteCaption()deleteRow()deleteTFoot()deleteTHead()insertRow()Inheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleSyntaxExamplesSpecificationsBrowser compatibilityHTMLTableElement: createTHead() method The createTHead() method of HTMLTableElement objects returns the <thead> element associated with a given <table>. If no header exists in the table, this method creates it, and then returns it. Note: If no header exists, createTHead() inserts a new  header directly into the table. The header does not need to be added separately as  would be the case if Document.createElement() had been used to create  the new <thead> element. SyntaxcreateTHead() ParametersNone.Return valueHTMLTableSectionElementExampleslet myhead = mytable.createTHead(); // Now this should be true: myhead === mytable.tHead SpecificationsSpecificationHTML Standard # dom-table-createthead-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
9,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rel,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/rel. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
10,developer.mozilla.org/en-US/docs/Web/API/UserActivation/isActive,"developer.mozilla.org/en-US/docs/Web/API/UserActivation/isActive. UserActivation: isActive property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUserActivationisActiveArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIUserActivationInstance propertieshasBeenActiveisActive Related pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUserActivation: isActive propertyThe read-only isActive property of the UserActivation interface indicates whether the current window has transient user activation (see transient activation).ValueA boolean.ExamplesChecking if a user gesture was recently performedUse the isActive property to check whether the user is currently interacting with the page. if (navigator.userActivation.isActive) { // proceed to request playing media, for example } SpecificationsSpecificationHTML Standard # dom-useractivation-isactiveBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also UserActivation UserActivation.hasBeenActive Features gated by user activation Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
11,developer.mozilla.org/en-US/docs/Glossary/Entity/header,"developer.mozilla.org/en-US/docs/Glossary/Entity/header. Entity header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsEntity headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoEntity header Warning: The current HTTP/1.1 specification no longer refers to entities, entity headers or entity-body. Some of the fields are now referred to as Representation header fields. An entity header is an HTTP header that describes the payload of an HTTP message (i.e. metadata about the message body). Entity headers include: Content-Length, Content-Language, Content-Encoding, Content-Type, Expires, etc. Entity headers may be present in both HTTP request and response messages. In the following example, Content-Length is an entity header, while Host and User-Agent are requests headers: POST /myform.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Content-Length: 128 See also Representation header Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
12,developer.mozilla.org/en-US/docs/Glossary/Effective/connection/type,"developer.mozilla.org/en-US/docs/Glossary/Effective/connection/type. Effective connection type - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsEffective connection typeArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoEffective connection typeEffective connection type (ECT) refers to the measured network performance, returning a cellular connection type, like 3G, even if the actual connection is tethered broadband or Wi-Fi, based on the time between the browser requesting a page and effective type of the connection. The values of 'slow-2g', '2g', '3g', and '4g' are determined using observed round-trip times and downlink values. ECT Minimum RTT Maximum downlink Explanation  slow-2g 2000ms 50 Kbps The network is suited for small transfers only such as text-only pages. 2g 1400ms 70 Kbps The network is suited for transfers of small images. 3g 270ms 700 Kbps The network is suited for transfers of large assets such as high resolution images, audio, and SD video. 4g 0ms â The network is suited for HD video, real-time video, etc. effectiveType is a property of the Network Information API, exposed to JavaScript via the navigator.connection object. To see your effective connection type, open the console of the developer tools of a supporting browser and enter the following: navigator.connection.effectiveType; See also Network Information API NetworkInformation NetworkInformation.effectiveType ECT Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
13,developer.mozilla.org/en-US/docs/Web/API/DocumentType/before,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/before. DocumentType: before() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTypebefore()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentTypeInstance propertiesnamepublicIdsystemIdInstance methodsafter()before() remove()replaceWith()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentType: before() method The DocumentType.before() method inserts a set of Node objects or strings in the children list of the DocumentType's parent, just before the DocumentType. Strings are inserted as equivalent Text nodes. Syntaxbefore(param1) before(param1, param2) before(param1, param2, /* â¦ ,*/ paramN) Parameters param1, â¦, paramN A set of Node objects or strings to insert. Return valueNone (undefined).Exceptions HierarchyRequestError DOMException Thrown when the node cannot be inserted at the specified point in the hierarchy. ExamplesAdding a conditional comment Comment nodes are valid before doctype declarations but not advisable given they trigger quirks mode in IE. A conditional comment works for IE as well, though: let docType = document.implementation.createDocumentType(""html"", """", """"); let myDoc = document.implementation.createDocument("""", """", docType); docType.before( document.createComment(""<!--[if !IE]> conditional comment <![endif]-->"") ); myDoc.childNodes; // NodeList [<!--[if !IE]> conditional comment <![endif]-->, <!DOCTYPE html>] SpecificationsSpecificationDOM Standard # ref-for-dom-childnode-beforeâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also DocumentType.after() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
14,developer.mozilla.org/en-US/docs/Web/CSS/Value/definition/syntax#single/bar,"developer.mozilla.org/en-US/docs/Web/CSS/Value/definition/syntax#single/bar. Value definition syntax - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSValue definition syntaxArticle ActionsEnglish (US)In this articleComponent value typesComponent value combinatorsComponent value multipliersSummarySpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleComponent value typesComponent value combinatorsComponent value multipliersSummarySpecificationsSee alsoValue definition syntaxCSS value definition syntax, a formal grammar, is used for defining the set of valid values for a CSS property or function. In addition to this syntax, the set of valid values can be further restricted by semantic constraints (for example, for a number to be strictly positive). The definition syntax describes which values are allowed and the interactions between them. A component can be a keyword, some characters considered as a literal, or a value of a given CSS data type or of another CSS property.Component value typesKeywordsGeneric keywords A keyword with a predefined meaning appears literally, without quotation marks. For example: auto, smaller or ease-in. The specific case of inherit, initial and unset All CSS properties accept the keywords inherit, initial and unset, that are defined throughout CSS. They are not shown in the value definition, and are implicitly defined.LiteralsIn CSS, a few characters can appear on their own, like the slash ('/') or the comma (','), and are used in a property definition to separate its parts. The comma is often used to separate values in enumerations, or parameters in mathematical-like functions; the slash often separates parts of the value that are semantically different, but have a common syntax. Typically, the slash is used in shorthand properties; to separate components that are of the same type, but belong to different properties. Both symbols appear literally in a value definition.Data typesBasic data types Some kind of data are used throughout CSS, and are defined once for all values in the specification. Called basic data types, they are represented with their name surrounded by the symbol '<' and '>': <angle>, <string>, â¦ Non-terminal data types Less common data types, called non-terminal data types, are also surrounded by '<' and '>'. Non-terminal data types are of two kinds: data types sharing the same name of a property, put between quotes. In this case, the data type shares the same set of values as the property. They are often used in the definition of shorthand properties. data type not sharing the same name of a property. These data types are very close to the basic data types. They only differ from the basic data types in the physical location of their definition. In this case, the definition is usually physically very close to the definition of the property using them. Component value combinatorsBracketsBrackets enclose several entities, combinators, and multipliers, then transform them as a single component. They are used to group components to bypass the precedence rules. bold [ thin && <length> ] This example matches the following values: bold thin 2vh bold 0 thin bold thin 3.5em But not: thin bold 3em, as bold is juxtaposed with the component defined by the brackets, it must appear before it. JuxtapositionPlacing several keywords, literals or data types, next to one another, only separated by one or several spaces, is called juxtaposition. All juxtaposed components are mandatory and should appear in the exact order. bold <length>, thin This example matches the following values: bold 1em, thin bold 0, thin bold 2.5cm, thin bold 3vh, thin But not: thin 1em, bold, as the entities must be in the expressed order bold 1em thin, as the entities are mandatory; the comma, a literal, must be present bold 0.5ms, thin, as the ms values are not <length> Double ampersandSeparating two or more components, by a double ampersand, &&, means that all these entities are mandatory but may appear in any order. bold && <length> This example matches the following values: bold 1em bold 0 2.5cm bold 3vh bold But not: bold, as both components must appear in the value. bold 1em bold, as both components must appear only one time. Note: juxtaposition has precedence over the double ampersand, meaning that bold thin && <length> is equivalent to [ bold thin ] && <length>. It describes bold thin <length> or <length> bold thin but not bold <length> thin. Double barSeparating two or more components by a double bar, ||, means that all entities are options: at least one of them must be present, and they may appear in any order. Typically this is used to define the different values of a shorthand property. <'border-width'> || <'border-style'> || <'border-color'> This example matches the following values: 1em solid blue blue 1em solid 1px yellow But not: blue yellow, as a component must appear at most one single time. bold, as it isn't a keyword allowed as value of any of the entity. Note: the double ampersand has precedence over the double bar, meaning that bold || thin && <length> is equivalent to bold || [ thin && <length> ]. It describes bold, thin <length>, bold thin <length>, or thin <length> bold but not <length> bold thin as bold, if not omitted, must be placed before or after the whole thin && <length> component. Single barSeparating two or more entities by a single bar, |, means that all entities are exclusive options: exactly one of these options must be present. This is typically used to separate a list of possible keywords. <percentage> | <length> | left | center | right | top | bottom This example matches the following values: 3% 0 3.5em left center right top bottom But not: center 3%, as only one of the components must be present. 3em 4.5em, as a component must be present at most one time. Note: the double bar has precedence over the single bar, meaning that bold | thin || <length> is equivalent to bold | [ thin || <length> ]. It describes bold, thin, <length>, <length> thin, or thin <length> but not bold <length> as only one entity from each side of the | combinator can be present. Component value multipliersA multiplier is a sign that indicates how many times a preceding entity can be repeated. Without a multiplier, an entity must appear exactly one time. Note that multipliers cannot be added and have precedence over all combinators.Asterisk (*)The asterisk multiplier indicates that the entity may appear zero, one or several times. bold smaller* This example matches the following values: bold bold smaller bold smaller smaller bold smaller smaller smaller, and so on. But not: smaller, as bold is juxtaposed, and must appear before any smaller keyword. Plus (+)The plus multiplier indicates that the entity may appear one or several times. bold smaller+ This example matches the following values: bold smaller bold smaller smaller bold smaller smaller smaller, and so on. But not: bold, as smaller must appear at least one time. smaller, as bold is juxtaposed and must appear before any smaller keyword. Question mark (?)The question mark multiplier indicates that the entity is optional, and must appear zero or one time. bold smaller? This example matches the following values: bold bold smaller But not: bold smaller smaller, as smaller must appear at most one time. smaller, as bold is juxtaposed and must appear before any smaller keyword. Curly braces ({ })The curly braces multiplier, enclosing two integers separated by a comma, A and B, indicates that the entity must appear at least A times and at most B times. bold smaller{1,3} This example matches the following values: bold smaller bold smaller smaller bold smaller smaller smaller But not: bold, as smaller must appear at least one time. bold smaller smaller smaller smaller, as smaller must appear at most three times. smaller, as bold is juxtaposed and must appear before any smaller keyword Hash mark (#)The hash mark multiplier indicates that the entity may be repeated one or more times (for example, the plus multiplier), but each occurrence is separated by a comma (','). bold smaller# This example matches the following values: bold smaller bold smaller, smaller bold smaller, smaller, smaller, and so on. But not: bold, as smaller must appear at least one time. bold smaller smaller smaller, as the different occurrences of smaller must be separated by commas. smaller, as bold is juxtaposed and must appear before any smaller keyword. The hash mark may optionally be followed by curly braces to indicate precisely how many times the repetition occurs. bold smaller#{1,3} This example matches the following values: bold smaller bold smaller, smaller bold smaller, smaller, smaller But not: bold smaller, smaller, smaller, smaller, as smaller must appear at most three times. bold smaller#{2} This example matches the following value: bold smaller, smaller But not: bold smaller, as smaller must appear exactly two times. Exclamation point (!)The exclamation point multiplier after a group indicates that the group is required, and must produce at least one value; even if the grammar of the items within the group would otherwise allow the entire contents to be omitted, at least one component value must not be omitted. [ bold? smaller? ]! This example matches the following values: bold smaller bold smaller But not: neither bold nor smaller, as one of them must appear. smaller bold, as bold is juxtaposed and must appear before the smaller keyword. bold smaller bold, as bold and smaller may only appear once. Summary Sign Name Description Example  Combinators Juxtaposition Components are mandatory and should appear in that order solid <length> && Double ampersand Components are mandatory but may appear in any order <length> && <string> || Double bar   At least one of the components must be present, and they may appear in   any order.  <'border-image-outset'> || <'border-image-slice'> | Single bar Exactly one of the components must be present smaller | small | normal | big | bigger [ ] Brackets Group components to bypass precedence rules bold [ thin && <length> ] Multipliers No multiplier Exactly 1 time solid * Asterisk 0 or more times bold smaller* + Plus sign 1 or more times bold smaller+ ? Question mark 0 or 1 time (that is optional) bold smaller? {A,B} Curly braces At least A times, at most B times bold smaller{1,3} # Hash mark   1 or more times, but each occurrence separated by a comma   (',')  bold smaller# ! Exclamation point Group must produce at least 1 value [ bold? smaller? ]! SpecificationsSpecificationCSS Values and Units Module Level 4 # value-defsSee also CSS key concepts:  CSS syntax Comments Specificity Inheritance Box model Layout modes Visual formatting models Margin collapsing Values   Initial values Computed values Used values Actual values Value definition syntax Shorthand properties Replaced elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 16, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
15,developer.mozilla.org/en-US/docs/Web/API/Node/removeChild,"developer.mozilla.org/en-US/docs/Web/API/Node/removeChild. Node: removeChild() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNoderemoveChild()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild() replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoNode: removeChild() method The removeChild() method of the Node interface removes a child node from the DOM and returns the removed node. Note: As long as a reference is kept on the removed child,  it still exists in memory, but is no longer part of the DOM.  It can still be reused later in the code.   If the return value of removeChild() is not stored, and no other reference is kept,  it will be automatically deleted from memory after a short time.  Unlike Node.cloneNode() the return value preserves the EventListener objects associated with it.SyntaxremoveChild(child) Parameters child A Node that is the child node to be removed from the DOM. Exception NotFoundError DOMException Thrown if the child is not a child of the node. TypeError Thrown if the child is null. ExamplesSimple examplesGiven this HTML: <div id=""top""> <div id=""nested""></div> </div> To remove a specified element when knowing its parent node: let d = document.getElementById(""top""); let d_nested = document.getElementById(""nested""); let throwawayNode = d.removeChild(d_nested); To remove a specified element without having to specify its parent node: let node = document.getElementById(""nested""); if (node.parentNode) { node.parentNode.removeChild(node); } To remove all children from an element: let element = document.getElementById(""idOfParent""); while (element.firstChild) { element.removeChild(element.firstChild); } Causing a TypeError<!--Sample HTML code--> <div id=""top""></div> let top = document.getElementById(""top""); let nested = document.getElementById(""nested""); // Throws Uncaught TypeError let garbage = top.removeChild(nested); Causing a NotFoundError<!--Sample HTML code--> <div id=""top""> <div id=""nested""></div> </div> let top = document.getElementById(""top""); let nested = document.getElementById(""nested""); // This first call correctly removes the node let garbage = top.removeChild(nested); // Throws NotFoundError garbage = top.removeChild(nested); SpecificationsSpecificationDOM Standard # dom-node-removechildBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.replaceChild() Node.parentNode Element.remove() Node.cloneNode() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
16,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/toLocaleString,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/toLocaleString. Object.prototype.toLocaleString() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsObjectObject.prototype.toLocaleString()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsObjectConstructorObject() constructorPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.assign()Object.create()Object.defineProperties()Object.defineProperty()Object.entries()Object.freeze()Object.fromEntries()Object.getOwnPropertyDescriptor()Object.getOwnPropertyDescriptors()Object.getOwnPropertyNames()Object.getOwnPropertySymbols()Object.getPrototypeOf()Object.hasOwn()Object.prototype.hasOwnProperty()Object.is()Object.isExtensible()Object.isFrozen()Object.prototype.isPrototypeOf()Object.isSealed()Object.keys()Object.preventExtensions()Object.prototype.propertyIsEnumerable()Object.seal()Object.setPrototypeOf()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()Object.values()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoObject.prototype.toLocaleString()The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.Try itSyntaxtoLocaleString() ParametersNone. However, all objects that override this method are expected to accept at most two parameters, corresponding to locales and options, such as Date.prototype.toLocaleString. The parameter positions should not be used for any other purpose.Return valueThe return value of calling this.toString().DescriptionAll objects that inherit from Object.prototype (that is, all except null-prototype objects) inherit the toLocaleString() method. Object's toLocaleString returns the result of calling this.toString(). This function is provided to give objects a generic toLocaleString method, even though not all may use it. In the core language, these built-in objects override toLocaleString to provide locale-specific formatting: Array: Array.prototype.toLocaleString() Number: Number.prototype.toLocaleString() Date: Date.prototype.toLocaleString() TypedArray: TypedArray.prototype.toLocaleString() BigInt: BigInt.prototype.toLocaleString() ExamplesUsing the base toLocaleString() methodThe base toLocaleString() method simply calls toString(). const obj = { toString() {  return ""My Object""; }, }; console.log(obj.toLocaleString()); // ""My Object"" Array toLocaleString() overrideArray.prototype.toLocaleString() is used to print array values as a string by invoking each element's toLocaleString() method and joining the results with a locale-specific separator. For example: const testArray = [4, 7, 10]; const euroPrices = testArray.toLocaleString(""fr"", { style: ""currency"", currency: ""EUR"", }); // ""4,00 â¬,7,00 â¬,10,00 â¬"" Date toLocaleString() overrideDate.prototype.toLocaleString() is used to print out date displays more suitable for specific locales. For example: const testDate = new Date(); // ""Fri May 29 2020 18:04:24 GMT+0100 (British Summer Time)"" const deDate = testDate.toLocaleString(""de""); // ""29.5.2020, 18:04:24"" const frDate = testDate.toLocaleString(""fr""); // ""29/05/2020, 18:04:24"" Number toLocaleString() overrideNumber.prototype.toLocaleString() is used to print out number displays more suitable for specific locales, e.g. with the correct separators. For example: const testNumber = 2901234564; // ""2901234564"" const deNumber = testNumber.toLocaleString(""de""); // ""2.901.234.564"" const frNumber = testNumber.toLocaleString(""fr""); // ""2 901 234 564"" SpecificationsSpecificationECMAScript Language Specification # sec-object.prototype.tolocalestringBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Object.prototype.toString() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
17,developer.mozilla.org/en-US/docs/Web/HTML/Content/categories#phrasing/content,"developer.mozilla.org/en-US/docs/Web/HTML/Content/categories#phrasing/content. Content categories - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLContent categoriesArticle ActionsEnglish (US)In this articleMain content categoriesSecondary categoriesTransparent content model HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleMain content categoriesSecondary categoriesTransparent content modelContent categoriesMost HTML elements are a member of one or more content categories â these categories group elements that share common characteristics. This is a loose grouping (it doesn't actually create a relationship among elements of these categories), but they help define and describe the categories' shared behavior and their associated rules, especially when you come upon their intricate details. It's also possible for elements to not be a member of any of these categories. There are three types of content categories: Main content categories, which describe common rules shared by many elements. Form-related content categories, which describe rules common to form-related elements. Specific content categories, which describe rare categories shared only by a few elements, sometimes only in a specific context. Note: A more detailed discussion of these content categories and their comparative functionalities is beyond the scope of this article; for that, you may wish to read the relevant portions of the HTML specification. Main content categoriesMetadata contentElements belonging to the metadata content category modify the presentation or the behavior of the rest of the document, set up links to other documents, or convey other out-of-band information. Elements belonging to this category are <base>, <link>, <meta>, <noscript>, <script>, <style> and <title>.Flow contentFlow content is a broad category that encompasses most elements that can go inside the <body> element, including heading elements, sectioning elements, phrasing elements, embedding elements, interactive elements, and form-related elements. It also includes text nodes (but not those that only consist of white space characters). The flow elements are: <a> <abbr> <address> <article> <aside> <audio> <b> <bdo> <bdi> <blockquote> <br> <button> <canvas> <cite> <code> <data> <datalist> <del> <details> <dfn> <div> <dl> <em> <embed> <fieldset> <figure> <footer> <form> h1 h2 h3 h4 h5 h6 <header> <hgroup> <hr> <i> <iframe> <img> <input> <ins> <kbd> <label> <main> <map> <mark> <math> <menu> <meter> <nav> <noscript> <object> <ol> <output> <p> <picture> <pre> <progress> <q> <ruby> <s> <samp> <script> <section> <select> <small> <span> <strong> <sub> <sup> <svg> <table> <template> <textarea> <time> <u> <ul> <var> <video> <wbr> A few other elements belong to this category, but only if a specific condition is fulfilled: <area>, if it is a descendant of a <map> element <link>, if the itemprop attribute is present <meta>, if the itemprop attribute is present <style>, if the scoped Deprecated attribute is present Sectioning contentSectioning content is a subset of flow content, and can be used everywhere flow content is expected. Elements belonging to the sectioning content model create a section in the current outline that defines the scope of <header> elements, <footer> elements, and heading content. Elements belonging to this category are <article>, <aside>, <nav>, and <section>.Heading contentHeading content is a subset of flow content, which defines the title of a section, whether marked by an explicit sectioning content element, or implicitly defined by the heading content itself. Heading content can be used everywhere flow content is expected. Elements belonging to this category are h1, h2, h3, h4, h5, h6 and <hgroup>. Note: Though likely to contain heading content, the <header> is not heading content itself. Note: The <hgroup> element is not recommended as it does not work properly with assistive technologies. It was removed from the W3C HTML specification prior to HTML 5 being finalized, but is still part of the WHATWG specification and is at least partially supported by most browsers. Phrasing contentPhrasing content is a subset of flow content that defines the text and the markup it contains, and can be used everywhere flow content is expected. Runs of phrasing content make up paragraphs. Elements belonging to this category are: <abbr> <audio> <b> <bdo> <br> <button> <canvas> <cite> <code> <data> <datalist> <dfn> <em> <embed> <i> <iframe> <img> <input> <kbd> <label> <mark> <math> <meter> <noscript> <object> <output> <picture> <progress> <q> <ruby> <s> <samp> <script> <select> <slot> <small> <span> <strong> <sub> <sup> <svg> <template> <textarea> <time> <u> <var> <video> <wbr> and plain text (not only consisting of white spaces characters). A few other elements belong to this category, but only if a specific condition is fulfilled: <a>, if it contains only phrasing content <area>, if it is a descendant of a <map> element <del>, if it contains only phrasing content <ins>, if it contains only phrasing content <link>, if the itemprop attribute is present <map>, if it contains only phrasing content <meta>, if the itemprop attribute is present Embedded contentEmbedded content is a subset of flow content that imports another resource or inserts content from another markup language or namespace into the document, and can be used everywhere flow content is expected. Elements that belong to this category include: <audio> <canvas> <embed> <iframe> <img> <math> <object> <picture> <svg> <video>. Interactive contentInteractive content is a subset of flow content that includes elements that are specifically designed for user interaction, and can be used everywhere flow content is expected. Elements that belong to this category include: <a> <button> <details> <embed> <iframe> <label> <select>, and <textarea>. Some elements belong to this category only under specific conditions: <audio>, if the controls attribute is present <img>, if the usemap attribute is present <input>, if the type attribute is not in the hidden state <object>, if the usemap attribute is present <video>, if the controls attribute is present Palpable contentContent is palpable when it's neither empty nor hidden; it is content that is rendered and is substantive. Elements whose model is flow content should have at least one node which is palpable.Form-associated contentForm-associated content is a subset of flow content comprising elements that have a form owner, exposed by a form attribute, and can be used everywhere flow content is expected. A form owner is either the containing <form> element or the element whose id is specified in the form attribute. <button> <fieldset> <input> <label> <meter> <object> <output> <progress> <select> <textarea> This category contains several sub-categories: listed Elements that are listed in the form.elements and fieldset.elements collections. Contains <button>, <fieldset>, <input>, <object>, <output>, <select>, and <textarea>. labelable Elements that can be associated with <label> elements. Contains <button>, <input>, <meter>, <output>, <progress>, <select>, and <textarea>. submittable Elements that can be used for constructing the form data set when the form is submitted. Contains <button>, <input>, <object>, <select>, and <textarea>. resettable Elements that can be affected when a form is reset. Contains <input>, <output>, <select>, and <textarea>. Secondary categoriesThere are some secondary classifications of elements that can be useful to be aware of as well.Script-supporting elementsScript-supporting elements are elements which don't directly contribute to the rendered output of a document. Instead, they serve to support scripts, either by containing or specifying script code directly, or by specifying data that will be used by scripts. The script-supporting elements are: <script> <template> Transparent content modelIf an element has a transparent content model, then its contents must be structured such that they would be valid HTML 5, even if the transparent element were removed and replaced by the child elements. For example, the <del> and <ins> elements are transparent: <p> We hold these truths to be <del><em>sacred &amp; undeniable</em></del> <ins>self-evident</ins>. </p> If those elements were removed, this fragment would still be valid HTML (if not correct English). <p>We hold these truths to be <em>sacred &amp; undeniable</em> self-evident.</p> Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
18,developer.mozilla.org/en-US/docs/Glossary/RAIL,"developer.mozilla.org/en-US/docs/Glossary/RAIL. RAIL - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsRAILArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoRAILRAIL, an acronym for Response, Animation, Idle, and Load, is a performance model originated by the Google Chrome team in 2015, focused on user experience and performance within the browser. The performance mantra of RAIL is ""Focus on the user; the end goal isn't to make your site perform fast on any specific device, it's to make users happy."" There are 4 stages of interaction: page load, idle, response to input, and scrolling and animation. In acronym order, the main tenets are: Response Respond to users immediately, acknowledging any user input in 100ms or less. Animation When animating, render each frame in under 16ms, aiming for consistency and avoiding jank. Idle When using the main JavaScript thread, work in chunks for less than 50ms to free up the thread for user interactions. Load Deliver interactive content in less than 1 second. See also Recommended Web Performance Timings: How long is too long Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
19,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/local,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/local. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
20,developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes,"developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes. Pseudo-classes - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSPseudo-classesArticle ActionsEnglish (US)In this articleElement display state pseudo-classesInput pseudo-classesLinguistic pseudo-classesLocation pseudo-classesResource state pseudo-classesTime-dimensional pseudo-classesTree-structural pseudo-classesUser action pseudo-classesFunctional pseudo-classesSyntaxAlphabetical indexSpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleElement display state pseudo-classesInput pseudo-classesLinguistic pseudo-classesLocation pseudo-classesResource state pseudo-classesTime-dimensional pseudo-classesTree-structural pseudo-classesUser action pseudo-classesFunctional pseudo-classesSyntaxAlphabetical indexSpecificationsSee alsoPseudo-classesA CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled. /* Any button over which the user's pointer is hovering */ button:hover { color: blue; } A pseudo-class consists of a colon (:) followed by the pseudo-class name (e.g., :hover). A functional pseudo-class also contains a pair of parenthesis to define the arguments (e.g., :dir()). The element that a pseudo-class is attached to is defined as an anchor element (e.g., button in case button:hover). Pseudo-classes let you apply a style to an element not only in relation to the content of the document tree, but also in relation to external factors like the history of the navigator (:visited, for example), the status of its content (like :checked on certain form elements), or the position of the mouse (like :hover, which lets you know if the mouse is over an element or not). Note: In contrast to pseudo-classes, pseudo-elements can be used to style a specific part of an element. Element display state pseudo-classesThese pseudo-classes enable the selection of elements based on their display states. :fullscreen Matches an element that is currently in fullscreen mode. :modal Matches an element that is in a state in which it excludes all interaction with elements outside it until the interaction has been dismissed. :picture-in-picture Matches an element that is currently in picture-in-picture mode. Input pseudo-classesThese pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction. :autofill Matches when an <input> has been autofilled by the browser. :enabled Represents a user interface element that is in an enabled state. :disabled Represents a user interface element that is in a disabled state. :read-only Represents any element that cannot be changed by the user. :read-write Represents any element that is user-editable. :placeholder-shown Matches an input element that is displaying placeholder text. For example, it will match the placeholder attribute in the <input> and <textarea> elements. :default Matches one or more UI elements that are the default among a set of elements. :checked Matches when elements such as checkboxes and radio buttons are toggled on. :indeterminate Matches UI elements when they are in an indeterminate state. :blank Matches a user-input element which is empty, containing an empty string or other null input. :valid Matches an element with valid contents. For example, an input element with the type 'email' that contains a validly formed email address or an empty value if the control is not required. :invalid Matches an element with invalid contents. For example, an input element with type 'email' with a name entered. :in-range Applies to elements with range limitations. For example, a slider control when the selected value is in the allowed range. :out-of-range Applies to elements with range limitations. For example, a slider control when the selected value is outside the allowed range. :required Matches when a form element is required. :optional Matches when a form element is optional. :user-invalid Represents an element with incorrect input, but only when the user has interacted with it. Linguistic pseudo-classesThese pseudo-classes reflect the document language and enable the selection of elements based on language or script direction. :dir() The directionality pseudo-class selects an element based on its directionality as determined by the document language. :lang() Select an element based on its content language. Location pseudo-classesThese pseudo-classes relate to links, and to targeted elements within the current document. :any-link Matches an element if the element would match either :link or :visited. :link Matches links that have not yet been visited. :visited Matches links that have been visited. :local-link Matches links whose absolute URL is the same as the target URL. For example, anchor links to the same page. :target Matches the element which is the target of the document URL. :target-within Matches elements which are the target of the document URL, but also elements which have a descendant which is the target of the document URL. :scope Represents elements that are a reference point for selectors to match against. Resource state pseudo-classesThese pseudo-classes apply to media that is capable of being in a state where it would be described as playing, such as a video. :playing Represents a media element that is capable of playing when that element is playing. :paused Represents a media element that is capable of playing when that element is paused. Time-dimensional pseudo-classesThese pseudo-classes apply when viewing something which has timing, such as a WebVTT caption track. :current Represents the element or ancestor of the element that is being displayed. :past Represents an element that occurs entirely before the :current element. :future Represents an element that occurs entirely after the :current element. Tree-structural pseudo-classesThese pseudo-classes relate to the location of an element within the document tree. :root Represents an element that is the root of the document. In HTML this is usually the <html> element. :empty Represents an element with no children other than white-space characters. :nth-child Uses An+B notation to select elements from a list of sibling elements. :nth-last-child Uses An+B notation to select elements from a list of sibling elements, counting backwards from the end of the list. :first-child Matches an element that is the first of its siblings. :last-child Matches an element that is the last of its siblings. :only-child Matches an element that has no siblings. For example, a list item with no other list items in that list. :nth-of-type Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements. :nth-last-of-type Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements counting backwards from the end of the list. :first-of-type Matches an element that is the first of its siblings, and also matches a certain type selector. :last-of-type Matches an element that is the last of its siblings, and also matches a certain type selector. :only-of-type Matches an element that has no siblings of the chosen type selector. User action pseudo-classesThese pseudo-classes require some interaction by the user in order for them to apply, such as holding a mouse pointer over an element. :hover Matches when a user designates an item with a pointing device, such as holding the mouse pointer over the item. :active Matches when an item is being activated by the user. For example, when the item is clicked on. :focus Matches when an element has focus. :focus-visible Matches when an element has focus and the user agent identifies that the element should be visibly focused. :focus-within Matches an element to which :focus applies, plus any element that has a descendant to which :focus applies. Functional pseudo-classesThese pseudo-classes accept a selector list or forgiving selector list as a parameter. :is() The matches-any pseudo-class matches any element that matches any of the selectors in the list provided. The list is forgiving. :not() The negation, or matches-none, pseudo-class represents any element that is not represented by its argument. :where() The specificity-adjustment pseudo-class matches any element that matches any of the selectors in the list provided without adding any specificity weight. The list is forgiving. :has() The relational pseudo-class represents an element if any of the relative selectors match when anchored against the attached element. Syntaxselector:pseudo-class { property: value; } Like regular classes, you can chain together as many pseudo-classes as you want in a selector.Alphabetical indexPseudo-classes defined by a set of CSS specifications include the following: A :active :any-link :autofill B :blank Experimental C :checked :current Experimental D :default :defined :dir() Experimental :disabled E :empty :enabled F :first :first-child :first-of-type :fullscreen :future Experimental :focus :focus-visible :focus-within H :has() Experimental :host :host() :host-context() Experimental :hover I :indeterminate :in-range :invalid :is() L :lang() :last-child :last-of-type :left :link :local-link Experimental M :modal N :not() :nth-child() :nth-col() Experimental :nth-last-child() :nth-last-col() Experimental :nth-last-of-type() :nth-of-type() O :only-child :only-of-type :optional :out-of-range P :past Experimental :picture-in-picture :placeholder-shown :paused :playing R :read-only :read-write :required :right :root S :scope :state() Experimental T :target :target-within Experimental U :user-invalid Experimental V :valid :visited W :where() SpecificationsSpecificationHTML Standard # pseudo-classesSelectors Level 4 CSS Basic User Interface Module Level 4 See also Pseudo-elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
21,developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#constants,"developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#constants. Grammar and types - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptGuideGrammar and typesArticle ActionsEnglish (US)In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore information JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore informationGrammar and types Â« Previous Next Â» This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.BasicsJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python. JavaScript is case-sensitive and uses the Unicode character set. For example, the word FrÃ¼h (which means ""early"" in German) could be used as a variable name. const FrÃ¼h = ""foobar""; But, the variable frÃ¼h is not the same as FrÃ¼h because JavaScript is case sensitive. In JavaScript, instructions are called statements and are separated by semicolons (;). A semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they must be separated by semicolons. Note: ECMAScript also has rules for automatic insertion of semicolons (ASI) to end statements. (For more information, see the detailed reference about JavaScript's lexical grammar.) It is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code. The source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments, or whitespace. (Spaces, tabs, and newline characters are considered whitespace.)CommentsThe syntax of comments is the same as in C++ and in many other languages: // a one line comment /* this is a longer, * multi-line comment */ You can't nest block comments. This often happens when you accidentally include a */ sequence in your comment, which will terminate the comment. /* You can't, however, /* nest comments */ SyntaxError */ In this case, you need to break up the */ pattern. For example, by inserting a backslash: /* You can /* nest comments *\/ by escaping slashes */ Comments behave like whitespace, and are discarded during script execution. Note: You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: #!/usr/bin/env node. This is called hashbang comment syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See Hashbang comments for more details. DeclarationsJavaScript has three kinds of variable declarations. var Declares a variable, optionally initializing it to a value. let Declares a block-scoped, local variable, optionally initializing it to a value. const Declares a block-scoped, read-only named constant. VariablesYou use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules. A JavaScript identifier usually starts with a letter, underscore (_), or dollar sign ($). Subsequent characters can also be digits (0 â 9). Because JavaScript is case sensitive, letters include the characters A through Z (uppercase) as well as a through z (lowercase). You can use most of ISO 8859-1 or Unicode letters such as Ã¥ and Ã¼ in identifiers. (For more details, see this blog post or the lexical grammar reference.) You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, $credit, and _name.Declaring variablesYou can declare a variable in two ways: With the keyword var. For example, var x = 42. This syntax can be used to declare both local and global variables, depending on the execution context. With the keyword const or let. For example, let y = 13. This syntax can be used to declare a block-scope local variable. (See Variable scope below.) You can declare variables to unpack values using the destructuring assignment syntax. For example, const { bar } = foo. This will create a variable named bar and assign to it the value corresponding to the key of the same name from our object foo. Variables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an undeclared global variable. This is an error in strict mode and should be avoided altogether.Declaration and initializationIn a statement like let x = 42, the let x part is called a declaration, and the = 42 part is called an initializer. The declaration allows the variable to be accessed later in code without throwing a ReferenceError, while the initializer assigns a value to the variable. In var and let declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value undefined. let x; console.log(x); // logs ""undefined"" In essence, let x = 42 is equivalent to let x; x = 42. const declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with undefined is likely a programmer mistake. const x; // SyntaxError: Missing initializer in const declaration Variable scopeA variable may belong to one of the following scopes: Global scope: The default scope for all code running in script mode. Module scope: The scope for code running in module mode. Function scope: The scope created with a function. In addition, variables declared with let or const can belong to an additional scope: Block scope: The scope created with a pair of curly braces (a block). When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function. let and const declarations can also be scoped to the block statement that they are declared in. if (Math.random() > 0.5) { const y = 5; } console.log(y); // ReferenceError: y is not defined However, variables created with var are not block-scoped, but only local to the function (or global scope) that the block resides within. For example, the following code will log 5, because the scope of x is the global context (or the function context if the code is part of a function). The scope of x is not limited to the immediate if statement block. if (true) { var x = 5; } console.log(x); // x is 5 Variable hoistingvar-declared variables are hoisted, meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see var declarations as being ""lifted"" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always undefined, because only its declaration is hoisted, but not its initialization. console.log(x === undefined); // true var x = 3; (function () { console.log(x); // undefined var x = ""local value""; })(); The above examples will be interpreted the same as: var x; console.log(x === undefined); // true x = 3; (function () { var x; console.log(x); // undefined x = ""local value""; })(); Because of hoisting, all var statements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code. Whether let and const are hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a ReferenceError, because the variable is in a ""temporal dead zone"" from the start of the block until the declaration is processed. console.log(x); // ReferenceError const x = 3; console.log(y); // ReferenceError let y = 3; Unlike var declarations, which only hoist the declaration but not its value, function declarations are hoisted entirely â you can safely call the function anywhere in its scope. See the hoisting glossary entry for more discussion.Global variablesGlobal variables are in fact properties of the global object. In web pages, the global object is window, so you can set and access global variables using the window.variable syntax. In all environments, you can use the globalThis variable (which itself is a global variable) to access global variables. Consequently, you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called phoneNumber is declared in a document, you can refer to this variable from an iframe as parent.phoneNumber.ConstantsYou can create a read-only, named constant with the const keyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign ($), and can contain alphabetic, numeric, or underscore characters. const PI = 3.14; A constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for let block-scope variables. You cannot declare a constant with the same name as a function or variable in the same scope. For example: // THIS WILL CAUSE AN ERROR function f() {} const f = 5; // THIS WILL CAUSE AN ERROR TOO function f() { const g = 5; var g; //statements } However, const only prevents re-assignments, but doesn't prevent mutations. The properties of objects assigned to constants are not protected, so the following statement is executed without problems. const MY_OBJECT = { key: ""value"" }; MY_OBJECT.key = ""otherValue""; Also, the contents of an array are not protected, so the following statement is executed without problems. const MY_ARRAY = [""HTML"", ""CSS""]; MY_ARRAY.push(""JAVASCRIPT""); console.log(MY_ARRAY); // ['HTML', 'CSS', 'JAVASCRIPT']; Data structures and typesData typesThe latest ECMAScript standard defines eight data types: Seven data types that are primitives:  Boolean. true and false. null. A special keyword denoting a null value. (Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.) undefined. A top-level property whose value is not defined. Number. An integer or floating point number. For example: 42 or 3.14159. BigInt. An integer with arbitrary precision. For example: 9007199254740992n. String. A sequence of characters that represent a text value. For example: ""Howdy"". Symbol. A data type whose instances are unique and immutable. and Object Although these data types are relatively few, they enable you to perform useful operations with your applications. Functions are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.Data type conversionJavaScript is a dynamically typed language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution. So, for example, you could define a variable as follows: let answer = 42; And later, you could assign the same variable a string value, for example: answer = ""Thanks for all the fish!""; Because JavaScript is dynamically typed, this assignment does not cause an error message.Numbers and the '+' operatorIn expressions involving numeric and string values with the + operator, JavaScript converts numeric values to strings. For example, consider the following statements: x = ""The answer is "" + 42; // ""The answer is 42"" y = 42 + "" is the answer""; // ""42 is the answer"" z = ""37"" + 7; // ""377"" With all other operators, JavaScript does not convert numeric values to strings. For example: ""37"" - 7; // 30 ""37"" * 7; // 259 Converting strings to numbersIn the case that a value representing a number is in memory as a string, there are methods for conversion. parseInt() parseFloat() parseInt only returns whole numbers, so its use is diminished for decimals. Note: Additionally, a best practice for parseInt is to always include the radix parameter. The radix parameter is used to specify which numerical system is to be used. parseInt(""101"", 2); // 5 An alternative method of retrieving a number from a string is with the + (unary plus) operator: ""1.1"" + ""1.1"" // '1.11.1' (+""1.1"") + (+""1.1""); // 2.2 // Note: the parentheses are added for clarity, not required. LiteralsLiterals represent values in JavaScript. These are fixed valuesânot variablesâthat you literally provide in your script. This section describes the following types of literals: Array literals Boolean literals Numeric literals Object literals RegExp literals String literals Array literalsAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets ([]). When you create an array using an array literal, it is initialized with the specified values as its elements, and its length is set to the number of arguments specified. The following example creates the coffees array with three elements and a length of three: const coffees = [""French Roast"", ""Colombian"", ""Kona""]; If an array is created using a literal in a top-level script, JavaScript interprets the array each time it evaluates the expression containing the array literal. In addition, a literal used in a function is created each time the function is called. Note: Array literals create Array objects. See Array and Indexed collections for details on Array objects. Extra commas in array literals If you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the fish array: const fish = [""Lion"", , ""Angel""]; When you log this array, you will see: console.log(fish); // [ 'Lion', <1 empty item>, 'Angel' ] Note that the second item is ""empty"", which is not exactly the same as the actual undefined value. When using array-traversing methods like Array.prototype.map, empty slots are skipped. However, index-accessing fish[1] still returns undefined. If you include a trailing comma at the end of the list of elements, the comma is ignored. In the following example, the length of the array is three. There is no myList[3]. All other commas in the list indicate a new element. const myList = [""home"", , ""school""]; In the following example, the length of the array is four, and myList[0] and myList[2] are missing. const myList = [, ""home"", , ""school""]; In the following example, the length of the array is four, and myList[1] and myList[3] are missing. Only the last comma is ignored. const myList = [""home"", , ""school"", ,]; Note: Trailing commas help keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line. const myList = [ ""home"", ""school"", + ""hospital"", ]; Understanding the behavior of extra commas is important to understanding JavaScript as a language. However, when writing your own code, you should explicitly declare the missing elements as undefined, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability. const myList = [""home"", /* empty */, ""school"", /* empty */, ]; Boolean literalsThe Boolean type has two literal values: true and false. Note: Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. The Boolean object is a wrapper around the primitive Boolean data type. See Boolean for more information. Numeric literalsJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10. Note that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like -123.4 are fine, being interpreted as a unary - operator applied to the numeric literal 123.4. Integer literals Integer and BigInt literals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2). A decimal integer literal is a sequence of digits without a leading 0 (zero). A leading 0 (zero) on an integer literal, or a leading 0o (or 0O) indicates it is in octal. Octal integer literals can include only the digits 0 â 7. A leading 0x (or 0X) indicates a hexadecimal integer literal. Hexadecimal integers can include digits (0 â 9) and the letters a â f and A â F. (The case of a character does not change its value. Therefore: 0xa = 0xA = 10 and 0xf = 0xF = 15.) A leading 0b (or 0B) indicates a binary integer literal. Binary integer literals can only include the digits 0 and 1. A trailing n suffix on an integer literal indicates a BigInt literal. The integer literal can use any of the above bases. Note that leading-zero octal syntax like 0123n is not allowed, but 0o123n is fine. Some examples of integer literals are: 0, 117, 123456789123456789n    (decimal, base 10) 015, 0001, 0o777777777777n    (octal, base 8) 0x1123, 0x00111, 0x123456789ABCDEFn  (hexadecimal, ""hex"" or base 16) 0b11, 0b0011, 0b11101001010101010101n (binary, base 2) For more information, see Numeric literals in the Lexical grammar reference. Floating-point literals A floating-point literal can have the following parts: An unsigned decimal integer, A decimal point (.), A fraction (another decimal number), An exponent. The exponent part is an e or E followed by an integer, which can be signed (preceded by + or -). A floating-point literal must have at least one digit, and either a decimal point or e (or E). More succinctly, the syntax is: [digits].[digits][(E|e)[(+|-)]digits] For example: 3.1415926 .123456789 3.1E+12 .1e-23 Object literalsAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Warning: Do not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the { will be interpreted as the beginning of a block. The following is an example of an object literal. The first element of the car object defines a property, myCar, and assigns to it a new string, ""Saturn""; the second element, the getCar property, is immediately assigned the result of invoking the function (carTypes(""Honda"")); the third element, the special property, uses an existing variable (sales). const sales = ""Toyota""; function carTypes(name) { return name === ""Honda"" ? name : `Sorry, we don't sell ${name}.`; } const car = { myCar: ""Saturn"", getCar: carTypes(""Honda""), special: sales }; console.log(car.myCar); // Saturn console.log(car.getCar); // Honda console.log(car.special); // Toyota Additionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options. const car = { manyCars: { a: ""Saab"", b: ""Jeep"" }, 7: ""Mazda"" }; console.log(car.manyCars.b); // Jeep console.log(car[7]); // Mazda Object property names can be any string, including the empty string. If the property name would not be a valid JavaScript identifier or number, it must be enclosed in quotes. Property names that are not valid identifiers cannot be accessed as a dot (.) property. const unusualPropertyNames = { '': 'An empty string', '!': 'Bang!' } console.log(unusualPropertyNames.''); // SyntaxError: Unexpected string console.log(unusualPropertyNames.!); // SyntaxError: Unexpected token ! Instead, they must be accessed with the bracket notation ([]). console.log(unusualPropertyNames[""""]); // An empty string console.log(unusualPropertyNames[""!""]); // Bang! Enhanced Object literals Object literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for foo: foo assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences. const obj = { // __proto__ __proto__: theProtoObj, // Shorthand for 'handler: handler' handler, // Methods toString() {  // Super calls  return ""d "" + super.toString(); }, // Computed (dynamic) property names [""prop_"" + (() => 42)()]: 42, }; RegExp literalsA regex literal (which is defined in detail later) is a pattern enclosed between slashes. The following is an example of a regex literal. const re = /ab+c/; String literalsA string literal is zero or more characters enclosed in double ("") or single (') quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks). The following are examples of string literals: 'foo' ""bar"" '1234' 'one line another line' ""Joyo's cat"" You should use string literals unless you specifically need to use a String object. See String for details on String objects. You can call any of the String object's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the length property with a string literal: // Will print the number of symbols in the string including whitespace. console.log(""Joyo's cat"".length); // In this case, 10. Template literals are also available. Template literals are enclosed by the back-tick (`) (grave accent) character instead of double or single quotes. Template literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.) // Basic literal string creation `In JavaScript ' ' is a line-feed.` // Multiline strings `In JavaScript, template strings can run over multiple lines, but double and single quoted strings cannot.` // String interpolation const name = 'Lev', time = 'today'; `Hello ${name}, how are you ${time}?` Tagged templates are a compact syntax for specifying a template literal along with a call to a ""tag"" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal â as in the following example, where the template tag function is named print. The print function will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky [object Object]. const formatArg = (arg) => { if (Array.isArray(arg)) {  // Print a bulleted list  return arg.map((part) => `- ${part}`).join("" ""); } if (arg.toString === Object.prototype.toString) {  // This object will be serialized to ""[object Object]"".  // Let's print something nicer.  return JSON.stringify(arg); } return arg; }; const print = (segments, ...args) => { // For any well-formed template literal, there will always be N args and // (N+1) string segments. let message = segments[0]; segments.slice(1).forEach((segment, index) => {  message += formatArg(args[index]) + segment; }); console.log(message); }; const todos = [ ""Learn JavaScript"", ""Learn Web APIs"", ""Set up my website"", ""Profit!"", ]; const progress = { javascript: 20, html: 50, css: 10 }; print`I need to do: ${todos} My current progress is: ${progress} `; // I need to do: // - Learn JavaScript // - Learn Web APIs // - Set up my website // - Profit! // My current progress is: {""javascript"":20,""html"":50,""css"":10} Since tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call: print([""I need to do: "", "" My current progress is: "", "" ""], todos, progress); This may be reminiscent of the console.log-style interpolation: console.log(""I need to do: %o My current progress is: %o "", todos, progress); You can see how the tagged template reads more naturally than a traditional ""formatter"" function, where the variables and the template itself have to be declared separately. Using special characters in strings In addition to ordinary characters, you can also include special characters in strings, as shown in the following example. ""one line another line""; The following table lists the special characters that you can use in JavaScript strings. Character Meaning  \0 Null Byte \b Backspace \f Form Feed  New Line \r Carriage Return \t Tab \v Vertical tab \' Apostrophe or single quote \"" Double quote \\ Backslash character \XXX The character with the Latin-1 encoding specified by up to three octal digits XXX between 0 and 377. For example, \251 is the octal sequence for the copyright symbol. \xXX The character with the Latin-1 encoding specified by the two hexadecimal digits XX between 00 and FF. For example, \xA9 is the hexadecimal sequence for the copyright symbol. \uXXXX The Unicode character specified by the four hexadecimal digits XXXX. For example, \u00A9 is the Unicode sequence for the copyright symbol. See Unicode escape sequences. \u{XXXXX} Unicode code point escapes. For example, \u{2F804} is the same as the simple Unicode escapes \uD87E\uDC04. Escaping characters For characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided. You can insert a quotation mark inside a string by preceding it with a backslash. This is known as escaping the quotation mark. For example: const quote = ""He read \""The Cremation of Sam McGee\"" by R.W. Service.""; console.log(quote); The result of this would be: He read ""The Cremation of Sam McGee"" by R.W. Service. To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path c:\temp to a string, use the following: const home = ""c:\\temp""; You can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string. const str = ""this string \ is broken \ across multiple \ lines.""; console.log(str); // this string is broken across multiple lines. More informationThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide: Control flow and error handling Loops and iteration Functions Expressions and operators In the next chapter, we will have a look at control flow constructs and error handling. Â« Previous Next Â» Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
22,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment. DocumentFragment: DocumentFragment() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentDocumentFragment()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilityDocument Object ModelDocumentFragmentConstructorDocumentFragment() Instance propertieschildElementCountchildrenfirstElementChildlastElementChildInstance methodsappend()getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxSpecificationsBrowser compatibilityDocumentFragment: DocumentFragment() constructor The DocumentFragment() constructor returns a new, empty DocumentFragment object. Syntaxnew DocumentFragment() ParametersNone.Return valueA new DocumentFragment object.SpecificationsSpecificationDOM Standard # ref-for-dom-documentfragment-documentfragmentâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
23,developer.mozilla.org/en-US/docs/Glossary/CSS/Selector,"developer.mozilla.org/en-US/docs/Glossary/CSS/Selector. Selector (CSS) - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSelector (CSS)Article ActionsEnglish (US)In this articleExampleSee alsoIn this articleExampleSee alsoSelector (CSS)A CSS selector is the part of a CSS rule that describes what elements in a document the rule will match. The matching elements will have the rule's specified style applied to them.ExampleConsider this CSS: p { color: green; } div.warning { width: 100%; border: 2px solid yellow; color: white; background-color: darkred; padding: 0.8em 0.8em 0.6em; } #customized { font: 16px Lucida Grande, Arial, Helvetica, sans-serif; } The selectors here are ""p"" (which applies the color green to the text inside any <p> element), ""div.warning"" (which makes any <div> element with the class ""warning"" look like a warning box), and ""#customized"", which sets the base font of the element with the ID ""customized"" to 16-pixel tall Lucida Grande or one of a few fallback fonts. We can then apply this CSS to some HTML, such as: <p>This is happy text.</p> <div class=""warning""> Be careful! There are wizards present, and they are quick to anger! </div> <div id=""customized""> <p>This is happy text.</p> <div class=""warning"">  Be careful! There are wizards present, and they are quick to anger! </div> </div> The resulting page content is styled like this:See also Learn more about CSS selectors in our introduction to CSS. Basic selectors  Type selectors elementname Class selectors .classname ID selectors #idname Universal selectors * ns|* *|* Attribute selectors [attr=value] State selectors a:active, a:visited Grouping selectors  Selector list A, B Combinators  Adjacent sibling selectors A + B General sibling selectors A ~ B Child selectors A > B Descendant selectors A B Pseudo  Pseudo classes : Pseudo elements :: Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
24,developer.mozilla.org/en-US/docs/Glossary/Response/header,"developer.mozilla.org/en-US/docs/Glossary/Response/header. Response header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsResponse headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoResponse headerA response header is an HTTP header that can be used in an HTTP response and that doesn't relate to the content of the message. Response headers, like Age, Location or Server are used to give a more detailed context of the response. Not all headers appearing in a response are categorized as response headers by the specification. For example, the Content-Type header is a representation header indicating the original type of data in the body of the response message (prior to the encoding in the Content-Encoding representation header being applied). However, ""conversationally"" all headers are usually referred to as response headers in a response message. The following shows a few response and representation headers after a GET request. 200 OK Access-Control-Allow-Origin: * Connection: Keep-Alive Content-Encoding: gzip Content-Type: text/html; charset=utf-8 Date: Mon, 18 Jul 2016 16:06:00 GMT Etag: ""c561c68d0ba92bbeb8b0f612a9199f722e3a621a"" Keep-Alive: timeout=5, max=997 Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT Server: Apache Set-Cookie: mykey=myvalue; expires=Mon, 17-Jul-2017 16:06:00 GMT; Max-Age=31449600; Path=/; secure Transfer-Encoding: chunked Vary: Cookie, Accept-Encoding X-Backend-Server: developer2.webapp.scl3.mozilla.com X-Cache-Info: not cacheable; meta data too large X-kuma-revision: 1085259 x-frame-options: DENY See also List of all HTTP headers Glossary Representation header HTTP header Response header Fetch metadata response header Request header Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
25,developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcechanged/event,"developer.mozilla.org/en-US/docs/Web/API/Element/webkitmouseforcechanged/event. Element: webkitmouseforcechanged event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsElementwebkitmouseforcechangedIn this articleSyntaxEvent typeEvent propertiesSpecificationsBrowser compatibilitySee alsoElementInstance propertiesariaAtomicariaAutoCompleteariaBusyariaCheckedariaColCountariaColIndexariaColSpanariaCurrentariaDescriptionariaDisabledariaExpandedariaHasPopupariaHiddenariaKeyShortcutsariaLabelariaLevelariaLiveariaModalariaMultiLineariaMultiSelectableariaOrientationariaPlaceholderariaPosInSetariaPressedariaReadOnlyariaRelevant Non-standard ariaRequiredariaRoleDescriptionariaRowCountariaRowIndexariaRowSpanariaSelectedariaSetSizeariaSortariaValueMaxariaValueMinariaValueNowariaValueTextassignedSlotattributeschildElementCountchildrenclassListclassNameclientHeightclientLeftclientTopclientWidthelementTiming Experimental firstElementChildidinnerHTMLlastElementChildlocalNamenamespaceURInextElementSiblingouterHTMLpartprefixpreviousElementSiblingscrollHeightscrollLeftscrollLeftMax Non-standard scrollTopscrollTopMax Non-standard scrollWidthshadowRootslottagNameInstance methodsafter()animate()append()attachShadow()before()closest()computedStyleMap()getAnimations()getAttribute()getAttributeNames()getAttributeNode()getAttributeNodeNS()getAttributeNS()getBoundingClientRect()getClientRects()getElementsByClassName()getElementsByTagName()getElementsByTagNameNS()hasAttribute()hasAttributeNS()hasAttributes()hasPointerCapture()insertAdjacentElement()insertAdjacentHTML()insertAdjacentText()matches()prepend()querySelector()querySelectorAll()releasePointerCapture()remove()removeAttribute()removeAttributeNode()removeAttributeNS()replaceChildren()replaceWith()requestFullscreen()requestPointerLock()scroll()scrollBy()scrollIntoView()scrollIntoViewIfNeeded() Non-standard scrollTo()setAttribute()setAttributeNode()setAttributeNodeNS()setAttributeNS()setCapture() Non-standard Deprecated setHTML() Experimental setPointerCapture()toggleAttribute()Eventsafterscriptexecute Non-standard animationcancelanimationendanimationiterationanimationstartauxclickbeforematch Experimental beforescriptexecute Non-standard beforexrselect Experimental blurclickcompositionendcompositionstartcompositionupdatecontentvisibilityautostatechange Experimental contextmenucopycutdblclickDOMActivate Deprecated DOMMouseScroll Non-standard Deprecated focusfocusinfocusoutfullscreenchangefullscreenerrorgesturechange Non-standard gestureend Non-standard gesturestart Non-standard gotpointercapturekeydownkeypress Deprecated keyuplostpointercapturemousedownmouseentermouseleavemousemovemouseoutmouseovermouseupmousewheel Non-standard Deprecated MozMousePixelScroll Non-standard Deprecated pastepointercancelpointerdownpointerenterpointerleavepointermovepointeroutpointeroverpointerupscrollscrollendsecuritypolicyviolationtouchcanceltouchendtouchmovetouchstarttransitioncanceltransitionendtransitionruntransitionstartwebkitmouseforcechanged Non-standard webkitmouseforcedown Non-standard webkitmouseforceup Non-standard webkitmouseforcewillbegin Non-standard wheelInheritance:NodeEventTargetIn this articleSyntaxEvent typeEvent propertiesSpecificationsBrowser compatibilitySee alsoElement: webkitmouseforcechanged eventNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. The non-standard webkitmouseforcechanged event is fired by Safari each time the amount of pressure changes on the trackpad/touchscreen. webkitmouseforcechanged is a proprietary, WebKit-specific event introduced by Apple to support their Force Touch events feature. This event first fires after the mousedown event and stops firing before the mouseup event.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""webkitmouseforcechanged"", (event) => {}); onwebkitmouseforcechanged = (event) => {}; Event typeA MouseEvent. Inherits from Event.   Event     UIEvent     MouseEvent  Event propertiesThis interface also inherits properties of its parents, UIEvent and Event. MouseEvent.altKey Read only Returns true if the alt key was down when the mouse event was fired. MouseEvent.button Read only The button number that was pressed (if applicable) when the mouse event was fired. MouseEvent.buttons Read only The buttons being pressed (if any) when the mouse event was fired. MouseEvent.clientX Read only The X coordinate of the mouse pointer in local (DOM content) coordinates. MouseEvent.clientY Read only The Y coordinate of the mouse pointer in local (DOM content) coordinates. MouseEvent.ctrlKey Read only Returns true if the control key was down when the mouse event was fired. MouseEvent.layerX Non-standard Read only Returns the horizontal coordinate of the event relative to the current layer. MouseEvent.layerY Non-standard Read only Returns the vertical coordinate of the event relative to the current layer. MouseEvent.metaKey Read only Returns true if the meta key was down when the mouse event was fired. MouseEvent.movementX Read only The X coordinate of the mouse pointer relative to the position of the last mousemove event. MouseEvent.movementY Read only The Y coordinate of the mouse pointer relative to the position of the last mousemove event. MouseEvent.offsetX Read only The X coordinate of the mouse pointer relative to the position of the padding edge of the target node. MouseEvent.offsetY Read only The Y coordinate of the mouse pointer relative to the position of the padding edge of the target node. MouseEvent.pageX Read only The X coordinate of the mouse pointer relative to the whole document. MouseEvent.pageY Read only The Y coordinate of the mouse pointer relative to the whole document. MouseEvent.relatedTarget Read only The secondary target for the event, if there is one. MouseEvent.screenX Read only The X coordinate of the mouse pointer in global (screen) coordinates. MouseEvent.screenY Read only The Y coordinate of the mouse pointer in global (screen) coordinates. MouseEvent.shiftKey Read only Returns true if the shift key was down when the mouse event was fired. MouseEvent.mozPressure Non-standard Deprecated Read only   The amount of pressure applied to a touch or tablet device when generating the event; this value ranges between 0.0 (minimum pressure) and 1.0 (maximum pressure).  Instead of using this deprecated (and non-standard) property, you should use PointerEvent and look at its pressure property.  MouseEvent.mozInputSource Non-standard Read only   The type of device that generated the event (one of the MOZ_SOURCE_* constants).  This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event).  MouseEvent.webkitForce Non-standard Read only The amount of pressure applied when clicking. MouseEvent.x Read only Alias for MouseEvent.clientX. MouseEvent.y Read only Alias for MouseEvent.clientY. SpecificationsNot part of any specification. Apple has a description at the Mac Developer Library.Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Force Touch events webkitmouseforcewillbegin webkitmouseforcedown webkitmouseforceup Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
26,developer.mozilla.org/en-US/docs/Web/API/UIEvent/which,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/which. UIEvent: which property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventwhichArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsUIEventConstructorUIEvent()Instance propertiesdetailsourceCapabilities Experimental viewwhich Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUIEvent: which propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The UIEvent.which read-only property of the UIEvent interface returns a number that indicates which button was pressed on the mouse, or the numeric keyCode or the character code (charCode) of the key pressed on the keyboard.ValueValue for KeyboardEvent Non-standard For KeyboardEvent, event.which contains the numeric code for a particular key pressed, depending on whether an alphanumeric or non-alphanumeric key was pressed. Please see deprecated KeyboardEvent.charCode and KeyboardEvent.keyCode for more details. Note: Consider KeyboardEvent.key or KeyboardEvent.code for new code. Value for MouseEvent Non-standard For MouseEvent, event.which is a number representing a given button: 0: No button 1: Left button 2: Middle button (if present) 3: Right button  For a mouse configured for left-handed use, the button actions are reversed. In this case, the values are read from right to left. Note: Consider MouseEvent.button for new code. Examples<html lang=""en""> <head>  <title>charCode/keyCode/which example</title>  <script>  function showKeyPress(evt) {   alert(   `onkeypress handler: ` +    `keyCode property: ${evt.keyCode} ` +    `which property: ${evt.which} ` +    `charCode property: ${evt.charCode} ` +    `Character Key Pressed: ${String.fromCharCode(evt.charCode)} `   );  }  function keyDown(evt) {   alert(   `onkeydown handler: ` +    `keyCode property: ${evt.keyCode} ` +    `which property: ${evt.which} `   );  }  </script> </head> <body onkeypress=""showKeyPress(event);"" onkeydown=""keyDown(event);"">  <p>Please press any key.</p> </body> </html> SpecificationsSpecificationUI Events # dom-uievent-whichBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also KeyboardEvent MouseEvent Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
27,developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule,"developer.mozilla.org/en-US/docs/Web/API/CSSFontFaceRule. CSSFontFaceRule - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCSSFontFaceRuleArticle ActionsEnglish (US)In this articleInstance propertiesInstance methodsExamplesSpecificationsBrowser compatibilityCSS Object ModelCSSFontFaceRuleInstance propertiesstyleInheritance:CSSRuleRelated pages for CSSOMCSSCSSConditionRuleCSSFontFeatureValuesRuleCSSFontPaletteValuesRuleCSSGroupingRuleCSSImportRuleCSSKeyframeRuleCSSKeyframesRuleCSSLayerBlockRuleCSSLayerStatementRuleCSSMediaRuleCSSNamespaceRuleCSSPageRuleCSSPropertyRuleCSSRuleCSSRuleListCSSStyleDeclarationCSSStyleRuleCSSStyleSheetCSSSupportsRuleCaretPositionMediaListMediaQueryListScreenStyleSheetStyleSheetListIn this articleInstance propertiesInstance methodsExamplesSpecificationsBrowser compatibilityCSSFontFaceRuleThe CSSFontFaceRule interface represents an @font-face at-rule.   CSSRule     CSSFontFaceRule  Instance propertiesInherits properties from its ancestor CSSRule. CSSFontFaceRule.style Read only Returns a CSSStyleDeclaration. Instance methodsInherits methods from its ancestor CSSRule.ExamplesThis example uses the CSS found as an example on the @font-face page. The first CSSRule returned will be a CSSFontFaceRule. @font-face { font-family: MyHelvetica; src: local(""Helvetica Neue Bold""), local(""HelveticaNeue-Bold""),  url(MgOpenModernaBold.ttf); font-weight: bold; } let myRules = document.styleSheets[0].cssRules; console.log(myRules[0]); //a CSSFontFaceRule SpecificationsSpecificationCSS Fonts Module Level 4 # om-fontfaceBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
28,developer.mozilla.org/en-US/docs/Web/HTML/Element/video#loop,"developer.mozilla.org/en-US/docs/Web/HTML/Element/video#loop. <video>: The Video Embed element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<video>Article ActionsEnglish (US)In this articleTry itAttributesEventsUsage notesExamplesAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleTry itAttributesEventsUsage notesExamplesAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also<video>: The Video Embed elementThe <video> HTML element embeds a media player which supports video playback into the document. You can use <video> for audio content as well, but the <audio> element may provide a more appropriate user experience.Try it The above example shows simple usage of the <video> element. In a similar manner to the <img> element, we include a path to the media we want to display inside the src attribute; we can include other attributes to specify information such as video width and height, whether we want it to autoplay and loop, whether we want to show the browser's default video controls, etc. The content inside the opening and closing <video></video> tags is shown as a fallback in browsers that don't support the element.AttributesLike all other HTML elements, this element supports the global attributes. autoplay A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data. Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay. To disable video autoplay, autoplay=""false"" will not work; the video will autoplay if the attribute is there in the <video> tag at all. To remove autoplay, the attribute needs to be removed altogether. In some browsers (e.g. Chrome 70.0) autoplay doesn't work if no muted attribute is present. controls If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback. controlslist Experimental Non-standard The controlslist attribute, when specified, helps the browser select what controls to show for the video element whenever the browser shows its own set of controls (that is, when the controls attribute is specified). The allowed values are nodownload, nofullscreen and noremoteplayback. Use the disablepictureinpicture attribute if you want to disable the Picture-In-Picture mode (and the control). crossorigin This enumerated attribute indicates whether to use CORS to fetch the related video. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are: anonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted. use-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted. When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information. disablepictureinpicture Experimental Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases. disableremoteplayback Experimental A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). In Safari, you can use x-webkit-airplay=""deny"" as a fallback. height The height of the video's display area, in CSS pixels (absolute values only; no percentages). loop A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video. muted A Boolean attribute that indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning that the audio will be played when the video is played. playsinline A Boolean attribute indicating that the video is to be played ""inline"", that is within the element's playback area. Note that the absence of this attribute does not imply that the video will always be played in fullscreen. poster A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame. preload This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values: none: Indicates that the video should not be preloaded. metadata: Indicates that only video metadata (e.g. length) is fetched. auto: Indicates that the whole video file can be downloaded, even if the user is not expected to use it. empty string: Synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata. Note: The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the video for playback. The specification does not force the browser to follow the value of this attribute; it is a mere hint. src The URL of the video to embed. This is optional; you may instead use the <source> element within the video block to specify the video to embed. width The width of the video's display area, in CSS pixels (absolute values only; no percentages). Events Event Name Fired When  audioprocess Deprecated   The input buffer of a ScriptProcessorNode is   ready to be processed.   canplay   The browser can play the media, but estimates that not enough data has   been loaded to play the media up to its end without having to stop for   further buffering of content.   canplaythrough   The browser estimates it can play the media up to its end without   stopping for content buffering.   complete   The rendering of an OfflineAudioContext is   terminated.   durationchange The duration attribute has been updated. emptied   The media has become empty; for example, this event is sent if the media   has already been loaded (or partially loaded), and the   load()   method is called to reload it.   ended Playback has stopped because the end of the media was reached. error   An error occurred while fetching the media data, or the type of the   resource is not a supported media format.   loadeddata The first frame of the media has finished loading. loadedmetadata The metadata has been loaded. pause Playback has been paused. play Playback has begun. playing   Playback is ready to start after having been paused or delayed due to   lack of data.   progress Fired periodically as the browser loads a resource. ratechange The playback rate has changed. seeked A seek operation completed. seeking A seek operation began. stalled   The user agent is trying to fetch media data, but data is unexpectedly   not forthcoming.   suspend Media data loading has been suspended. timeupdate   The time indicated by the currentTime attribute has been   updated.   volumechange The volume has changed. waiting Playback has stopped because of a temporary lack of data. Usage notesBrowsers don't all support the same video formats; you can provide multiple sources inside nested <source> elements, and the browser will then use the first one it understands. <video controls> <source src=""myVideo.webm"" type=""video/webm"" /> <source src=""myVideo.mp4"" type=""video/mp4"" /> <p>  Your browser doesn't support HTML video. Here is a  <a href=""myVideo.mp4"">link to the video</a> instead. </p> </video> We offer a substantive and thorough guide to media file types and the guide to the codecs supported for video. Also available is a guide to audio codecs that can be used with them. Other usage notes: If you don't specify the controls attribute, the video won't include the browser's default controls; you can create your own custom controls using JavaScript and the HTMLMediaElement API. See Creating a cross-browser video player for more details. To allow precise control over your video (and audio) content, HTMLMediaElements fire many different events. In addition to providing controllability, these events let you monitor the progress of both download and playback of the media, as well as the playback state and position. You can use the object-position property to adjust the positioning of the video within the element's frame, and the object-fit property to control how the video's size is adjusted to fit within the frame. To show subtitles/captions along with your video, you can use some JavaScript along with the <track> element and the WebVTT format. See Adding captions and subtitles to HTML video for more information. You can play audio files using a <video> element. This can be useful if, for example, you need to perform audio with a WebVTT transcript, since the <audio> element doesn't allow captions using WebVTT. To test the fallback content on browsers that support the element, you can replace <video> with a non-existing element like <notavideo>. A good general source of information on using HTML <video> is the Video and audio content beginner's tutorial.Styling with CSSThe <video> element is a replaced element â its display value is inline by default, but its default width and height in the viewport is defined by the video being embedded. There are no special considerations for styling <video>; a common strategy is to give it a display value of block to make it easier to position, size, etc., and then provide styling and layout information as required. Video player styling basics provides some useful styling techniques.Detecting track addition and removalYou can detect when tracks are added to and removed from a <video> element using the addtrack and removetrack events. However, these events aren't sent directly to the <video> element itself. Instead, they're sent to the track list object within the <video> element's HTMLMediaElement that corresponds to the type of track that was added to the element: HTMLMediaElement.audioTracks An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element. HTMLMediaElement.videoTracks Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element. HTMLMediaElement.textTracks Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element. For example, to detect when audio tracks are added to or removed from a <video> element, you can use code like this: const elem = document.querySelector(""video""); elem.audioTracks.onaddtrack = (event) => { trackEditor.addTrack(event.track); }; elem.audioTracks.onremovetrack = (event) => { trackEditor.removeTrack(event.track); }; This code watches for audio tracks to be added to and removed from the element, and calls a hypothetical function on a track editor to register and remove the track from the editor's list of available tracks. You can also use addEventListener() to listen for the addtrack and removetrack events.Server support for videoIf the MIME type for the video is not set correctly on the server, the video may not show or show a gray box containing an X (if JavaScript is enabled). If you use Apache Web Server to serve Ogg Theora videos, you can fix this problem by adding the video file type extensions to ""video/ogg"" MIME type. The most common video file type extensions are "".ogm"", "".ogv"", or "".ogg"". To do this, edit the ""mime.types"" file in ""/etc/apache"" or use the ""AddType"" configuration directive in httpd.conf. AddType video/ogg .ogm AddType video/ogg .ogv AddType video/ogg .ogg If you serve your videos as WebM, you can fix this problem for the Apache Web Server by adding the extension used by your video files ("".webm"" is the most common one) to the MIME type ""video/webm"" via the ""mime.types"" file in ""/etc/apache"" or via the ""AddType"" configuration directive in httpd.conf. AddType video/webm .webm Your web host may provide an easy interface to MIME type configuration changes for new technologies until a global update naturally occurs.ExamplesSingle sourceThis example plays a video when activated, providing the user with the browser's default video controls to control playback. HTML <!-- Simple video example --> <!-- 'Big Buck Bunny' licensed under CC 3.0 by the Blender foundation. Hosted by archive.org --> <!-- Poster from peach.blender.org --> <video controls src=""https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"" poster=""https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"" width=""620""> Sorry, your browser doesn't support embedded videos, but don't worry, you can <a href=""https://archive.org/details/BigBuckBunny_124"">download it</a> and watch it with your favorite video player! </video> Result Until the video starts playing, the image provided in the poster attribute is displayed in its place. If the browser doesn't support video playback, the fallback text is displayed.Multiple sourcesThis example builds on the last one, offering three different sources for the media; this allows the video to be watched regardless of which video codecs are supported by the browser. HTML <!-- Using multiple sources as fallbacks for a video tag --> <!-- 'Elephants Dream' by Orange Open Movie Project Studio, licensed under CC-3.0, hosted by archive.org --> <!-- Poster hosted by Wikimedia --> <video width=""620"" controls poster=""https://upload.wikimedia.org/wikipedia/commons/e/e8/Elephants_Dream_s5_both.jpg""> <source  src=""https://archive.org/download/ElephantsDream/ed_hd.ogv""  type=""video/ogg"" /> <source  src=""https://archive.org/download/ElephantsDream/ed_hd.avi""  type=""video/avi"" /> <source  src=""https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4""  type=""video/mp4"" /> Sorry, your browser doesn't support embedded videos, but don't worry, you can <a href=""https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4"">  download the MP4 </a> and watch it with your favorite video player! </video> Result First Ogg is tried. If that can't be played, then AVI is tried. Finally, MP4 is tried. A fallback message is displayed if the video element isn't supported, but not if all sources fail. Some media file types let you provide more specific information using the codecs parameter as part of the file's type string. A relatively simple example is video/webm; codecs=""vp8, vorbis"", which says that the file is a WebM video using VP8 for its video and Vorbis for audio.Accessibility concernsVideos should provide both captions and transcripts that accurately describe its content (see Adding captions and subtitles to HTML video for more information on how to implement these). Captions allow people who are experiencing hearing loss to understand a video's audio content as the video is being played, while transcripts allow people who need additional time to be able to review audio content at a pace and format that is comfortable for them. It's worth noting that while you can caption audio-only media, you can only do so when playing audio in a <video> element, since the video region of the element is used to present the captions. This is one of the special scenarios in which it's useful to play audio in a video element. If automatic captioning services are used, it is important to review the generated content to ensure it accurately represents the source video. In addition to spoken dialog, subtitles and transcripts should also identify music and sound effects that communicate important information. This includes emotion and tone: 14 00:03:14 --> 00:03:18 [Dramatic rock music] 15 00:03:19 --> 00:03:21 [whispering] What's that off in the distance? 16 00:03:22 --> 00:03:24 It'sâ¦ it's aâ¦ 16 00:03:25 --> 00:03:32 [Loud thumping] [Dishes clattering] Captions should not obstruct the main subject of the video. They can be positioned using the align VTT cue setting. Web Video Text Tracks Format (WebVTT) WebAIM: Captions, Transcripts, and Audio Descriptions MDN Understanding WCAG, Guideline 1.2 explanations Understanding Success Criterion 1.2.1 | W3C Understanding WCAG 2.0 Understanding Success Criterion 1.2.2 | W3C Understanding WCAG 2.0 Technical summary Content categories Flow content, phrasing content, embedded content. If it has a   controls attribute: interactive   content and palpable content.   Permitted content    If the element has a src   attribute: zero or more <track> elements,   followed by transparent content that contains no media elementsâthat   is no <audio> or   <video>.      Else: zero or more <source> elements, followed   by zero or more <track> elements, followed by   transparent content that contains no media elementsâthat is no   <audio> or <video>.    Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts embedded content. Implicit ARIA role No corresponding role Permitted ARIA roles application DOM interface HTMLVideoElement SpecificationsSpecificationHTML Standard # the-video-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Guide to media types and formats on the web Media container formats (file types) Web video codec guide Web audio codec guide Positioning and sizing the picture within its frame: object-position and object-fit <audio> Using HTML audio and video Manipulating video using canvas Configuring servers for Ogg media Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
29,developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send,"developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send. XMLHttpRequest: send() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsXMLHttpRequestsend()Article ActionsEnglish (US)In this articleSyntaxExample: GETExample: POSTSpecificationsBrowser compatibilitySee alsoXMLHttpRequestXMLHttpRequestConstructorXMLHttpRequest()Instance propertieschannel Non-standard mozAnon Non-standard mozBackgroundRequest Non-standard mozSystem Non-standard readyStateresponseresponseTextresponseTyperesponseURLresponseXMLstatusstatusTexttimeoutuploadwithCredentialsInstance methodsabort()getAllResponseHeaders()getResponseHeader()open()overrideMimeType()send() setRequestHeader()EventsaborterrorloadloadendloadstartprogressreadystatechangetimeoutInheritance:XMLHttpRequestEventTargetEventTargetRelated pages for XMLHttpRequestFormDataProgressEventXMLHttpRequestEventTargetXMLHttpRequestUploadIn this articleSyntaxExample: GETExample: POSTSpecificationsBrowser compatibilitySee alsoXMLHttpRequest: send() method The XMLHttpRequest method send() sends the request to the server.  If the request is asynchronous (which is the default), this method returns as soon as the request is sent and the result is delivered using events. If the request is synchronous, this method doesn't return until the response has arrived. send() accepts an optional parameter which lets you specify the request's body; this is primarily used for requests such as PUT. If the request method is GET or HEAD, the body parameter is ignored and the request body is set to null.  If no Accept header has been set using the setRequestHeader(), an Accept header with the type ""*/*"" (any type) is sent. Syntaxsend() send(body) Parameters body Optional A body of data to be sent in the XHR request. This can be: A Document, in which case it is serialized before being sent. An XMLHttpRequestBodyInit, which per the Fetch spec can be a Blob, an ArrayBuffer, a TypedArray, a DataView, a FormData, a URLSearchParams, or a string literal or object. null If no value is specified for the body, a default value of null is used.  The best way to send binary content (e.g. in file uploads) is by using a TypedArray, a DataView or a Blob object in conjunction with the send() method. Return valueNone (undefined).Exceptions InvalidStateError DOMException Thrown if send() has already been invoked for the request, and/or the request is complete. NetworkError DOMException Thrown if the resource type to be fetched is a Blob, and the method is not GET. Example: GETconst xhr = new XMLHttpRequest(); xhr.open(""GET"", ""/server"", true); xhr.onload = () => { // Request finished. Do processing here. }; xhr.send(null); // xhr.send('string'); // xhr.send(new Blob()); // xhr.send(new Int8Array()); // xhr.send(document); Example: POSTconst xhr = new XMLHttpRequest(); xhr.open(""POST"", ""/server"", true); // Send the proper header information along with the request xhr.setRequestHeader(""Content-Type"", ""application/x-www-form-urlencoded""); xhr.onreadystatechange = () => { // Call a function when the state changes. if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {  // Request finished. Do processing here. } }; xhr.send(""foo=bar&lorem=ipsum""); // xhr.send(new Int8Array()); // xhr.send(document); SpecificationsSpecificationXMLHttpRequest Standard # the-send()-methodBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Using XMLHttpRequest HTML in XMLHttpRequest Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
30,developer.mozilla.org/en-US/docs/Web/JavaScript/Data/structures#data/property,"developer.mozilla.org/en-US/docs/Web/JavaScript/Data/structures#data/property. JavaScript data types and data structures - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptJavaScript data types and data structuresArticle ActionsEnglish (US)In this articleDynamic and weak typingPrimitive valuesObjectsType coercionSee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleDynamic and weak typingPrimitive valuesObjectsType coercionSee alsoJavaScript data types and data structuresProgramming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures. The language overview offers a similar summary of the common data types, but with more comparisons to other languages.Dynamic and weak typingJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types: let foo = 42; // foo is now a number foo = ""bar""; // foo is now a string foo = true; // foo is now a boolean JavaScript is also a weakly typed language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors. const foo = 42; // foo is a number const result = foo + ""1""; // JavaScript coerces foo to a string, so it can be concatenated with the other operand console.log(result); // 421 Implicit coercions is very convenient, but can be a potential footgun if developers didn't intend to do the conversion, or intend to convert in the other direction (for example, string to number instead of number to string). For symbols and BigInts, JavaScript has intentionally disallowed certain implicit type conversions.Primitive valuesAll types except Object define immutable values represented directly at the lowest level of the language. We refer to values of these types as primitive values. All primitive types, except null, can be tested by the typeof operator. typeof null returns ""object"", so one has to use === null to test for null. All primitive types, except null and undefined, have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the Number object provides methods like toExponential(). When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead. However, accessing a property on null or undefined throws a TypeError exception, which necessitates the introduction of the optional chaining operator. Type typeof return value Object wrapper  Null ""object"" N/A Undefined ""undefined"" N/A Boolean ""boolean"" Boolean Number ""number"" Number BigInt ""bigint"" BigInt String ""string"" String Symbol ""symbol"" Symbol The object wrapper classes' reference pages contain more information about the methods and properties available for each type, as well as detailed descriptions for the semantics of the primitive types themselves.Null typeThe Null type is inhabited by exactly one value: null.Undefined typeThe Undefined type is inhabited by exactly one value: undefined. Conceptually, undefined indicates the absence of a value, while null indicates the absence of an object (which could also make up an excuse for typeof null === ""object""). The language usually defaults to undefined when something is devoid of a value: A return statement with no value (return;) implicitly returns undefined. Accessing a nonexistent object property (obj.iDontExist) returns undefined. A variable declaration without initialization (let x;) implicitly initializes the variable to undefined. Many methods, such as Array.prototype.find() and Map.prototype.get(), return undefined when no element is found. null is used much less often in the core language. The most important place is the end of the prototype chain â subsequently, methods that interact with prototypes, such as Object.getPrototypeOf(), Object.create(), etc., accept or return null instead of undefined. null is a keyword, but undefined is a normal identifier that happens to be a global property. In practice, the difference is minor, since undefined should not be redefined or shadowed.Boolean typeThe Boolean type represents a logical entity and is inhabited by two values: true and false. Boolean values are usually used for conditional operations, including ternary operators, if...else, while, etc.Number typeThe Number type is a double-precision 64-bit binary format IEEE 754 value. It is capable of storing positive floating-point numbers between 2-1074 (Number.MIN_VALUE) and 21024 (Number.MAX_VALUE) as well as negative floating-point numbers between -2-1074 and -21024, but it can only safely store integers in the range -(253 â 1) (Number.MIN_SAFE_INTEGER) to 253 â 1 (Number.MAX_SAFE_INTEGER). Outside this range, JavaScript can no longer safely represent integers; they will instead be represented by a double-precision floating point approximation. You can check if a number is within the range of safe integers using Number.isSafeInteger(). Values outside the range Â±(2-1074 to 21024) are automatically converted: Positive values greater than Number.MAX_VALUE are converted to +Infinity. Positive values smaller than Number.MIN_VALUE are converted to +0. Negative values smaller than -Number.MAX_VALUE are converted to -Infinity. Negative values greater than -Number.MIN_VALUE are converted to -0. +Infinity and -Infinity behave similarly to mathematical infinity, but with some slight differences; see Number.POSITIVE_INFINITY and Number.NEGATIVE_INFINITY for details. The Number type has only one value with multiple representations: 0 is represented as both -0 and +0 (where 0 is an alias for +0). In practice, there is almost no difference between the different representations; for example, +0 === -0 is true. However, you are able to notice this when you divide by zero: console.log(42 / +0); // Infinity console.log(42 / -0); // -Infinity NaN (""Not a Number"") is a special kind of number value that's typically encountered when the result of an arithmetic operation cannot be expressed as a number. It is also the only value in JavaScript that is not equal to itself. Although a number is conceptually a ""mathematical value"" and is always implicitly floating-point-encoded, JavaScript provides bitwise operators. When applying bitwise operators, the number is first converted to a 32-bit integer. Note: Although bitwise operators can be used to represent several Boolean values within a single number using bit masking, this is usually considered a bad practice. JavaScript offers other means to represent a set of Booleans (like an array of Booleans, or an object with Boolean values assigned to named properties). Bit masking also tends to make the code more difficult to read, understand, and maintain. It may be necessary to use such techniques in very constrained environments, like when trying to cope with the limitations of local storage, or in extreme cases (such as when each bit over the network counts). This technique should only be considered when it is the last measure that can be taken to optimize size.BigInt typeThe BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary magnitude. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit (Number.MAX_SAFE_INTEGER) for Numbers. A BigInt is created by appending n to the end of an integer or by calling the BigInt() function. This example demonstrates where incrementing the Number.MAX_SAFE_INTEGER returns the expected result: // BigInt const x = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n x + 1n === x + 2n; // false because 9007199254740992n and 9007199254740993n are unequal // Number Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true because both are 9007199254740992 You can use most operators to work with BigInts, including +, *, -, **, and % â the only forbidden one is >>>. A BigInt is not strictly equal to a Number with the same mathematical value, but it is loosely so. BigInt values are neither always more precise nor always less precise than numbers, since BigInts cannot represent fractional numbers, but can represent big integers more accurately. Neither type entails the other, and they are not mutually substitutable. A TypeError is thrown if BigInt values are mixed with regular numbers in arithmetic expressions, or if they are implicitly converted to each other.String typeThe String type represents textual data and is encoded as a sequence of 16-bit unsigned integer values representing UTF-16 code units. Each element in the string occupies a position in the string. The first element is at index 0, the next at index 1, and so on. The length of a string is the number of UTF-16 code units in it, which may not correspond to the actual number of Unicode characters; see the String reference page for more details. JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it. String methods create new strings based on the content of the current string â for example: A substring of the original using substring(). A concatenation of two strings using the concatenation operator (+) or concat(). Beware of ""stringly-typing"" your code! It can be tempting to use strings to represent complex data. Doing this comes with short-term benefits: It is easy to build complex strings with concatenation. Strings are easy to debug (what you see printed is always what is in the string). Strings are the common denominator of a lot of APIs (input fields, local storage values, XMLHttpRequest responses when using responseText, etc.) and it can be tempting to only work with strings. With conventions, it is possible to represent any data structure in a string. This does not make it a good idea. For instance, with a separator, one could emulate a list (while a JavaScript array would be more suitable). Unfortunately, when the separator is used in one of the ""list"" elements, then, the list is broken. An escape character can be chosen, etc. All of this requires conventions and creates an unnecessary maintenance burden. Use strings for textual data. When representing complex data, parse strings, and use the appropriate abstraction.Symbol typeA Symbol is a unique and immutable primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called ""atoms"". The purpose of symbols is to create unique property keys that are guaranteed not to clash with keys from other code.ObjectsIn computer science, an object is a value in memory which is possibly referenced by an identifier. In JavaScript, objects are the only mutable values. Functions are, in fact, also objects with the additional capability of being callable.PropertiesIn JavaScript, objects can be seen as a collection of properties. With the object literal syntax, a limited set of properties are initialized; then properties can be added and removed. Object properties are equivalent to key-value pairs. Property keys are either strings or symbols. Property values can be values of any type, including other objects, which enables building complex data structures. There are two types of object properties: The data property and the accessor property. Each property has corresponding attributes. Each attribute is accessed internally by the JavaScript engine, but you can set them through Object.defineProperty(), or read them through Object.getOwnPropertyDescriptor(). You can read more about the various nuances on the Object.defineProperty() page. Data property Data properties associate a key with a value. It can be described by the following attributes: value The value retrieved by a get access of the property. Can be any JavaScript value. writable A boolean value indicating if the property can be changed with an assignment. enumerable A boolean value indicating if the property can be enumerated by a for...in loop. See also Enumerability and ownership of properties for how enumerability interacts with other functions and syntaxes. configurable A boolean value indicating if the property can be deleted, can be changed to an accessor property, and can have its attributes changed. Accessor property Associates a key with one of two accessor functions (get and set) to retrieve or store a value. Note: It's important to recognize it's accessor property â not accessor method. We can give a JavaScript object class-like accessors by using a function as a value â but that doesn't make the object a class. An accessor property has the following attributes: get A function called with an empty argument list to retrieve the property value whenever a get access to the value is performed. See also getters. May be undefined. set A function called with an argument that contains the assigned value. Executed whenever a specified property is attempted to be changed. See also setters. May be undefined. enumerable A boolean value indicating if the property can be enumerated by a for...in loop. See also Enumerability and ownership of properties for how enumerability interacts with other functions and syntaxes. configurable A boolean value indicating if the property can be deleted, can be changed to a data property, and can have its attributes changed. The prototype of an object points to another object or to null â it's conceptually a hidden property of the object, commonly represented as [[Prototype]]. Properties of the object's [[Prototype]] can also be accessed on the object itself. Objects are ad-hoc key-value pairs, so they are often used as maps. However, there can be ergonomics, security, and performance issues. Use a Map for storing arbitrary data instead. The Map reference contains a more detailed discussion of the pros & cons between plain objects and maps for storing key-value associations.DatesWhen representing dates, the best choice is to use the built-in Date utility in JavaScript.Indexed collections: Arrays and typed ArraysArrays are regular objects for which there is a particular relationship between integer-keyed properties and the length property. Additionally, arrays inherit from Array.prototype, which provides a handful of convenient methods to manipulate arrays. For example, indexOf() searches a value in the array and push() appends an element to the array. This makes Arrays a perfect candidate to represent ordered lists. Typed Arrays present an array-like view of an underlying binary data buffer, and offer many methods that have similar semantics to the array counterparts. ""Typed array"" is an umbrella term for a range of data structures, including Int8Array, Float32Array, etc. Check the typed array page for more information. Typed arrays are often used in conjunction with ArrayBuffer and DataView.Keyed collections: Maps, Sets, WeakMaps, WeakSetsThese data structures take object references as keys. Set and WeakSet represent a collection of unique values, while Map and WeakMap represent a collection of key-value associations. You could implement Maps and Sets yourself. However, since objects cannot be compared (in the sense of < ""less than"", for instance), neither does the engine expose its hash function for objects, look-up performance would necessarily be linear. Native implementations of them (including WeakMaps) can have look-up performance that is approximately logarithmic to constant time. Usually, to bind data to a DOM node, one could set properties directly on the object, or use data-* attributes. This has the downside that the data is available to any script running in the same context. Maps and WeakMaps make it easy to privately bind data to an object. WeakMap and WeakSet only allow garbage-collectable values as keys, which are either objects or non-registered symbols, and the keys may be collected even when they remain in the collection. They are specifically used for memory usage optimization.Structured data: JSONJSON (JavaScript Object Notation) is a lightweight data-interchange format, derived from JavaScript, but used by many programming languages. JSON builds universal data structures that can be transferred between different environments and even across languages. See JSON for more details.More objects in the standard libraryJavaScript has a standard library of built-in objects. Read the reference to find out more about the built-in objects.Type coercionAs mentioned above, JavaScript is a weakly typed language. This means that you can often use a value of one type where another type is expected, and the language will convert it to the right type for you. To do so, JavaScript defines a handful of coercion rules.Primitive coercionThe primitive coercion process is used where a primitive value is expected, but there's no strong preference for what the actual type should be. This is usually when a string, a number, or a BigInt are equally acceptable. For example: The Date() constructor, when it receives one argument that's not a Date instance â strings represent date strings, while numbers represent timestamps. The + operator â if one operand is a string, string concatenation is performed; otherwise, numeric addition is performed. The == operator â if one operand is a primitive while the other is an object, the object is converted to a primitive value with no preferred type. This operation does not do any conversion if the value is already a primitive. Objects are converted to primitives by calling its [@@toPrimitive]() (with ""default"" as hint), valueOf(), and toString() methods, in that order. Note that primitive conversion calls valueOf() before toString(), which is similar to the behavior of number coercion but different from string coercion. The [@@toPrimitive]() method, if present, must return a primitive â returning an object results in a TypeError. For valueOf() and toString(), if one returns an object, the return value is ignored and the other's return value is used instead; if neither is present, or neither returns a primitive, a TypeError is thrown. For example, in the following code: console.log({} + []); // ""[object Object]"" Neither {} nor [] have a [@@toPrimitive]() method. Both {} and [] inherit valueOf() from Object.prototype.valueOf, which returns the object itself. Since the return value is an object, it is ignored. Therefore, toString() is called instead. {}.toString() returns ""[object Object]"", while [].toString() returns """", so the result is their concatenation: ""[object Object]"". The [@@toPrimitive]() method always takes precedence when doing conversion to any primitive type. Primitive conversion generally behaves like number conversion, because valueOf() is called in priority; however, objects with custom [@@toPrimitive]() methods can choose to return any primitive. Date and Symbol objects are the only built-in objects that override the [@@toPrimitive]() method. Date.prototype[@@toPrimitive]() treats the ""default"" hint as if it's ""string"", while Symbol.prototype[@@toPrimitive]() ignores the hint and always returns a symbol.Numeric coercionThere are two numeric types: Number and BigInt. Sometimes the language specifically expects a number or a BigInt (such as Array.prototype.slice(), where the index must be a number); other times, it may tolerate either and perform different operations depending on the operand's type. For strict coercion processes that do not allow implicit conversion from the other type, see number coercion and BigInt coercion. Numeric coercion is nearly the same as number coercion, except that BigInts are returned as-is instead of causing a TypeError. Numeric coercion is used by all arithmetic operators, since they are overloaded for both numbers and BigInts. The only exception is unary plus, which always does number coercion.Other coercionsAll data types, except Null, Undefined, and Symbol, have their respective coercion process. See string coercion, boolean coercion, and object coercion for more details. As you may have noticed, there are three distinct paths through which objects may be converted to primitives: Primitive coercion: [@@toPrimitive](""default"") â valueOf() â toString() Numeric coercion, number coercion, BigInt coercion: [@@toPrimitive](""number"") â valueOf() â toString() String coercion: [@@toPrimitive](""string"") â toString() â valueOf() In all cases, [@@toPrimitive](), if present, must be callable and return a primitive, while valueOf or toString will be ignored if they are not callable or return an object. At the end of the process, if successful, the result is guaranteed to be a primitive. The resulting primitive is then subject to further coercions depending on the context.See also JavaScript Data Structures and Algorithms by Oleksii Trekhleb Nicholas Zakas collection of common data structure and common algorithms in JavaScript. Search Tre(i)es implemented in JavaScript Data Types and Values in the ECMAScript specification Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 3, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
31,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration/protocols,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration/protocols. Iteration protocols - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceIteration protocolsArticle ActionsEnglish (US)In this articleThe iterable protocolThe iterator protocolThe async iterator and async iterable protocolsInteractions between the language and iteration protocolsExamplesSpecificationsSee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleThe iterable protocolThe iterator protocolThe async iterator and async iterable protocolsInteractions between the language and iteration protocolsExamplesSpecificationsSee alsoIteration protocolsIteration protocols aren't new built-ins or syntax, but protocols. These protocols can be implemented by any object by following some conventions. There are two protocols: The iterable protocol and the iterator protocol.The iterable protocolThe iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for...of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not. In order to be iterable, an object must implement the @@iterator method, meaning that the object (or one of the objects up its prototype chain) must have a property with a @@iterator key which is available via constant Symbol.iterator: [Symbol.iterator] A zero-argument function that returns an object, conforming to the iterator protocol. Whenever an object needs to be iterated (such as at the beginning of a for...of loop), its @@iterator method is called with no arguments, and the returned iterator is used to obtain the values to be iterated. Note that when this zero-argument function is called, it is invoked as a method on the iterable object. Therefore inside of the function, the this keyword can be used to access the properties of the iterable object, to decide what to provide during the iteration. This function can be an ordinary function, or it can be a generator function, so that when invoked, an iterator object is returned. Inside of this generator function, each entry can be provided by using yield.The iterator protocolThe iterator protocol defines a standard way to produce a sequence of values (either finite or infinite), and potentially a return value when all values have been generated. An object is an iterator when it implements a next() method with the following semantics: next() A function that accepts zero or one argument and returns an object conforming to the IteratorResult interface (see below). If a non-object value gets returned (such as false or undefined) when a built-in language feature (such as for...of) is using the iterator, a TypeError (""iterator.next() returned a non-object value"") will be thrown. All iterator protocol methods (next(), return(), and throw()) are expected to return an object implementing the IteratorResult interface. It must have the following properties: done Optional A boolean that's false if the iterator was able to produce the next value in the sequence. (This is equivalent to not specifying the done property altogether.) Has the value true if the iterator has completed its sequence. In this case, value optionally specifies the return value of the iterator. value Optional Any JavaScript value returned by the iterator. Can be omitted when done is true. In practice, neither property is strictly required; if an object without either property is returned, it's effectively equivalent to { done: false, value: undefined }. If an iterator returns a result with done: true, any subsequent calls to next() are expected to return done: true as well, although this is not enforced on the language level. The next method can receive a value which will be made available to the method body. No built-in language feature will pass any value. The value passed to the next method of generators will become the value of the corresponding yield expression. Optionally, the iterator can also implement the return(value) and throw(exception) methods, which, when called, tells the iterator that the caller is done with iterating it and can perform any necessary cleanup (such as closing database connection). return(value) Optional A function that accepts zero or one argument and returns an object conforming to the IteratorResult interface, typically with value equal to the value passed in and done equal to true. Calling this method tells the iterator that the caller does not intend to make any more next() calls and can perform any cleanup actions. throw(exception) Optional A function that accepts zero or one argument and returns an object conforming to the IteratorResult interface, typically with done equal to true. Calling this method tells the iterator that the caller detects an error condition, and exception is typically an Error instance. Note: It is not possible to know reflectively (i.e. without actually calling next() and validating the returned result) whether a particular object implements the iterator protocol. It is very easy to make an iterator also iterable: just implement an [@@iterator]() method that returns this. // Satisfies both the Iterator Protocol and Iterable const myIterator = { next() {  // ... }, [Symbol.iterator]() {  return this; }, }; Such object is called an iterable iterator. Doing so allows an iterator to be consumed by the various syntaxes expecting iterables â therefore, it is seldom useful to implement the Iterator Protocol without also implementing Iterable. (In fact, almost all syntaxes and APIs expect iterables, not iterators.) The generator object is an example: const aGeneratorObject = (function* () { yield 1; yield 2; yield 3; })(); console.log(typeof aGeneratorObject.next); // ""function"" â it has a next method (which returns the right result), so it's an iterator console.log(typeof aGeneratorObject[Symbol.iterator]); // ""function"" â it has an @@iterator method (which returns the right iterator), so it's an iterable console.log(aGeneratorObject[Symbol.iterator]() === aGeneratorObject); // true â its @@iterator method returns itself (an iterator), so it's an iterable iterator All built-in iterators inherit from Iterator.prototype, which implements the [@@iterator]() method as returning this, so that built-in iterators are also iterable. However, when possible, it's better for iterable[Symbol.iterator] to return different iterators that always start from the beginning, like Set.prototype[@@iterator]() does.The async iterator and async iterable protocolsThere are another pair of protocols used for async iteration, named async iterator and async iterable protocols. They have very similar interfaces compared to the iterable and iterator protocols, except that each return value from the calls to the iterator methods is wrapped in a promise. An object implements the async iterable protocol when it implements the following methods: [Symbol.asyncIterator] A zero-argument function that returns an object, conforming to the async iterator protocol. An object implements the async iterator protocol when it implements the following methods: next() A function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the IteratorResult interface, and the properties have the same semantics as those of the sync iterator's. return(value) Optional A function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the IteratorResult interface, and the properties have the same semantics as those of the sync iterator's. throw(exception) Optional A function that accepts zero or one argument and returns a promise. The promise fulfills to an object conforming to the IteratorResult interface, and the properties have the same semantics as those of the sync iterator's. Interactions between the language and iteration protocolsThe language specifies APIs that either produce or consume iterables and iterators.Built-in iterables String, Array, TypedArray, Map, Set, and Segments (returned by Intl.Segmenter.prototype.segment()) are all built-in iterables, because each of their prototype objects implements an @@iterator method. In addition, the arguments object and some DOM collection types such as NodeList are also iterables. ReadableStream is the only built-in async iterable at the time of writing. Generator functions return generator objects, which are iterable iterators. Async generator functions return async generator objects, which are async iterable iterators. The iterators returned from built-in iterables actually all inherit from a common class Iterator (currently unexposed), which implements the aforementioned [Symbol.iterator]() { return this; } method, making them all iterable iterators. In the future, these built-in iterators may have additional helper methods in addition to the next() method required by the iterator protocol. You can inspect an iterator's prototype chain by logging it in a graphical console. console.log([][Symbol.iterator]()); Array Iterator {} [[Prototype]]: Array Iterator  ==> This is the prototype shared by all array iterators  next: Æ next()  Symbol(Symbol.toStringTag): ""Array Iterator""  [[Prototype]]: Object   ==> This is the prototype shared by all built-in iterators  Symbol(Symbol.iterator): Æ [Symbol.iterator]()  [[Prototype]]: Object   ==> This is Object.prototype Built-in APIs accepting iterablesThere are many APIs that accept iterables. Some examples include: Map() WeakMap() Set() WeakSet() Promise.all() Promise.allSettled() Promise.race() Promise.any() Array.from() const myObj = {}; new WeakSet( (function* () {  yield {};  yield myObj;  yield {}; })(), ).has(myObj); // true Syntaxes expecting iterablesSome statements and expressions expect iterables, for example the for...of loops, array and parameter spreading, yield*, and array destructuring: for (const value of [""a"", ""b"", ""c""]) { console.log(value); } // ""a"" // ""b"" // ""c"" console.log([...""abc""]); // [""a"", ""b"", ""c""] function* gen() { yield* [""a"", ""b"", ""c""]; } console.log(gen().next()); // { value: ""a"", done: false } [a, b, c] = new Set([""a"", ""b"", ""c""]); console.log(a); // ""a"" When built-in syntaxes are iterating an iterator, and the last result's done is false (i.e. the iterator is able to produce more values) but no more values are needed, the return method will get called if present. This can happen, for example, if a break or return is encountered in a for...of loop, or if all identifiers are already bound in an array destructuring. const obj = { [Symbol.iterator]() {  let i = 0;  return {  next() {   i++;   console.log(""Returning"", i);   if (i === 3) return { done: true, value: i };   return { done: false, value: i };  },  return() {   console.log(""Closing"");   return { done: true };  },  }; }, }; const [b] = obj; // Returning 1 // Closing const [a, b, c] = obj; // Returning 1 // Returning 2 // Returning 3 // Already reached the end (the last call returned `done: true`), // so `return` is not called for (const b of obj) { break; } // Returning 1 // Closing The for await...of loop and yield* in async generator functions (but not sync generator functions) are the only ways to interact with async iterables. Using for...of, array spreading, etc. on an async iterable that's not also a sync iterable (i.e. it has [@@asyncIterator]() but no [@@iterator]()) will throw a TypeError: x is not iterable.Non-well-formed iterablesIf an iterable's @@iterator method doesn't return an iterator object, then it's considered a non-well-formed iterable. Using one is likely to result in runtime errors or buggy behavior: const nonWellFormedIterable = {}; nonWellFormedIterable[Symbol.iterator] = () => 1; [...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value ExamplesUser-defined iterablesYou can make your own iterables like this: const myIterable = { *[Symbol.iterator]() {  yield 1;  yield 2;  yield 3; }, }; console.log([...myIterable]); // [1, 2, 3] Simple iteratorIterators are stateful by nature. If you don't define it as a generator function (as the example above shows), you would likely want to encapsulate the state in a closure. function makeIterator(array) { let nextIndex = 0; return {  next() {  return nextIndex < array.length   ? {    value: array[nextIndex++],    done: false,   }   : {    done: true,   };  }, }; } const it = makeIterator([""yo"", ""ya""]); console.log(it.next().value); // 'yo' console.log(it.next().value); // 'ya' console.log(it.next().done); // true Infinite iteratorfunction idMaker() { let index = 0; return {  next() {  return {   value: index++,   done: false,  };  }, }; } const it = idMaker(); console.log(it.next().value); // 0 console.log(it.next().value); // 1 console.log(it.next().value); // 2 // ... Defining an iterable with a generatorfunction* makeSimpleGenerator(array) { let nextIndex = 0; while (nextIndex < array.length) {  yield array[nextIndex++]; } } const gen = makeSimpleGenerator([""yo"", ""ya""]); console.log(gen.next().value); // 'yo' console.log(gen.next().value); // 'ya' console.log(gen.next().done); // true function* idMaker() { let index = 0; while (true) {  yield index++; } } const it = idMaker(); console.log(it.next().value); // 0 console.log(it.next().value); // 1 console.log(it.next().value); // 2 // ... Defining an iterable with a classState encapsulation can be done with private properties as well. class SimpleClass { #data; constructor(data) {  this.#data = data; } [Symbol.iterator]() {  // Use a new index for each iterator. This makes multiple  // iterations over the iterable safe for non-trivial cases,  // such as use of break or nested looping over the same iterable.  let index = 0;  return {  // Note: using an arrow function allows `this` to point to the  // one of `[@@iterator]()` instead of `next()`  next: () => {   if (index < this.#data.length) {   return { value: this.#data[index++], done: false };   } else {   return { done: true };   }  },  }; } } const simple = new SimpleClass([1, 2, 3, 4, 5]); for (const val of simple) { console.log(val); // 1 2 3 4 5 } Overriding built-in iterablesFor example, a String is a built-in iterable object: const someString = ""hi""; console.log(typeof someString[Symbol.iterator]); // ""function"" String's default iterator returns the string's code points one by one: const iterator = someString[Symbol.iterator](); console.log(`${iterator}`); // ""[object String Iterator]"" console.log(iterator.next()); // { value: ""h"", done: false } console.log(iterator.next()); // { value: ""i"", done: false } console.log(iterator.next()); // { value: undefined, done: true } You can redefine the iteration behavior by supplying our own @@iterator: // need to construct a String object explicitly to avoid auto-boxing const someString = new String(""hi""); someString[Symbol.iterator] = function () { return {  // this is the iterator object, returning a single element (the string ""bye"")  next() {  return this._first   ? { value: ""bye"", done: (this._first = false) }   : { done: true };  },  _first: true, }; }; Notice how redefining @@iterator affects the behavior of built-in constructs that use the iteration protocol: console.log([...someString]); // [""bye""] console.log(`${someString}`); // ""hi"" SpecificationsSpecificationECMAScript Language Specification # sec-iterationSee also Iterators and generators function* Symbol.iterator Iterator Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 3, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
32,developer.mozilla.org/en-US/docs/Web/API/NodeList/keys,"developer.mozilla.org/en-US/docs/Web/API/NodeList/keys. NodeList: keys() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodeListkeys()Article ActionsEnglish (US)In this articleSyntaxExampleBrowser compatibilitySee alsoDocument Object ModelNodeListInstance propertieslengthInstance methodsentries()forEach()item()keys() values()Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleBrowser compatibilitySee alsoNodeList: keys() method The NodeList.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are unsigned integer. Syntaxkeys() Return valueReturns an iterator.Exampleconst node = document.createElement(""div""); const kid1 = document.createElement(""p""); const kid2 = document.createTextNode(""hey""); const kid3 = document.createElement(""span""); node.appendChild(kid1); node.appendChild(kid2); node.appendChild(kid3); let list = node.childNodes; // Using for...of for (const key of list.keys()) { console.log(key); } The result is: 0 1 2 Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of NodeList.prototype.keys in core-js Node NodeList Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
33,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/children,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/children. DocumentFragment: children property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentchildrenIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildren firstElementChildlastElementChildInstance methodsappend()getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: children property The read-only children property returns a live HTMLCollection which contains all of the child elements of the document fragment upon which it was called. Value An HTMLCollection which is a live, ordered collection of the DOM elements which are children of the document fragment. You can access the individual child nodes in the collection by using either the item() method on the collection, or by using JavaScript array-style notation.  If the document fragment has no element children, then children is an empty list with a length of 0. Exampleslet fragment = new DocumentFragment(); fragment.children; // HTMLCollection [] let paragraph = document.createElement(""p""); fragment.appendChild(paragraph); fragment.children; // HTMLCollection [<p>] SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-childrenâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.childNodes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
34,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo. CanvasRenderingContext2D: lineTo() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DlineTo()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo() measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: lineTo() method The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line to the current sub-path by connecting the sub-path's last point to the specified (x, y) coordinates.  Like other methods that modify the current path, this method does not directly render anything. To draw the path onto a canvas, you can use the fill() or stroke() methods. SyntaxlineTo(x, y) Parameters x The x-axis coordinate of the line's end point. y The y-axis coordinate of the line's end point. Return valueNone (undefined).ExamplesDrawing a straight lineThis example draws a straight line using the lineTo() method. HTML <canvas id=""canvas""></canvas> JavaScript The line begins at (30, 50) and ends at (150, 100). const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.beginPath(); // Start a new path ctx.moveTo(30, 50); // Move the pen to (30, 50) ctx.lineTo(150, 100); // Draw a line to (150, 100) ctx.stroke(); // Render the path ResultDrawing connected lines Each call of lineTo() (and similar methods) automatically adds to the current sub-path, which means that all the lines will all be stroked or filled together. This example draws a letter 'M' with a single contiguous line. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.moveTo(90, 130); ctx.lineTo(95, 25); ctx.lineTo(150, 80); ctx.lineTo(205, 25); ctx.lineTo(210, 130); ctx.lineWidth = 15; ctx.stroke(); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-lineto-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D CanvasRenderingContext2D.moveTo() CanvasRenderingContext2D.stroke() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
35,developer.mozilla.org/en-US/docs/Web/API/Node/nodeName,"developer.mozilla.org/en-US/docs/Web/API/Node/nodeName. Node: nodeName property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodenodeNameArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeName nodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoNode: nodeName propertyThe read-only nodeName property of Node returns the name of the current node as a string.ValueA string. Values for the different types of nodes are: Attr The value of Attr.name, that is the qualified name of the attribute. CDATASection The string ""#cdata-section"". Comment The string ""#comment"". Document The string ""#document"". DocumentFragment The string ""#document-fragment"". DocumentType The value of DocumentType.name Element   The value of Element.tagName, that is the uppercase name of the element tag if an HTML element,  or the lowercase element tag if an XML element (like a SVG or MATHML element).  ProcessingInstruction The value of ProcessingInstruction.target Text The string ""#text"". ExampleThis example displays the node names of several nodes This is some HTML: <div id=""d1"">Hello world</div> <!-- Example of comment --> Text <span>Text</span> Text<br /> <svg height=""20"" width=""20""> <circle cx=""10"" cy=""10"" r=""5"" stroke=""black"" stroke-width=""1"" fill=""red"" /> </svg> <hr /> <output id=""result"">Not calculated yet.</output> and the following script: let node = document.querySelector(""body"").firstChild; let result = ""Node names are:<br/>""; while (node) { result += `${node.nodeName}<br/>`; node = node.nextSibling; } const output = document.getElementById(""result""); output.innerHTML = result; SpecificationsSpecificationDOM Standard # ref-for-dom-node-nodenameâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.tagName Attr.name DocumentType.name ProcessingInstruction.target Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
36,developer.mozilla.org/en-US/docs/Web/API/Document/dragenter/event,"developer.mozilla.org/en-US/docs/Web/API/Document/dragenter/event. HTMLElement: dragenter event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdragenterArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover Experimental styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover() Experimental showPopover() Experimental togglePopover() Experimental Eventsbeforeinputbeforetoggle Experimental changecopycutdragdragenddragenter dragleavedragoverdragstartdroperrorinputloadmscandidatewindowhide Non-standard mscandidatewindowshow Non-standard mscandidatewindowupdate Non-standard pastetoggle Experimental Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: dragenter eventThe dragenter event is fired when a dragged element or text selection enters a valid drop target. The target object is the immediate user selection (the element directly indicated by the user as the drop target), or the <body> element.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""dragenter"", (event) => {}); ondragenter = (event) => {}; Event typeA DragEvent. Inherits from Event.   Event     UIEvent     MouseEvent     DragEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ExamplesStyling drop zones on dragenterIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it over the other container, and then releasing it. We listen for the dragenter event to give the other container a purple background while the draggable element is over it, to signal that the draggable element could be dropped on to the container. Note though that in this partial example we haven't implemented dropping: for a complete example of drag and drop, see the page for the drag event. HTML <div class=""dropzone""> <div id=""draggable"" draggable=""true"">This div is draggable</div> </div> <div class=""dropzone"" id=""droptarget""></div> CSS body { /* Prevent the user selecting text in the example */ user-select: none; } #draggable { text-align: center; background: white; } .dropzone { width: 200px; height: 20px; background: blueviolet; margin: 10px; padding: 10px; } .dropzone.dragover { background-color: purple; } JavaScript const target = document.getElementById(""droptarget""); target.addEventListener(""dragenter"", (event) => { // highlight potential drop target when the draggable element enters it if (event.target.classList.contains(""dropzone"")) {  event.target.classList.add(""dragover""); } }); target.addEventListener(""dragleave"", (event) => { // reset background of potential drop target when the draggable element leaves it if (event.target.classList.contains(""dropzone"")) {  event.target.classList.remove(""dragover""); } }); ResultSpecificationsSpecificationHTML Standard # ix-handler-ondragenterHTML Standard # event-dnd-dragenterBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Other drag and drop events:  drag dragstart dragend dragover dragleave drop This event on other targets:  Window: dragenter event Document: dragenter event SVGElement: dragenter event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
37,developer.mozilla.org/en-US/docs/Learn/Tools/and/testing/Cross/browser/testing/Accessibility#using/native/keyboard/accessibility,"developer.mozilla.org/en-US/docs/Learn/Tools/and/testing/Cross/browser/testing/Accessibility#using/native/keyboard/accessibility. Handling common accessibility problems - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesTools and testingCross browser testingHandling common accessibility problemsArticle ActionsEnglish (US)In this articleWhat is accessibility?Common accessibility issuesAccessibility toolsAccessibility testing checklistFinding helpSummaryComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleWhat is accessibility?Common accessibility issuesAccessibility toolsAccessibility testing checklistFinding helpSummaryHandling common accessibility problems Previous Overview: Cross browser testing Next Next we turn our attention to accessibility, providing information on common problems, how to do simple testing, and how to make use of auditing/automation tools for finding accessibility issues. Prerequisites:   Familiarity with the core HTML,   CSS, and   JavaScript languages; an idea   of the high level   principles of cross browser testing.   Objective:   To be able to diagnose common Accessibility problems, and use   appropriate tools and techniques to fix them.   What is accessibility?When we say accessibility in the context of web technology, most people immediately think of making sure websites/apps are usable by people with disabilities, for example: Visually impaired people using screen readers or magnification/zoom to access text People with motor function impairments using the keyboard (or other non-mouse features) to activate website functionality. People with hearing impairments relying on captions/subtitles or other text alternatives for audio/video content. However, it is wrong to say that accessibility is just about disabilities. Really, the aim of accessibility is to make your websites/apps usable by as many people in as many contexts as possible, not just those users using high-powered desktop computers. Some examples might include: Users on mobile devices. Users on alternative browsing devices such as TVs, watches, etc. Users of older devices that might not have the latest browsers. Users of lower spec devices that might have slow processors. In a way, this whole module is about accessibility â cross browser testing makes sure that your sites can be used by as many people as possible. What is accessibility? defines accessibility more completely and thoroughly than this article does. That said, this article will cover cross browser and testing issues surrounding people with disabilities, and how they use the Web. We've already talked about other spheres such as responsive design and performance in other places in the module. Note: Like many things in web development, accessibility isn't about 100% success or not; 100% accessibility is pretty much impossible to achieve for all content, especially as sites get more complex. Instead, it is more about making a reasonable effort to make as much of your content accessible to as many people as possible via defensive coding and sticking to best practices. Common accessibility issuesIn this section we'll detail some of the main issues that arise around web accessibility, connected with specific technologies, along with best practices to follow, and some quick tests you can do to see if your sites are going in the right direction. Note: Accessibility is morally the right thing to do, and good for business (numbers of disabled users, users on mobile devices, etc. present significant market segments), but it is also a legal requirement in many parts of the world to make web content accessible to people with disabilities. Read Accessibility guidelines and the law for more information. HTMLSemantic HTML (where the elements are used for their correct purpose) is accessible right out of the box â such content is readable by sighted viewers (provided you don't do anything silly like make the text way too small or hide it using CSS), but will also be usable by assistive technologies like screen readers (apps that literally read out a web page to their user), and confer other advantages too. Semantic structure The most important quick win in semantic HTML is to use a structure of headings and paragraphs for your content; this is because screen reader users tend to use the headings of a document as signposts to find the content they need more quickly. If your content has no headings, all they will get is a huge wall of text with no signposts to find anything. Examples of bad and good HTML: <font size=""7"">My heading</font> <br /><br /> This is the first section of my document. <br /><br /> I'll add another paragraph here too. <br /><br /> <font size=""5"">My subheading</font> <br /><br /> This is the first subsection of my document. I'd love people to be able to find this content! <br /><br /> <font size=""5"">My 2nd subheading</font> <br /><br /> This is the second subsection of my content. I think it is more interesting than the last one. <h1>My heading</h1> <p>This is the first section of my document.</p> <p>I'll add another paragraph here too.</p> <h2>My subheading</h2> <p> This is the first subsection of my document. I'd love people to be able to find this content! </p> <h2>My 2nd subheading</h2> <p> This is the second subsection of my content. I think it is more interesting than the last one. </p> In addition, your content should make logical sense in its source order â you can always place it where you want using CSS later on, but you should get the source order right to start with. As a test, you can turn off a site's CSS and see how understandable it is without it. You could do this manually by just removing the CSS from your code, but the easiest way is to use browser features, for example: Firefox: Select View > Page Style > No Style from the main menu. Safari: Select Develop > Disable Styles from the main menu (to enable the Develop menu, choose Safari > Preferences > Advanced > Show Develop menu in menu bar). Chrome: Install the Web Developer Toolbar extension, then restart the browser. Click the gear icon that will appear, then select CSS > Disable All Styles. Edge: Select View > Style > No Style from the main menu. Using native keyboard accessibility Certain HTML features can be selected using only the keyboard â this is default behavior, available since the early days of the web. The elements that have this capability are the common ones that allow user to interact with web pages, namely links, <button>s, and form elements like <input>. You can try this out using our native-keyboard-accessibility.html example (see the source code) â open this in a new tab, and try pressing the tab key; after a few presses, you should see the tab focus start to move through the different focusable elements; the focused elements are given a highlighted default style in every browser (it differs slightly between different browsers) so that you can tell what element is focused.  Note: In Firefox, you can also enable an overlay that shows the page tabbing order. For more information see: Accessibility Inspector > Show web page tabbing order. You can then press Enter/Return to follow a focused link or press a button (we've included some JavaScript to make the buttons alert a message), or start typing to enter text in a text input (other form elements have different controls, for example the <select> element can have its options displayed and cycled between using the up and down arrow keys). Note that different browsers may have different keyboard control options available. Most modern browsers follow the tab pattern described above (you can also do Shift + Tab to move backwards through the focusable elements), but some browsers have their own idiosyncrasies: Firefox for the Mac doesn't do tabbing by default. To turn it on, you have to go to Preferences > Advanced > General, then uncheck ""Always use the cursor keys to navigate within pages"". Next, you have to open your Mac's System Preferences app, then go to Keyboard > Shortcuts, then select the All Controls radio button. Safari doesn't allow you to tab through links by default; to enable this, you need to open Safari's Preferences, go to Advanced, and check the Press Tab to highlight each item on a webpage checkbox. Warning: You should perform this kind of test/review on any new page you write â make sure that functionality can be accessed by the keyboard, and that the tab order provides a sensible navigation path through the document. This example highlights the importance of using the correct semantic element for the correct job. It is possible to style any element to look like a link or button with CSS, and to behave like a link or button with JavaScript, but they won't actually be links or buttons, and you'll lose a lot of the accessibility these elements give you for free. So don't do it if you can avoid it. Another tip â as shown in our example, you can control how your focusable elements look when focused, using the :focus pseudo-class. It is a good idea to double up focus and hover styles, so your users get that visual clue that a control will do something when activated, whether they are using mouse or keyboard: a:hover, input:hover, button:hover, select:hover, a:focus, input:focus, button:focus, select:focus { font-weight: bold; } Note: If you do decide to remove the default focus styling using CSS, make sure you replace it with something else that fits in with your design better â it is a very valuable accessibility tool, and should not be removed. Building in keyboard accessibility Sometimes it is not possible to avoid losing keyboard accessibility. You might have inherited a site where the semantics are not very good (perhaps you've ended up with a horrible CMS that generates buttons made with <div>s), or you are using a complex control that does not have keyboard accessibility built in, like the HTML <video> element (amazingly, Opera is the only browser that allows you to tab through the <video> element's default browser controls). You have a few options here: Create custom controls using <button> elements (which we can tab to by default!) and JavaScript to wire up their functionality. See Creating a cross-browser video player for some good examples of this. Create keyboard shortcuts via JavaScript, so functionality is activated when you press certain keys on the keyboard. See Desktop mouse and keyboard controls for some game-related examples that can be adapted for any purpose. Use some interesting tactics to fake button behavior. Take for example our fake-div-buttons.html example (see source code). Here we've given our fake <div> buttons the ability to be focused (including via tab) by giving each one the attribute tabindex=""0"" (see WebAIM's tabindex article for more really useful details). This allows us to tab to the buttons, but not to activate them via the Enter/Return key. To do that, we had to add the following bit of JavaScript trickery:  document.onkeydown = (e) => { if (e.keyCode === 13) {  // The Enter/Return key  document.activeElement.onclick(e); } }; Here we add a listener to the document object to detect when a button has been pressed on the keyboard. We check what button was pressed via the event object's keyCode property; if it is the keycode that matches Return/Enter, we run the function stored in the button's onclick handler using document.activeElement.onclick(). activeElement gives us the element that is currently focused on the page.  Note: This technique will only work if you set your original event handlers via event handler properties (e.g. onclick). addEventListener won't work. This is a lot of extra hassle to build the functionality back in. And there's bound to be other problems with it. Better to just use the right element for the right job in the first place. Text alternatives Text alternatives are very important for accessibility â if a person has a visual or hearing impairment that stops them being able to see or hear some content, then this is a problem. The simplest text alternative available is the humble alt attribute, which we should include on all images that contain relevant content. This should contain a description of the image that successfully conveys its meaning and content on the page, to be picked up by a screen reader and read out to the user. Note: For more information, read Text alternatives. Missing alt text can be tested for in a number of ways, for example using accessibility Auditing tools. Alt text is slightly more complex for video and audio content. There is a way to define text tracks (e.g. subtitles) and display them when video is being played, in the form of the <track> element, and the WebVTT format (see Adding captions and subtitles to HTML video for a detailed tutorial). Browser compatibility for these features is fairly good, but if you want to provide text alternatives for audio or support older browsers, a simple text transcript presented somewhere on the page or on a separate page might be a good idea. Element relationships and context There are certain features and best practices in HTML designed to provide context and relationships between elements where none otherwise exists. The three most common examples are links, form labels, and data tables. The key to accessible link text is that people using screen readers will often use a common feature whereby they pull up a list of all the links on the page. In this case, the link text needs to make sense out of context. For example, a list of links labeled ""click here"", ""click me"", etc. is really bad for accessibility. It is better for link text to make sense in context and out of context. Next on our list, the form <label> element is one of the central features that allows us to make forms accessible. The trouble with forms is that you need labels to say what data should be entered into each form input. Each label needs to be included inside a <label> to link it unambiguously to its partner form input (the for attribute value of each <label> needs to match the form element id value), and it will make sense even if the source order is not completely logical (which to be fair it should be). Note: For more information about link text and form labels, read Meaningful text labels. Finally, a quick word about data tables. A basic data table can be written with very simple markup (see bad-table.html live, and source), but this has problems â there is no way for a screen reader user to associate rows or columns together as groupings of data â to do this you need to know what the header rows are, and if they are heading up rows, columns, etc. This can only be done visually for such a table. If you instead look at our punk-bands-complete.html example (live, source), you can see a few accessibility aids at work here, such as table headers (<th> and scope attributes), <caption> element, etc. Note: For more information about accessible tables, read Accessible data tables. CSSCSS tends to provide a lot fewer fundamental accessibility features than HTML, but it can still do just as much damage to accessibility if used incorrectly. We have already mentioned a couple of accessibility tips involving CSS: Use the correct semantic elements to mark up different content in HTML; if you want to create a different visual effect, use CSS â don't abuse an HTML element to get the look you want. For example, if you want bigger text, use font-size, not an h1 element. Make sure your source order makes sense without CSS; you can always use CSS to style the page any way you want afterward. You should make sure interactive elements like buttons and links have appropriate focus/hover/active states set, to give the user visual clues as to their function. If you remove the defaults for stylistic reasons, make sure you include some replacement styles. There are a few other considerations you should take into account. Color and color contrast When choosing a color scheme for your website, you should make sure that the text (foreground) color contrasts well with the background color. Your design might look cool, but it is no good if people with visual impairments like color blindness can't read your content. Use a tool like WebAIM's Color Contrast Checker to check whether your scheme is contrasting enough. Another tip is to not rely on color alone for signposts/information, as this will be no good for those who can't see the color. Instead of marking required form fields in red, for example, mark them with an asterisk and in red. Note: A high contrast ratio will also allow anyone using a smartphone or tablet with a glossy screen to better read pages when in a bright environment, such as sunlight. Hiding content There are many instances where a visual design will require that not all content is shown at once. For example, in our Tabbed info box example (see source code) we have three panels of information, but we are positioning them on top of one another and providing tabs that can be clicked to show each one (it is also keyboard accessible â you can alternatively use Tab and Enter/Return to select them). Screen reader users don't care about any of this â they are happy with the content as long as the source order makes sense, and they can get to it all. Absolute positioning (as used in this example) is generally seen as one of the best mechanisms of hiding content for visual effect, because it doesn't stop screen readers from getting to it. On the other hand, you shouldn't use visibility:hidden or display:none, because they do hide content from screen readers. Unless of course, there is a good reason why you want this content to be hidden from screen readers. Note: Invisible Content Just for Screen Reader Users has a lot more useful detail surrounding this topic. JavaScriptJavaScript has the same kind of problems as CSS with respect to accessibility â it can be disastrous for accessibility if used badly, or overused. We've already hinted at some accessibility problems related to JavaScript, mainly in the area of semantic HTML â you should always use appropriate semantic HTML to implement functionality wherever it is available, for example use links and buttons as appropriate. Don't use <div> elements with JavaScript code to fake functionality if at all possible â it is error-prone, and more work than using the free functionality HTML gives you. Simple functionality Generally simple functionality should work with just the HTML in place â JavaScript should only be used to enhance functionality, not build it in entirely. Good uses of JavaScript include: Providing client-side form validation, which alerts users to problems with their form entries quickly, without having to wait for the server to check the data. If it isn't available, the form will still work, but validation might be slower. Providing custom controls for HTML <video>s that are accessible to keyboard-only users (as we said earlier, the default browser controls aren't keyboard-accessible in most browsers). Note: WebAIM's Accessible JavaScript provides some useful further details about considerations for accessible JavaScript. More complex JavaScript implementations can create issues with accessibility â you need to do what you can. For example, it would be unreasonable to expect you to make a complex 3D game written using WebGL 100% accessible to a blind person, but you could implement keyboard controls so it is usable by non-mouse users, and make the color scheme contrasting enough to be usable by those with color deficiencies. Complex functionality One of the main areas problematic for accessibility is complex apps that involve complicated form controls (such as date pickers) and dynamic content that is updated often and incrementally. Non-native complicated form controls are problematic because they tend to involve a lot of nested <div>s, and the browser does not know what to do with them by default. If you are inventing them yourself, you need to make sure that they are keyboard accessible; if you are using some kind of third-party framework, carefully review the options available to see how accessible they are before diving in. Bootstrap looks to be fairly good for accessibility, for example, although Making Bootstrap a Little More Accessible by Rhiana Heath explores some of its issues (mainly related to color contrast), and looks at some solutions. Regularly updated dynamic content can be a problem because screen reader users might miss it, especially if it updates unexpectedly. If you have a single-page app with a main content panel that is regularly updated using XMLHttpRequest or Fetch, a screen reader user might miss those updates. WAI-ARIA Do you need to use such complex functionality, or will plain old semantic HTML do instead? If you do need complexity, you should consider using WAI-ARIA (Accessible Rich Internet Applications), a specification that provides semantics (in the form of new HTML attributes) for items such as complex form controls and updating panels that can be understood by most browsers and screen readers. To deal with complex form widgets, you need to use ARIA attributes like roles to state what role different elements have in a widget (for example, are they a tab, or a tab panel?), aria-disabled to say whether a control is disabled or not, etc. To deal with regularly updating regions of content, you can use the aria-live attribute, which identifies an updating region. Its value indicates how urgently the screen reader should read it out: off: The default. Updates should not be announced. polite: Updates should be announced only if the user is idle. assertive: Updates should be announced to the user as soon as possible. rude: Updates should be announced straight away, even if this interrupts the user. Here's an example: <p><span id=""LiveRegion1"" aria-live=""polite"" aria-atomic=""false""></span></p> You can see an example in action at Freedom Scientific's ARIA (Accessible Rich Internet Applications) Live Regions example â the highlighted paragraph should update its content every 10 seconds, and a screen reader should read this out to the user. ARIA Live Regions - Atomic provides another useful example. We don't have space to cover WAI-ARIA in detail here, you can learn a lot more about it at WAI-ARIA basics.Accessibility toolsNow we've covered accessibility considerations for different web technologies, including a few testing techniques (like keyboard navigation and color contrast checkers), let's have a look at other tools you can make use of when doing accessibility testing.Auditing toolsThere are a number of auditing tools available that you can feed your web pages into. They will look over them and return a list of accessibility issues present on the page. Examples include: Wave: A rather nice online accessibility testing tool that accepts a web address and returns a useful annotated view of that page with accessibility problems highlighted. Tenon: Another nice online tool that goes through the code at a provided URL and returns results on accessibility errors including metrics, specific errors along with the WCAG criteria they affect, and suggested fixes. It requires a free trial signup to view the results. tota11y: An accessibility tool from the Khan Academy that takes the form of a JavaScript library that you attach to your page to provide a number of accessibility tools. Let's look at an example, using Wave. Go to the Wave homepage. Enter the URL of our bad-semantics.html example into the text input box near the top of the page. Then press enter or click/tap the arrow at the far right edge of the input box. The site should respond with a description of the accessibility problems. Click the icons displayed to see more information about each of the issues identified by Wave's evaluation. Note: Such tools aren't good enough to solve all your accessibility problems on their own. You'll need a combination of these, knowledge and experience, user testing, etc. to get a full picture. Automation toolsDeque's aXe tool goes a bit further than the auditing tools we mentioned above. Like the others, it checks pages and returns accessibility errors. Its most immediately useful form is probably the browser extensions: aXe for Chrome aXe for Firefox These add an accessibility tab to the browser developer tools. For example, we installed the Firefox version, then used it to audit our bad-table.html example. We got the following results: aXe is also installable using npm, and can be integrated with task runners like Grunt and Gulp, automation frameworks like Selenium and Cucumber, unit testing frameworks like Jasmine, and more besides (again, see the main aXe page for details).Screen readersIt is definitely worth testing with a screen reader to get used to how severely visually impaired people use the Web. There are a number of screen readers available: Some are paid-for commercial products, like JAWS (Windows) and Window Eyes (Windows). Some are free products, like NVDA (Windows), ChromeVox (Chrome, Windows, and macOS), and Orca (Linux). Some are built into the operating system, like VoiceOver (macOS and iOS), ChromeVox (on Chromebooks), and TalkBack (Android). Generally, screen readers are separate apps that run on the host operating system and can read not only web pages, but text in other apps as well. This is not always the case (ChromeVox is a browser extension), but usually, screen readers tend to act in slightly different ways and have different controls, so you'll have to consult the documentation for your chosen screen reader to get all the details â saying that, they all work in basically the same sort of way. Let's go through some tests with a couple of different screen readers to give you a general idea of how they work and how to test with them. Note: WebAIM's Designing for Screen Reader Compatibility provides some useful information about screen reader usage and what works best for screen readers. Also see Screen Reader User Survey #9 Results for some interesting screen reader usage statistics. VoiceOver VoiceOver (VO) comes free with your Mac/iPhone/iPad, so it's useful for testing on desktop/mobile if you use Apple products. We'll be testing it on Mac OS X on a MacBook Pro. To turn it on, press Cmd + F5. If you've not used VO before, you will be given a welcome screen where you can choose to start VO or not, and run through a rather useful tutorial to learn how to use it. To turn it off again, press Cmd + F5 again. Note: You should go through the tutorial at least once â it is a really useful way to learn VO. When VO is on, the display will look mostly the same, but you'll see a black box at the bottom left of the screen that contains information on what VO currently has selected. The current selection will also be highlighted, with a black border â this highlight is known as the VO cursor. To use VO, you will make a lot of use of the ""VO modifier"" â this is a key or key combination that you need to press in addition to the actual VO keyboard shortcuts to get them to work. Using a modifier like this is common with screen readers, to enable them to keep their commands from clashing with other commands. In the case of VO, the modifier can either be CapsLock, or Ctrl + Option. VO has many keyboard commands, and we won't list them all here. The basic ones you'll need for web page testing are in the following table. In the keyboard shortcuts, ""VO"" means ""the VoiceOver modifier"". Most common VoiceOver keyboard shortcuts Keyboard shortcut Description  VO + Cursor keys Move the VO cursor up, right, down, left. VO + Spacebar   Select/activate items highlighted by the VO cursor. This includes items   selected in the Rotor (see below).   VO + Shift + down cursor   Move into a group of items (such as an HTML table, or a form, etc.) Once   inside a group you can move around and select items inside that group   using the above commands as normal.   VO + Shift + up cursor Move out of a group. VO + C (when inside a table) Read the header of the current column. VO + R (when inside a table) Read the header of the current row. VO + C + C (two Cs in succession) (when inside a table) Read the entire current column, including header. VO + R + R (two Rs in succession)   (when inside a table) Read the entire current row, including the headers   that correspond to each cell.   VO + left cursor, VO + right cursor   (when inside some horizontal options, such as a date or time picker)   Move between options.   VO + up cursor, VO + down cursor   (when inside some horizontal options, such as a date or time picker)   Change the current option.   VO + U   Use the Rotor, which displays lists of headings, links, form controls,   etc. for easy navigation.   VO + left cursor, VO + right cursor (when inside Rotor) Move between different lists available in the Rotor. VO + up cursor, VO + down cursor   (when inside Rotor) Move between different items in the current Rotor   list.   Esc (when inside Rotor) Exit Rotor. Ctrl (when VO is speaking) Pause/Resume speech. VO + Z Restart the last bit of speech. VO + D Go into the Mac's Dock, so you can select apps to run inside it. This seems like a lot of commands, but it isn't so bad when you get used to it, and VO regularly gives you reminders of what commands to use in certain places. Have a play with VO now; you can then go on to play with some of our examples in the [Screen reader testing](#screen reader_testing) section. NVDA NVDA is Windows-only, and you'll need to install it. Download it from nvaccess.org. You can choose whether to make a donation or download it for free; you'll also need to give them your email address before you can download it. Once downloaded, install it â you double-click the installer, accept the license and follow the prompts. To start NVDA, double-click on the program file/shortcut, or use the keyboard shortcut Ctrl + Alt + N. You'll see the NVDA welcome dialog when you start it. Here you can choose from a couple of options, then press the OK button to get going. NVDA will now be active on your computer. To use NVDA, you will make a lot of use of the ""NVDA modifier"" â this is a key that you need to press in addition to the actual NVDA keyboard shortcuts to get them to work. Using a modifier like this is common with screen readers, to enable them to keep their commands from clashing with other commands. In the case of NVDA, the modifier can either be Insert (the default), or CapsLock (can be chosen by checking the first checkbox in the NVDA welcome dialog before pressing OK). Note: NVDA is more subtle than VoiceOver in terms of how it highlights where it is and what it is doing. When you are scrolling through headings, lists, etc., items you are selected on will generally be highlighted with a subtle outline, but this is not always the case for all things. If you get completely lost, you can press Ctrl + F5 to refresh the current page and begin from the top again. NVDA has many keyboard commands, and we won't list them all here. The basic ones you'll need for web page testing are in the following table. In the keyboard shortcuts, ""NVDA"" means ""the NVDA modifier"". Most common NVDA keyboard shortcuts Keyboard shortcut Description  NVDA + Q Turn NVDA off again after you've started it. NVDA + up cursor Read the current line. NVDA + down cursor Start reading at the current position. Up cursor and down cursor, or Shift + Tab and Tab Move to previous/next item on page and read it. Left cursor and right cursor Move to previous/next character in current item and read it. Shift + H and H Move to previous/next heading and read it. Shift + K and K Move to previous/next link and read it. Shift + D and D   Move to previous/next document landmark (e.g. <nav>)   and read it.   Shift + 1â6 and 1â6 Move to previous/next heading (level 1â6) and read it. Shift + F and F Move to previous/next form input and focus on it. Shift + T and T Move to previous/next data table and focus on it. Shift + B and B Move to previous/next button and read its label. Shift + L and L Move to previous/next list and read its first list item. Shift + I and I Move to previous/next list item and read it. Enter/Return (when link/button or other activatable item is selected) Activate item. NVDA + Space   (when form is selected) Enter form so individual items can be selected,   or leave form if you are already in it.   Shift Tab and Tab (when inside form) Move between form inputs. Up cursor and down cursor   (when inside form) Change form input values (in the case of things like   select boxes).   Spacebar (when inside form) Select chosen value. Ctrl + Alt + cursor keys (when a table is selected) Move between table cells. Screen reader testing Now you've gotten used to using a screen reader, we'd like you to use it to do some quick accessibility tests, to get an idea of how screen readers deal with good and bad webpage features: Look at good-semantics.html, and note how the headers are found by the screen reader and available to use for navigation. Now look at bad-semantics.html, and note how the screen reader gets none of this information. Imagine how annoying this would be when trying to navigate a really long page of text. Look at good-links.html, and note how they make sense when viewed out of context. This is not the case with bad-links.html â they are all just ""click here"". Look at good-form.html, and note how the form inputs are described using their labels because we've used <label> elements properly. In bad-form.html, they get an unhelpful label along the lines of ""blank"". Look at our punk-bands-complete.html example, and see how the screen reader is able to associate columns and rows of content and read them out all together because we've defined headers properly. In bad-table.html, none of the cells can be associated at all. Note that NVDA seems to behave slightly strangely when you've only got a single table on a page; you could try WebAIM's table test page instead. Have a look at the WAI-ARIA live regions example we saw earlier, and note how the screen reader will keep reading out the constantly updating section as it updates. User testingAs mentioned above, you can't rely on automated tools alone for determining accessibility problems on your site. It is recommended that when you draw up your testing plan, you should include some accessibility user groups if at all possible (see our User Testing section earlier on in the course for some more context). Try to get some screen reader users involved, some keyboard-only users, some non-hearing users, and perhaps other groups too, as suits your requirements.Accessibility testing checklistThe following list provides a checklist for you to follow to make sure you've carried out the recommended accessibility testing for your project: Make sure your HTML is as semantically correct as possible. Validating it is a good start, as is using an Auditing tool. Check that your content makes sense when the CSS is turned off. Make sure your functionality is keyboard accessible. Test using Tab, Return/Enter, etc. Make sure your non-text content has text alternatives. An Auditing tool is good for catching such problems. Make sure your site's color contrast is acceptable, using a suitable checking tool. Make sure hidden content is visible by screen readers. Make sure that functionality is usable without JavaScript wherever possible. Use ARIA to improve accessibility where appropriate. Run your site through an Auditing tool. Test it with a screen reader. Include an accessibility policy/statement somewhere findable on your site to say what you did. Finding helpThere are many other issues you'll encounter with accessibility; the most important thing to know really is how to find answers online. Consult the HTML and CSS article's Finding help section for some good pointers.SummaryHopefully this article has given you a good grounding in the main accessibility problems you might encounter, and how to test and overcome them. In the next article we'll look at feature detection in more detail. Previous Overview: Cross browser testing Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 9, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
38,developer.mozilla.org/en-US/docs/Learn/Common/questions/Tools/and/setup/Upload/files/to/a/web/server,"developer.mozilla.org/en-US/docs/Learn/Common/questions/Tools/and/setup/Upload/files/to/a/web/server. How do you upload your files to a web server? - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesCommon questionsTools and setupHow do you upload your files to a web server?Article ActionsEnglish (US)In this articleSummarySFTPRsyncGitHubOther methods to upload files Design and accessibilityDesign and accessibilityWhat do common web layouts contain?How can we design for all types of users?What HTML features promote accessibility?How do I start to design my website?What is accessibility?Tools and setupTools and setupWhat text editors are available?How do you make sure your website works properly?How do you host your website on Google App Engine?How much does it cost to do something on the Web?How do you set up a local testing server?How do you upload your files to a web server?How do I use GitHub Pages?What are browser developer tools?What software do I need to build a website?Web mechanicsWeb mechanicsHow does the Internet work?What is the difference between webpage, website, web server, and search engine?What are hyperlinks?What is a Domain Name?What is a URL?What is a web server? In this articleSummarySFTPRsyncGitHubOther methods to upload filesHow do you upload your files to a web server?This article shows you how to publish your site online using file transfer tools. Prerequisites:   You must know   what a web server is   and   how domain names work. You must also know how to   set up a basic environment   and how to   write a simple webpage.   Objective:   Learn how to push files to a server using the various file transfer   tools available.   SummaryIf you have built a simple web page (see HTML basics for an example), you will probably want to put it online, on a web server. In this article we'll discuss how to do that, using various available options such as SFTP clients, RSync and GitHub.SFTPThere are several SFTP clients out there. Our demo covers FileZilla, since it's free and available for Windows, macOS and Linux. To install FileZilla go to the FileZilla downloads page, click the big Download button, then install from the installer file in the usual way. Note: Of course there are lots of other options. See Publishing tools for more information. Open the FileZilla application; you should see something like this: Logging inFor this example, we'll suppose that our hosting provider (the service that will host our HTTP web server) is a fictitious company ""Example Hosting Provider"" whose URLs look like this: mypersonalwebsite.examplehostingprovider.net. We have just opened an account and received this info from them: Congratulations for opening an account at Example Hosting Provider. Your account is: demozilla Your website will be visible at demozilla.examplehostingprovider.net To publish to this account, please connect through SFTP with the following credentials: SFTP server: sftp://demozilla.examplehostingprovider.net Username: demozilla Password: quickbrownfox Port: 5548 To publish on the web, put your files into the Public/htdocs directory. Let's first look at http://demozilla.examplehostingprovider.net/ â as you can see, so far there is nothing there:  Note: Depending on your hosting provider, most of the time you'll see a page saying something like ""This website is hosted by [Hosting Service]."" when you first go to your web address. To connect your SFTP client to the distant server, follow these steps: Choose File > Site Managerâ¦ from the main menu. In the Site Manager window, press the New Site button, then fill in the site name as demozilla in the provided space. Fill in the SFTP server your host provided in the Host: field. In the Logon Type: drop down, choose Normal, then fill in your provided username and password in the relevant fields. Fill in the correct port and other information. Your window should look something like this: Now press Connect to connect to the SFTP server. Note: Make sure your hosting provider offers SFTP (Secure FTP) connection to your hosting space. FTP is inherently insecure, and you shouldn't use it.Here and there: local and remote viewOnce connected, your screen should look something like this (we've connected to an example of our own to give you an idea): Let's examine what you're seeing: On the center left pane, you see your local files. Navigate into the directory where you store your website (e.g. mdn). On the center right pane, you see remote files. We are logged into our distant FTP root (in this case, users/demozilla) You can ignore the bottom and top panes for now. Respectively, these are a log of messages showing the connection status between your computer and the SFTP server, and a live log of every interaction between your SFTP client and the server. Uploading to the serverOur example host instructions told us ""To publish on the web, put your files into the Public/htdocs directory."" You need to navigate to the specified directory in your right pane. This directory is effectively the root of your website â where your index.html file and other assets will go. Once you've found the correct remote directory to put your files in, to upload your files to the server you need to drag-and-drop them from the left pane to the right pane.Are they really online?So far, so good, but are the files really online? You can double-check by going back to your website (e.g. http://demozilla.examplehostingprovider.net/) in your browser: And our website is live!RsyncRsync is a local-to-remote file synchronizing tool, which is generally available on most Unix-based systems (like macOS and Linux), but Windows versions exist too. It is seen as a more advanced tool than SFTP, because by default it is used on the command line. A basic command looks like this: rsync [-options] SOURCE user@x.x.x.x:DESTINATION -options is a dash followed by a one or more letters, for example -v for verbose error messages, and -b to make backups. You can see the full list at the rsync man page (search for ""Options summary""). SOURCE is the path to the local file or directory that you want to copy files over from. user@ is the credentials of the user on the remote server you want to copy files over to. x.x.x.x is the IP address of the remote server. DESTINATION is the path to the location you want to copy your directory or files to on the remote server. You'd need to get such details from your hosting provider. For more information and further examples, see How to Use Rsync to Copy/Sync Files Between Servers. Of course, it is a good idea to use a secure connection, as with FTP. In the case of Rsync, you specify SSH details to make the connection over SSH, using the -e option. For example: rsync [-options] -e ""ssh [SSH DETAILS GO HERE]"" SOURCE user@x.x.x.x:DESTINATION You can find more details of what is needed at How To Copy Files With Rsync Over SSH.Rsync GUI toolsGUI tools are available for Rsync (for those who are not as comfortable using the command line). Acrosync is one such tool, and it is available for Windows and macOS. Again, you would have to get the connection credentials from your hosting provider, but this way you'd have a GUI to enter them in.GitHubGitHub allows you to publish websites via GitHub pages (gh-pages). We've covered the basics of using this in the Publishing your website article from our Getting started with the Web guide, so we aren't going to repeat it all here. However, it is worth knowing that you can also host a website on GitHub, but use a custom domain with it. See Using a custom domain with GitHub Pages for a detailed guide.Other methods to upload filesThe FTP protocol is one well-known method for publishing a website, but not the only one. Here are a few other possibilities: Web interfaces. An HTML interface acting as front-end for a remote file upload service. Provided by your hosting service. WebDAV. An extension of the HTTP protocol to allow more advanced file management. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 23, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
39,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip. CanvasRenderingContext2D: clip() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2Dclip()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip() closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: clip() method The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path into the current clipping region. The previous clipping region, if any, is intersected with the current or given path to create the new clipping region.  In the image below, the red outline represents a clipping region shaped like a star. Only those parts of the checkerboard pattern that are within the clipping region get drawn.  Note: Be aware that the clipping region is only constructed from  shapes added to the path. It doesn't work with shape primitives drawn directly to the  canvas, such as fillRect().  Instead, you'd have to use rect() to  add a rectangular shape to the path before calling clip(). Syntaxclip() clip(path) clip(fillRule) clip(path, fillRule) Parameters fillRule   The algorithm by which to determine if a point is inside or outside the clipping  region. Possible values:  nonzero    The non-zero winding rule.   Default rule.   evenodd The even-odd winding rule. path A Path2D path to use as the clipping region. Return valueNone (undefined).ExamplesA simple clipping region This example uses the clip() method to create a clipping region according to the shape of a circular arc. Two rectangles are then drawn; only those parts within the clipping region are rendered. HTML <canvas id=""canvas""></canvas> JavaScript The clipping region is a full circle, with its center at (100, 75), and a radius of 50. const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Create circular clipping region ctx.beginPath(); ctx.arc(100, 75, 50, 0, Math.PI * 2); ctx.clip(); // Draw stuff that gets clipped ctx.fillStyle = ""blue""; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = ""orange""; ctx.fillRect(0, 0, 100, 100); ResultSpecifying a path and a fillRule This example saves two rectangles to a Path2D object, which is then made the current clipping region using the clip() method. The ""evenodd"" rule creates a hole where the clipping rectangles intersect; by default (with the ""nonzero"" rule), there would be no hole. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Create clipping path let region = new Path2D(); region.rect(80, 10, 20, 130); region.rect(40, 50, 100, 50); ctx.clip(region, ""evenodd""); // Draw stuff that gets clipped ctx.fillStyle = ""blue""; ctx.fillRect(0, 0, canvas.width, canvas.height); ResultCreating a complex clipping region This example uses two paths, a rectangle and a square to create a complex clipping region. The clip() method is called twice, first to set the current clipping region to the circle using a Path2D object, then again to intersect the circle clipping region with a square. The final clipping region is a shape representing the intersection of the circle and the square. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Create two clipping paths let circlePath = new Path2D(); circlePath.arc(150, 75, 75, 0, 2 * Math.PI); let squarePath = new Path2D(); squarePath.rect(85, 10, 130, 130); // Set the clip to the circle ctx.clip(circlePath); // Set the clip to be the intersection of the circle and the square ctx.clip(squarePath); // Draw stuff that gets clipped ctx.fillStyle = ""blue""; ctx.fillRect(0, 0, canvas.width, canvas.height); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-clip-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
40,developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple/requests,"developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple/requests. Cross-Origin Resource Sharing (CORS) - HTTP | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTTPCross-Origin Resource Sharing (CORS)Article ActionsEnglish (US)In this articleWhat requests use CORS?Functional overviewExamples of access control scenariosThe HTTP response headersThe HTTP request headersSpecificationsBrowser compatibilitySee also HTTP Guides Resources and URIs Identifying resources on the Web Data URLs Introduction to MIME types Common MIME types Choosing between www and non-www URLs  HTTP guide Basics of HTTP Overview of HTTP Evolution of HTTP HTTP Messages A typical HTTP session Connection management in HTTP/1.x Protocol upgrade mechanism  HTTP security Content Security Policy (CSP) HTTP Strict Transport Security (HSTS) Cookie security X-Content-Type-Options X-Frame-Options X-XSS-Protection Mozilla web security guidelines Mozilla Observatory HTTP access control (CORS) HTTP authentication HTTP caching HTTP compression HTTP conditional requests HTTP content negotiation HTTP cookies HTTP range requests HTTP redirects HTTP specifications Permissions Policy References HTTP headers AcceptAccept-CHAccept-CH-Lifetime Non-standard Deprecated Accept-CharsetAccept-EncodingAccept-LanguageAccept-PatchAccept-PostAccept-RangesAccess-Control-Allow-CredentialsAccess-Control-Allow-HeadersAccess-Control-Allow-MethodsAccess-Control-Allow-OriginAccess-Control-Expose-HeadersAccess-Control-Max-AgeAccess-Control-Request-HeadersAccess-Control-Request-MethodAgeAllowAlt-SvcAuthorizationCache-ControlClear-Site-DataConnectionContent-DispositionContent-DPR Non-standard Deprecated Content-EncodingContent-LanguageContent-LengthContent-LocationContent-RangeContent-Security-PolicyContent-Security-Policy-Report-OnlyContent-TypeCookieCritical-CH Experimental Cross-Origin-Embedder-PolicyCross-Origin-Opener-PolicyCross-Origin-Resource-PolicyDateDevice-Memory Experimental Digest Deprecated DNT Deprecated Downlink Experimental DPR Non-standard Deprecated Early-Data Experimental ECT Experimental ETagExpectExpect-CTExpiresForwardedFromHostIf-MatchIf-Modified-SinceIf-None-MatchIf-RangeIf-Unmodified-SinceKeep-AliveLarge-Allocation Non-standard Deprecated Last-ModifiedLinkLocationMax-ForwardsNEL Experimental OriginPermissions-PolicyPragma Deprecated Proxy-AuthenticateProxy-AuthorizationRangeRefererReferrer-PolicyRetry-AfterRTT Experimental Save-Data Experimental Sec-CH-Prefers-Reduced-Motion Experimental Sec-CH-UA Experimental Sec-CH-UA-Arch Experimental Sec-CH-UA-Bitness Experimental Sec-CH-UA-Full-Version Deprecated Sec-CH-UA-Full-Version-List Experimental Sec-CH-UA-Mobile Experimental Sec-CH-UA-Model Experimental Sec-CH-UA-Platform Experimental Sec-CH-UA-Platform-Version Experimental Sec-Fetch-DestSec-Fetch-ModeSec-Fetch-SiteSec-Fetch-UserSec-GPC Experimental Sec-WebSocket-AcceptServerServer-TimingService-Worker-Navigation-PreloadSet-CookieSourceMapStrict-Transport-SecurityTETiming-Allow-OriginTk Deprecated TrailerTransfer-EncodingUpgradeUpgrade-Insecure-RequestsUser-AgentVaryViaViewport-Width Non-standard Deprecated Want-Digest Deprecated Warning Deprecated Width Non-standard Deprecated WWW-AuthenticateX-Content-Type-OptionsX-DNS-Prefetch-Control Non-standard X-Forwarded-For Non-standard X-Forwarded-Host Non-standard X-Forwarded-Proto Non-standard X-Frame-OptionsX-XSS-Protection Non-standard  HTTP request methods CONNECTDELETEGETHEADOPTIONSPATCHPOSTPUTTRACE  HTTP response status codes 100 Continue101 Switching Protocols102 Processing103 Early Hints Experimental 200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content207 Multi-Status208 Already Reported226 IM Used300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified307 Temporary Redirect308 Permanent Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Timeout409 Conflict410 Gone411 Length Required412 Precondition Failed413 Content Too Large414 URI Too Long415 Unsupported Media Type416 Range Not Satisfiable417 Expectation Failed418 I'm a teapot421 Misdirected Request422 Unprocessable Content423 Locked424 Failed Dependency425 Too Early426 Upgrade Required428 Precondition Required429 Too Many Requests431 Request Header Fields Too Large451 Unavailable For Legal Reasons500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Timeout505 HTTP Version Not Supported506 Variant Also Negotiates507 Insufficient Storage508 Loop Detected510 Not Extended511 Network Authentication Required  CSP directives CSP source valuesCSP: base-uriCSP: block-all-mixed-content Deprecated CSP: child-srcCSP: connect-srcCSP: default-srcCSP: font-srcCSP: form-actionCSP: frame-ancestorsCSP: frame-srcCSP: img-srcCSP: manifest-srcCSP: media-srcCSP: object-srcCSP: plugin-types Non-standard Deprecated CSP: prefetch-src Non-standard Deprecated CSP: referrer Non-standard Deprecated CSP: report-toCSP: report-uri Deprecated CSP: require-trusted-types-for Experimental CSP: sandboxCSP: script-srcCSP: script-src-attrCSP: script-src-elemCSP: style-srcCSP: style-src-attrCSP: style-src-elemCSP: trusted-types Experimental CSP: upgrade-insecure-requestsCSP: worker-src  CORS errors Reason: CORS disabledReason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'Reason: CORS header 'Access-Control-Allow-Origin' missingReason: CORS header 'Origin' cannot be addedReason: CORS preflight channel did not succeedReason: CORS request did not succeedReason: CORS request external redirect not allowedReason: CORS request not HTTPReason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channelReason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed  Permissions-Policy directives Permissions-Policy: accelerometer Experimental Permissions-Policy: ambient-light-sensor Experimental Permissions-Policy: autoplay Experimental Permissions-Policy: battery Experimental Permissions-Policy: cameraPermissions-Policy: display-capturePermissions-Policy: document-domain Experimental Permissions-Policy: encrypted-media Experimental Permissions-Policy: execution-while-not-rendered Experimental Permissions-Policy: execution-while-out-of-viewport Experimental Permissions-Policy: fullscreenPermissions-Policy: gamepad Experimental Permissions-Policy: geolocationPermissions-Policy: gyroscope Experimental Permissions-Policy: hid Experimental Permissions-Policy: identity-credentials-get Experimental Permissions-Policy: idle-detection Experimental Permissions-Policy: local-fonts Experimental Permissions-Policy: magnetometer Experimental Permissions-Policy: microphonePermissions-Policy: midi Experimental Permissions-Policy: payment Experimental Permissions-Policy: picture-in-picture Experimental Permissions-Policy: publickey-credentials-create Experimental Permissions-Policy: publickey-credentials-get Experimental Permissions-Policy: screen-wake-lock Experimental Permissions-Policy: serial Experimental Permissions-Policy: speaker-selection Experimental Permissions-Policy: storage-access Experimental Permissions-Policy: usb Experimental Permissions-Policy: web-sharePermissions-Policy: xr-spatial-tracking Experimental  In this articleWhat requests use CORS?Functional overviewExamples of access control scenariosThe HTTP response headersThe HTTP request headersSpecificationsBrowser compatibilitySee alsoCross-Origin Resource Sharing (CORS)Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. CORS also relies on a mechanism by which browsers make a ""preflight"" request to the server hosting the cross-origin resource, in order to check that the server will permit the actual request. In that preflight, the browser sends headers that indicate the HTTP method and headers that will be used in the actual request. An example of a cross-origin request: the front-end JavaScript code served from https://domain-a.com uses XMLHttpRequest to make a request for https://domain-b.com/data.json. For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts. For example, XMLHttpRequest and the Fetch API follow the same-origin policy. This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers. The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers. Modern browsers use CORS in APIs such as XMLHttpRequest or Fetch to mitigate the risks of cross-origin HTTP requests.What requests use CORS?This cross-origin sharing standard can enable cross-origin HTTP requests for: Invocations of the XMLHttpRequest or Fetch APIs, as discussed above. Web Fonts (for cross-domain font usage in @font-face within CSS), so that servers can deploy TrueType fonts that can only be loaded cross-origin and used by websites that are permitted to do so. WebGL textures. Images/video frames drawn to a canvas using drawImage(). CSS Shapes from images. This is a general article about Cross-Origin Resource Sharing and includes a discussion of the necessary HTTP headers.Functional overviewThe Cross-Origin Resource Sharing standard works by adding new HTTP headers that let servers describe which origins are permitted to read that information from a web browser. Additionally, for HTTP request methods that can cause side-effects on server data (in particular, HTTP methods other than GET, or POST with certain MIME types), the specification mandates that browsers ""preflight"" the request, soliciting supported methods from the server with the HTTP OPTIONS request method, and then, upon ""approval"" from the server, sending the actual request. Servers can also inform clients whether ""credentials"" (such as Cookies and HTTP Authentication) should be sent with requests. CORS failures result in errors but for security reasons, specifics about the error are not available to JavaScript. All the code knows is that an error occurred. The only way to determine what specifically went wrong is to look at the browser's console for details. Subsequent sections discuss scenarios, as well as provide a breakdown of the HTTP headers used.Examples of access control scenariosWe present three scenarios that demonstrate how Cross-Origin Resource Sharing works. All these examples use XMLHttpRequest, which can make cross-origin requests in any supporting browser.Simple requestsSome requests don't trigger a CORS preflight. Those are called simple requests from the obsolete CORS spec, though the Fetch spec (which now defines CORS) doesn't use that term. The motivation is that the <form> element from HTML 4.0 (which predates cross-site XMLHttpRequest and fetch) can submit simple requests to any origin, so anyone writing a server must already be protecting against cross-site request forgery (CSRF). Under this assumption, the server doesn't have to opt-in (by responding to a preflight request) to receive any request that looks like a form submission, since the threat of CSRF is no worse than that of form submission. However, the server still must opt-in using Access-Control-Allow-Origin to share the response with the script. A simple request is one that meets all the following conditions: One of the allowed methods:  GET HEAD POST Apart from the headers automatically set by the user agent (for example, Connection, User-Agent, or the other headers defined in the Fetch spec as a forbidden header name), the only headers which are allowed to be manually set are those which the Fetch spec defines as a CORS-safelisted request-header, which are:  Accept Accept-Language Content-Language Content-Type (please note the additional requirements below) Range (only with a simple range header value; e.g., bytes=256- or bytes=127-255)  Note: Firefox has not implemented Range as a safelisted request-header yet. See bug 1733981. The only type/subtype combinations allowed for the media type specified in the Content-Type header are:  application/x-www-form-urlencoded multipart/form-data text/plain If the request is made using an XMLHttpRequest object, no event listeners are registered on the object returned by the XMLHttpRequest.upload property used in the request; that is, given an XMLHttpRequest instance xhr, no code has called xhr.upload.addEventListener() to add an event listener to monitor the upload. No ReadableStream object is used in the request. Note: WebKit Nightly and Safari Technology Preview place additional restrictions on the values allowed in the Accept, Accept-Language, and Content-Language headers. If any of those headers have ""nonstandard"" values, WebKit/Safari does not consider the request to be a ""simple request"". What values WebKit/Safari consider ""nonstandard"" is not documented, except in the following WebKit bugs: Require preflight for non-standard CORS-safelisted request headers Accept, Accept-Language, and Content-Language Allow commas in Accept, Accept-Language, and Content-Language request headers for simple CORS Switch to a blacklist model for restricted Accept headers in simple CORS requests No other browsers implement these extra restrictions because they're not part of the spec. For example, suppose web content at https://foo.example wishes to invoke content on domain https://bar.other. Code of this sort might be used in JavaScript deployed on foo.example: const xhr = new XMLHttpRequest(); const url = ""https://bar.other/resources/public-data/""; xhr.open(""GET"", url); xhr.onreadystatechange = someHandler; xhr.send(); This operation performs a simple exchange between the client and the server, using CORS headers to handle the privileges: Let's look at what the browser will send to the server in this case: GET /resources/public-data/ HTTP/1.1 Host: bar.other User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Connection: keep-alive Origin: https://foo.example The request header of note is Origin, which shows that the invocation is coming from https://foo.example. Now let's see how the server responds: HTTP/1.1 200 OK Date: Mon, 01 Dec 2008 00:23:53 GMT Server: Apache/2 Access-Control-Allow-Origin: * Keep-Alive: timeout=2, max=100 Connection: Keep-Alive Transfer-Encoding: chunked Content-Type: application/xml [â¦XML Dataâ¦] In response, the server returns a Access-Control-Allow-Origin header with Access-Control-Allow-Origin: *, which means that the resource can be accessed by any origin. Access-Control-Allow-Origin: * This pattern of the Origin and Access-Control-Allow-Origin headers is the simplest use of the access control protocol. If the resource owners at https://bar.other wished to restrict access to the resource to requests only from https://foo.example (i.e., no domain other than https://foo.example can access the resource in a cross-origin manner), they would send: Access-Control-Allow-Origin: https://foo.example Note: When responding to a credentialed requests request, the server must specify an origin in the value of the Access-Control-Allow-Origin header, instead of specifying the ""*"" wildcard. Preflighted requestsUnlike simple requests, for ""preflighted"" requests the browser first sends an HTTP request using the OPTIONS method to the resource on the other origin, in order to determine if the actual request is safe to send. Such cross-origin requests are preflighted since they may have implications for user data. The following is an example of a request that will be preflighted: const xhr = new XMLHttpRequest(); xhr.open(""POST"", ""https://bar.other/doc""); xhr.setRequestHeader(""X-PINGOTHER"", ""pingpong""); xhr.setRequestHeader(""Content-Type"", ""text/xml""); xhr.onreadystatechange = handler; xhr.send(""<person><name>Arun</name></person>""); The example above creates an XML body to send with the POST request. Also, a non-standard HTTP X-PINGOTHER request header is set. Such headers are not part of HTTP/1.1, but are generally useful to web applications. Since the request uses a Content-Type of text/xml, and since a custom header is set, this request is preflighted.  Note: As described below, the actual POST request does not include the Access-Control-Request-* headers; they are needed only for the OPTIONS request. Let's look at the full exchange between client and server. The first exchange is the preflight request/response: OPTIONS /doc HTTP/1.1 Host: bar.other User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Connection: keep-alive Origin: https://foo.example Access-Control-Request-Method: POST Access-Control-Request-Headers: X-PINGOTHER, Content-Type HTTP/1.1 204 No Content Date: Mon, 01 Dec 2008 01:15:39 GMT Server: Apache/2 Access-Control-Allow-Origin: https://foo.example Access-Control-Allow-Methods: POST, GET, OPTIONS Access-Control-Allow-Headers: X-PINGOTHER, Content-Type Access-Control-Max-Age: 86400 Vary: Accept-Encoding, Origin Keep-Alive: timeout=2, max=100 Connection: Keep-Alive Lines 1 - 10 above represent the preflight request with the OPTIONS method. The browser determines that it needs to send this based on the request parameters that the JavaScript code snippet above was using, so that the server can respond whether it is acceptable to send the request with the actual request parameters. OPTIONS is an HTTP/1.1 method that is used to determine further information from servers, and is a safe method, meaning that it can't be used to change the resource. Note that along with the OPTIONS request, two other request headers are sent (lines 9 and 10 respectively): Access-Control-Request-Method: POST Access-Control-Request-Headers: X-PINGOTHER, Content-Type The Access-Control-Request-Method header notifies the server as part of a preflight request that when the actual request is sent, it will do so with a POST request method. The Access-Control-Request-Headers header notifies the server that when the actual request is sent, it will do so with X-PINGOTHER and Content-Type custom headers. Now the server has an opportunity to determine whether it can accept a request under these conditions. Lines 12 - 21 above are the response that the server returns, which indicate that the request method (POST) and request headers (X-PINGOTHER) are acceptable. Let's have a closer look at lines 15-18: Access-Control-Allow-Origin: https://foo.example Access-Control-Allow-Methods: POST, GET, OPTIONS Access-Control-Allow-Headers: X-PINGOTHER, Content-Type Access-Control-Max-Age: 86400 The server responds with Access-Control-Allow-Origin: https://foo.example, restricting access to the requesting origin domain only. It also responds with Access-Control-Allow-Methods, which says that POST and GET are valid methods to query the resource in question (this header is similar to the Allow response header, but used strictly within the context of access control). The server also sends Access-Control-Allow-Headers with a value of ""X-PINGOTHER, Content-Type"", confirming that these are permitted headers to be used with the actual request. Like Access-Control-Allow-Methods, Access-Control-Allow-Headers is a comma-separated list of acceptable headers. Finally, Access-Control-Max-Age gives the value in seconds for how long the response to the preflight request can be cached without sending another preflight request. The default value is 5 seconds. In the present case, the max age is 86400 seconds (= 24 hours). Note that each browser has a maximum internal value that takes precedence when the Access-Control-Max-Age exceeds it. Once the preflight request is complete, the real request is sent: POST /doc HTTP/1.1 Host: bar.other User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Connection: keep-alive X-PINGOTHER: pingpong Content-Type: text/xml; charset=UTF-8 Referer: https://foo.example/examples/preflightInvocation.html Content-Length: 55 Origin: https://foo.example Pragma: no-cache Cache-Control: no-cache <person><name>Arun</name></person> HTTP/1.1 200 OK Date: Mon, 01 Dec 2008 01:15:40 GMT Server: Apache/2 Access-Control-Allow-Origin: https://foo.example Vary: Accept-Encoding, Origin Content-Encoding: gzip Content-Length: 235 Keep-Alive: timeout=2, max=99 Connection: Keep-Alive Content-Type: text/plain [Some XML payload] Preflighted requests and redirects Not all browsers currently support following redirects after a preflighted request. If a redirect occurs after such a request, some browsers currently will report an error message such as the following:  The request was redirected to 'https://example.com/foo', which is disallowed for cross-origin requests that require preflight.  Request requires preflight, which is disallowed to follow cross-origin redirects.  The CORS protocol originally required that behavior but was subsequently changed to no longer require it. However, not all browsers have implemented the change, and thus still exhibit the originally required behavior. Until browsers catch up with the spec, you may be able to work around this limitation by doing one or both of the following: Change the server-side behavior to avoid the preflight and/or to avoid the redirect Change the request such that it is a simple request that doesn't cause a preflight If that's not possible, then another way is to: Make a simple request (using Response.url for the Fetch API, or XMLHttpRequest.responseURL) to determine what URL the real preflighted request would end up at. Make another request (the real request) using the URL you obtained from Response.url or XMLHttpRequest.responseURL in the first step. However, if the request is one that triggers a preflight due to the presence of the Authorization header in the request, you won't be able to work around the limitation using the steps above. And you won't be able to work around it at all unless you have control over the server the request is being made to.Requests with credentials Note: When making credentialed requests to a different domain, third-party cookie policies will still apply. The policy is always enforced regardless of any setup on the server and the client as described in this chapter. The most interesting capability exposed by both XMLHttpRequest or Fetch and CORS is the ability to make ""credentialed"" requests that are aware of HTTP cookies and HTTP Authentication information. By default, in cross-origin XMLHttpRequest or Fetch invocations, browsers will not send credentials. A specific flag has to be set on the XMLHttpRequest object or the Request constructor when it is invoked. In this example, content originally loaded from https://foo.example makes a simple GET request to a resource on https://bar.other which sets Cookies. Content on foo.example might contain JavaScript like this: const invocation = new XMLHttpRequest(); const url = ""https://bar.other/resources/credentialed-content/""; function callOtherDomain() { if (invocation) {  invocation.open(""GET"", url, true);  invocation.withCredentials = true;  invocation.onreadystatechange = handler;  invocation.send(); } } Line 7 shows the flag on XMLHttpRequest that has to be set in order to make the invocation with Cookies, namely the withCredentials boolean value. By default, the invocation is made without Cookies. Since this is a simple GET request, it is not preflighted but the browser will reject any response that does not have the Access-Control-Allow-Credentials: true header, and not make the response available to the invoking web content. Here is a sample exchange between client and server: GET /resources/credentialed-content/ HTTP/1.1 Host: bar.other User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip,deflate Connection: keep-alive Referer: https://foo.example/examples/credential.html Origin: https://foo.example Cookie: pageAccess=2 HTTP/1.1 200 OK Date: Mon, 01 Dec 2008 01:34:52 GMT Server: Apache/2 Access-Control-Allow-Origin: https://foo.example Access-Control-Allow-Credentials: true Cache-Control: no-cache Pragma: no-cache Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT Vary: Accept-Encoding, Origin Content-Encoding: gzip Content-Length: 106 Keep-Alive: timeout=2, max=100 Connection: Keep-Alive Content-Type: text/plain [text/plain payload] Although line 10 contains the Cookie destined for the content on https://bar.other, if bar.other did not respond with an Access-Control-Allow-Credentials: true (line 16), the response would be ignored and not made available to the web content. Preflight requests and credentials CORS-preflight requests must never include credentials. The response to a preflight request must specify Access-Control-Allow-Credentials: true to indicate that the actual request can be made with credentials. Note: Some enterprise authentication services require that TLS client certificates be sent in preflight requests, in contravention of the Fetch specification. Firefox 87 allows this non-compliant behavior to be enabled by setting the preference: network.cors_preflight.allow_client_cert to true (Firefox bug 1511151). Chromium-based browsers currently always send TLS client certificates in CORS preflight requests (Chrome bug 775438). Credentialed requests and wildcards When responding to a credentialed request: The server must not specify the ""*"" wildcard for the Access-Control-Allow-Origin response-header value, but must instead specify an explicit origin; for example: Access-Control-Allow-Origin: https://example.com The server must not specify the ""*"" wildcard for the Access-Control-Allow-Headers response-header value, but must instead specify an explicit list of header names; for example, Access-Control-Allow-Headers: X-PINGOTHER, Content-Type The server must not specify the ""*"" wildcard for the Access-Control-Allow-Methods response-header value, but must instead specify an explicit list of method names; for example, Access-Control-Allow-Methods: POST, GET The server must not specify the ""*"" wildcard for the Access-Control-Expose-Headers response-header value, but must instead specify an explicit list of header names; for example, Access-Control-Expose-Headers: Content-Encoding, Kuma-Revision If a request includes a credential (most commonly a Cookie header) and the response includes an Access-Control-Allow-Origin: * header (that is, with the wildcard), the browser will block access to the response, and report a CORS error in the devtools console. But if a request does include a credential (like the Cookie header) and the response includes an actual origin rather than the wildcard (like, for example, Access-Control-Allow-Origin: https://example.com), then the browser will allow access to the response from the specified origin. Also note that any Set-Cookie response header in a response would not set a cookie if the Access-Control-Allow-Origin value in that response is the ""*"" wildcard rather an actual origin. Third-party cookies Note that cookies set in CORS responses are subject to normal third-party cookie policies. In the example above, the page is loaded from foo.example but the cookie on line 19 is sent by bar.other, and would thus not be saved if the user's browser is configured to reject all third-party cookies. Cookie in the request (line 10) may also be suppressed in normal third-party cookie policies. The enforced cookie policy may therefore nullify the capability described in this chapter, effectively preventing you from making credentialed requests whatsoever. Cookie policy around the SameSite attribute would apply.The HTTP response headersThis section lists the HTTP response headers that servers return for access control requests as defined by the Cross-Origin Resource Sharing specification. The previous section gives an overview of these in action.Access-Control-Allow-OriginA returned resource may have one Access-Control-Allow-Origin header with the following syntax: Access-Control-Allow-Origin: <origin> | * Access-Control-Allow-Origin specifies either a single origin which tells browsers to allow that origin to access the resource; or else â for requests without credentials â the ""*"" wildcard tells browsers to allow any origin to access the resource. For example, to allow code from the origin https://mozilla.org to access the resource, you can specify: Access-Control-Allow-Origin: https://mozilla.org Vary: Origin If the server specifies a single origin (that may dynamically change based on the requesting origin as part of an allowlist) rather than the ""*"" wildcard, then the server should also include Origin in the Vary response header to indicate to clients that server responses will differ based on the value of the Origin request header.Access-Control-Expose-HeadersThe Access-Control-Expose-Headers header adds the specified headers to the allowlist that JavaScript (such as getResponseHeader()) in browsers is allowed to access. Access-Control-Expose-Headers: <header-name>[, <header-name>]* For example, the following: Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header â¦would allow the X-My-Custom-Header and X-Another-Custom-Header headers to be exposed to the browser.Access-Control-Max-AgeThe Access-Control-Max-Age header indicates how long the results of a preflight request can be cached. For an example of a preflight request, see the above examples. Access-Control-Max-Age: <delta-seconds> The delta-seconds parameter indicates the number of seconds the results can be cached.Access-Control-Allow-CredentialsThe Access-Control-Allow-Credentials header indicates whether or not the response to the request can be exposed when the credentials flag is true. When used as part of a response to a preflight request, this indicates whether or not the actual request can be made using credentials. Note that simple GET requests are not preflighted, and so if a request is made for a resource with credentials, if this header is not returned with the resource, the response is ignored by the browser and not returned to web content. Access-Control-Allow-Credentials: true Credentialed requests are discussed above.Access-Control-Allow-MethodsThe Access-Control-Allow-Methods header specifies the method or methods allowed when accessing the resource. This is used in response to a preflight request. The conditions under which a request is preflighted are discussed above. Access-Control-Allow-Methods: <method>[, <method>]* An example of a preflight request is given above, including an example which sends this header to the browser.Access-Control-Allow-HeadersThe Access-Control-Allow-Headers header is used in response to a preflight request to indicate which HTTP headers can be used when making the actual request. This header is the server side response to the browser's Access-Control-Request-Headers header. Access-Control-Allow-Headers: <header-name>[, <header-name>]* The HTTP request headersThis section lists headers that clients may use when issuing HTTP requests in order to make use of the cross-origin sharing feature. Note that these headers are set for you when making invocations to servers. Developers using cross-origin XMLHttpRequest capability do not have to set any cross-origin sharing request headers programmatically.OriginThe Origin header indicates the origin of the cross-origin access request or preflight request. Origin: <origin> The origin is a URL indicating the server from which the request is initiated. It does not include any path information, only the server name. Note: The origin value can be null. Note that in any access control request, the Origin header is always sent.Access-Control-Request-MethodThe Access-Control-Request-Method is used when issuing a preflight request to let the server know what HTTP method will be used when the actual request is made. Access-Control-Request-Method: <method> Examples of this usage can be found above.Access-Control-Request-HeadersThe Access-Control-Request-Headers header is used when issuing a preflight request to let the server know what HTTP headers will be used when the actual request is made (such as with setRequestHeader()). This browser-side header will be answered by the complementary server-side header of Access-Control-Allow-Headers. Access-Control-Request-Headers: <field-name>[, <field-name>]* Examples of this usage can be found above.SpecificationsSpecificationFetch Standard # http-access-control-allow-originBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also CORS errors Enable CORS: I want to add CORS support to my server XMLHttpRequest Fetch API Will it CORS? - an interactive CORS explainer & generator How to run Chrome browser without CORS Using CORS with All (Modern) Browsers Stack Overflow answer with ""how to"" info for dealing with common problems:  How to avoid the CORS preflight How to use a CORS proxy to get around ""No Access-Control-Allow-Origin header"" How to fix ""Access-Control-Allow-Origin header must not be the wildcard"" Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
41,developer.mozilla.org/en-US/docs/Web/API/Event/Event,"developer.mozilla.org/en-US/docs/Web/API/Event/Event. Event: Event() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsEventEvent()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelEventConstructorEvent() Instance propertiesbubblescancelablecancelBubble Deprecated composedcurrentTargetdefaultPreventedeventPhaseexplicitOriginalTarget Non-standard isTrustedoriginalTarget Non-standard returnValue Deprecated srcElement Deprecated targettimeStamptypeInstance methodscomposedPath()initEvent() Deprecated preventDefault()stopImmediatePropagation()stopPropagation()Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoEvent: Event() constructorThe Event() constructor creates a new Event object. An event created in this way is called a synthetic event, as opposed to an event fired by the browser, and can be dispatched by a script.Syntaxnew Event(type) new Event(type, options) Values type A string with the name of the event. options Optional An object with the following properties: bubbles Optional    A boolean value indicating whether the event bubbles. The default is   false.   cancelable Optional    A boolean value indicating whether the event can be cancelled. The   default is false.   composed Optional    A boolean value indicating whether the event will trigger listeners   outside of a shadow root (see Event.composed for more details). The   default is false.    Return valueA new Event object.Example// create a look event that bubbles up and cannot be canceled const evt = new Event(""look"", { bubbles: true, cancelable: false }); document.dispatchEvent(evt); // event can be dispatched from any element, not only the document myDiv.dispatchEvent(evt); SpecificationsSpecificationDOM Standard # ref-for-dom-event-eventBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Event EventTarget.dispatchEvent() Creating and triggering events Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
42,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState. HTMLMediaElement: networkState property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementnetworkStateArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkState pausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: networkState property The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network. ValueAn unsigned short. Possible values are: Constant Value Description  NETWORK_EMPTY 0 There is no data yet. Also, readyState is HAVE_NOTHING. NETWORK_IDLE 1 HTMLMediaElement is active and has selected a resource, but is not using the network. NETWORK_LOADING 2 The browser is downloading HTMLMediaElement data. NETWORK_NO_SOURCE 3 No HTMLMediaElement src found. Examples This example will listen for the audio element to begin playing and then check if it is still loading data. <audio id=""example"" preload=""auto""> <source src=""sound.ogg"" type=""audio/ogg"" /> </audio> const obj = document.getElementById(""example""); obj.addEventListener(""playing"", () => { if (obj.networkState === 2) {  // Still loadingâ¦ } }); SpecificationsSpecificationHTML Standard # dom-media-networkstate-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.networkState property Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
43,developer.mozilla.org/en-US/docs/Web/API/Event/Comparison/of/Event/Targets,"developer.mozilla.org/en-US/docs/Web/API/Event/Comparison/of/Event/Targets. Comparison of Event Targets - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsEventComparison of Event TargetsArticle ActionsEnglish (US)EventConstructorEvent()Instance propertiesbubblescancelablecancelBubble Deprecated composedcurrentTargetdefaultPreventedeventPhaseexplicitOriginalTarget Non-standard isTrustedoriginalTarget Non-standard returnValue Deprecated srcElement Deprecated targettimeStamptypeInstance methodscomposedPath()initEvent() Deprecated preventDefault()stopImmediatePropagation()stopPropagation()Comparison of Event TargetsIt's easy to get confused about which event target to examine when writing an event handler. This article should clarify the use of the target properties. There are five targets to consider: Property Defined in Purpose  event.target DOM Event Interface   The DOM element on the left-hand side of the call that triggered this   event.   event.currentTarget DOM Event Interface   The   EventTarget   whose   EventListeners   are currently being processed. As the event capturing and bubbling   occurs, this value changes.   event.relatedTarget DOM MouseEvent Interface Identifies a secondary target for the event. event.explicitOriginalTarget Event.webidl Non-standard If the event was retargeted for   some reason other than an anonymous boundary crossing, this will be set   to the target before the retargeting occurs. For example, mouse events   are retargeted to their parent node when they happen over text nodes   ([Webkit bug 185889](https://bugzil.la/185889)), and in that case .target will   show the parent and .explicitOriginalTarget will show the   text node.Unlike .originalTarget,   .explicitOriginalTarget will never contain anonymous   content.   event.originalTarget Event.webidl Non-standard The original target of the event,   before any retargetings. See   Anonymous Content#Event_Flow_and_Targeting   for details.   event.composedTarget Event.webidl Non-standard The original non-native target of   the event before composition from Shadow DOM.   Use of explicitOriginalTarget and originalTarget Note: These properties are only available in Mozilla-based browsers. Examples<!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""utf-8"" />  <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"" />  <title>Comparison of Event Targets</title>  <style>  table {   border-collapse: collapse;   height: 150px;   width: 100%;  }  td {   border: 1px solid #ccc;   font-weight: bold;   padding: 5px;   min-height: 30px;  }  .standard {   background-color: #99ff99;  }  .non-standard {   background-color: #902d37;  }  </style> </head> <body>  <table>  <thead>   <tr>   <td class=""standard"">    Original target dispatching the event <small>event.target</small>   </td>   <td class=""standard"">    Target who's event listener is being processed    <small>event.currentTarget</small>   </td>   <td class=""standard"">    Identify other element (if any) involved in the event    <small>event.relatedTarget</small>   </td>   <td class=""non-standard"">    If there was a retargeting of the event for some reason    <small> event.explicitOriginalTarget</small> contains the target    before retargeting (never contains anonymous targets)   </td>   <td class=""non-standard"">    If there was a retargeting of the event for some reason    <small> event.originalTarget</small> contains the target before    retargeting (may contain anonymous targets)   </td>   </tr>  </thead>  <tr>   <td id=""target""></td>   <td id=""currentTarget""></td>   <td id=""relatedTarget""></td>   <td id=""explicitOriginalTarget""></td>   <td id=""originalTarget""></td>  </tr>  </table>  <p>  Clicking on the text will show the difference between  explicitOriginalTarget, originalTarget, and target  </p>  <script>  function handleClicks(e) {   document.getElementById(""target"").innerHTML = e.target;   document.getElementById(""currentTarget"").innerHTML = e.currentTarget;   document.getElementById(""relatedTarget"").innerHTML = e.relatedTarget;   document.getElementById(""explicitOriginalTarget"").innerHTML =   e.explicitOriginalTarget;   document.getElementById(""originalTarget"").innerHTML = e.originalTarget;  }  function handleMouseover(e) {   document.getElementById(""target"").innerHTML = e.target;   document.getElementById(""relatedTarget"").innerHTML = e.relatedTarget;  }  document.addEventListener(""click"", handleClicks, false);  document.addEventListener(""mouseover"", handleMouseover, false);  </script> </body> </html> Use of target and relatedTargetThe relatedTarget property for the mouseover event holds the node that the mouse was previously over. For the mouseout event, it holds the node that the mouse moved to. Event type event.target event.relatedTarget  mouseover the EventTarget which the pointing device entered the EventTarget which the pointing device exited mouseout the EventTarget which the pointing device exited the EventTarget which the pointing device entered Example <hbox id=""outer""> <hbox id=""inner""   onmouseover=""dump('mouseover ' + event.relatedTarget.id + ' > ' + event.target.id + ' ');""   onmouseout=""dump('mouseout ' + event.target.id + ' > ' + event.relatedTarget.id + ' ');""   style=""margin: 100px; border: 10px solid black; width: 100px; height: 100px;"" /> </hbox> Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 26, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
44,developer.mozilla.org/en-US/docs/Web/API/Document/Object/Model#svg/interfaces,"developer.mozilla.org/en-US/docs/Web/API/Document/Object/Model#svg/interfaces. Document Object Model (DOM) - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocument Object Model (DOM)Article ActionsEnglish (US)In this articleDOM interfacesHTML DOMSVG interfacesSpecificationsSee alsoDocument Object ModelGuidesIntroduction to the DOMUsing the Document Object ModelTraversing an HTML table with JavaScript and DOM InterfacesLocating DOM elements using selectorsHow to create a DOM treeIntroduction to eventsHow whitespace is handled by HTML, CSS, and in the DOMExamples of web and XML development using the DOMInterfacesAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDocumentDocumentFragmentDocumentTypeDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleDOM interfacesHTML DOMSVG interfacesSpecificationsSee alsoDocument Object Model (DOM)The Document Object Model (DOM) connects web pages to scripts or programming languages by representing the structure of a documentâsuch as the HTML representing a web pageâin memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language. The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects. DOM methods allow programmatic access to the tree. With them, you can change the document's structure, style, or content. Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed. To learn more about what the DOM is and how it represents documents, see our article Introduction to the DOM.DOM interfaces AbortController AbortSignal AbstractRange Attr CDATASection CharacterData Comment CustomEvent Document DocumentFragment DocumentType DOMError Deprecated DOMException DOMImplementation DOMParser DOMPoint DOMPointReadOnly DOMRect DOMTokenList Element Event EventTarget HTMLCollection MutationObserver MutationRecord NamedNodeMap Node NodeFilter NodeIterator NodeList ProcessingInstruction Range StaticRange Text TextDecoder TextEncoder TimeRanges TreeWalker XMLDocument Obsolete DOM interfacesThe Document Object Model has been highly simplified. To achieve this, the following interfaces present in the different DOM level 3 or earlier specifications have been removed. It is uncertain whether some may be reintroduced in the future or not, but for the time being they should be considered obsolete and should be avoided: DOMConfiguration DOMErrorHandler DOMImplementationList DOMImplementationRegistry DOMImplementationSource DOMLocator DOMObject DOMSettableTokenList DOMUserData ElementTraversal Entity EntityReference NameList Notation TypeInfo UserDataHandler HTML DOMA document containing HTML is described using the Document interface, which is extended by the HTML specification to include various HTML-specific features. In particular, the Element interface is enhanced to become HTMLElement and various subclasses, each representing one of (or a family of closely related) elements. The HTML DOM API provides access to various browser features such as tabs and windows, CSS styles and stylesheets, browser history, and so forth. These interfaces are discussed further in the HTML DOM API documentation.SVG interfacesSVG element interfaces SVGAElement SVGAnimationElement SVGAnimateElement SVGAnimateColorElement Deprecated SVGAnimateMotionElement SVGAnimateTransformElement SVGCircleElement SVGClipPathElement SVGComponentTransferFunctionElement SVGCursorElement SVGDefsElement SVGDescElement SVGElement SVGEllipseElement SVGFEBlendElement SVGFEColorMatrixElement SVGFEComponentTransferElement SVGFECompositeElement SVGFEConvolveMatrixElement SVGFEDiffuseLightingElement SVGFEDisplacementMapElement SVGFEDistantLightElement SVGFEDropShadowElement SVGFEFloodElement SVGFEFuncAElement SVGFEFuncBElement SVGFEFuncGElement SVGFEFuncRElement SVGFEGaussianBlurElement SVGFEImageElement SVGFEMergeElement SVGFEMergeNodeElement SVGFEMorphologyElement SVGFEOffsetElement SVGFEPointLightElement SVGFESpecularLightingElement SVGFESpotLightElement SVGFETileElement SVGFETurbulenceElement SVGFilterElement SVGFilterPrimitiveStandardAttributes SVGFontElement Deprecated SVGFontFaceElement Deprecated SVGFontFaceFormatElement Deprecated SVGFontFaceNameElement Deprecated SVGFontFaceSrcElement Deprecated SVGFontFaceUriElement Deprecated SVGForeignObjectElement SVGGElement SVGGeometryElement SVGGlyphElement Deprecated SVGGlyphRefElement Deprecated SVGGradientElement SVGGraphicsElement SVGHatchElement Experimental SVGHatchpathElement Experimental SVGHKernElement Deprecated SVGImageElement SVGLinearGradientElement SVGLineElement SVGMarkerElement Experimental SVGMaskElement SVGMetadataElement SVGMissingGlyphElement Deprecated SVGMPathElement SVGPathElement SVGPatternElement SVGPolylineElement SVGPolygonElement SVGRadialGradientElement SVGRectElement SVGScriptElement SVGSetElement SVGStopElement SVGStyleElement SVGSVGElement SVGSwitchElement SVGSymbolElement SVGTextContentElement SVGTextElement SVGTextPathElement SVGTextPositioningElement SVGTitleElement SVGTRefElement Deprecated SVGTSpanElement SVGUseElement SVGViewElement SVGVKernElement Deprecated SVG data type interfacesHere are the DOM APIs for data types used in the definitions of SVG properties and attributes. Static type SVGAngle SVGColor Deprecated SVGICCColor Deprecated SVGElementInstance SVGElementInstanceList SVGLength SVGLengthList SVGNameList SVGNumber SVGNumberList SVGPaint SVGPathSeg Deprecated SVGPathSegClosePath Deprecated SVGPathSegMovetoAbs Deprecated SVGPathSegMovetoRel Deprecated SVGPathSegLinetoAbs Deprecated SVGPathSegLinetoRel Deprecated SVGPathSegCurvetoCubicAbs Deprecated SVGPathSegCurvetoCubicRel Deprecated SVGPathSegCurvetoQuadraticAbs Deprecated SVGPathSegCurvetoQuadraticRel Deprecated SVGPathSegArcAbs Deprecated SVGPathSegArcRel Deprecated SVGPathSegLinetoHorizontalAbs Deprecated SVGPathSegLinetoHorizontalRel Deprecated SVGPathSegLinetoVerticalAbs Deprecated SVGPathSegLinetoVerticalRel Deprecated SVGPathSegCurvetoCubicSmoothAbs Deprecated SVGPathSegCurvetoCubicSmoothRel Deprecated SVGPathSegCurvetoQuadraticSmoothAbs Deprecated SVGPathSegCurvetoQuadraticSmoothRel Deprecated SVGPathSegList Deprecated SVGPoint Deprecated SVGPointList Deprecated SVGPreserveAspectRatio SVGRect Deprecated SVGStringList SVGTransform SVGTransformList Animated type SVGAnimatedAngle SVGAnimatedBoolean SVGAnimatedEnumeration SVGAnimatedInteger SVGAnimatedLength SVGAnimatedLengthList SVGAnimatedNumber SVGAnimatedNumberList SVGAnimatedPathData Deprecated SVGAnimatedPoints SVGAnimatedPreserveAspectRatio SVGAnimatedRect SVGAnimatedString SVGAnimatedTransformList SMIL-related interfaces ElementTimeControl TimeEvent Other SVG interfaces GetSVGDocument ShadowAnimation SVGColorProfileRule Deprecated SVGCSSRule Deprecated SVGDocument SVGException Deprecated SVGFitToViewBox SVGLocatable Deprecated SVGRenderingIntent Deprecated SVGUnitTypes SVGUseElementShadowRoot SVGViewSpec Deprecated SVGZoomEvent Deprecated SpecificationsSpecificationDOM Standard See also DOM Examples CSS Object Model (CSSOM) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
45,developer.mozilla.org/en-US/docs/Web/API,developer.mozilla.org/en-US/docs/Web/API. 
46,developer.mozilla.org/en-US/docs/Glossary/Number,"developer.mozilla.org/en-US/docs/Glossary/Number. Number - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsNumberArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoNumberIn JavaScript, Number is a numeric data type in the double-precision 64-bit floating point format (IEEE 754). In other programming languages different numeric types exist; for example, Integers, Floats, Doubles, or Bignums.See also Numeric types on Wikipedia The JavaScript type: Number The JavaScript global object Number Glossary: JavaScript Primitive Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
47,developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#specifications,"developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes#specifications. Pseudo-classes - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSPseudo-classesArticle ActionsEnglish (US)In this articleElement display state pseudo-classesInput pseudo-classesLinguistic pseudo-classesLocation pseudo-classesResource state pseudo-classesTime-dimensional pseudo-classesTree-structural pseudo-classesUser action pseudo-classesFunctional pseudo-classesSyntaxAlphabetical indexSpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleElement display state pseudo-classesInput pseudo-classesLinguistic pseudo-classesLocation pseudo-classesResource state pseudo-classesTime-dimensional pseudo-classesTree-structural pseudo-classesUser action pseudo-classesFunctional pseudo-classesSyntaxAlphabetical indexSpecificationsSee alsoPseudo-classesA CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled. /* Any button over which the user's pointer is hovering */ button:hover { color: blue; } A pseudo-class consists of a colon (:) followed by the pseudo-class name (e.g., :hover). A functional pseudo-class also contains a pair of parenthesis to define the arguments (e.g., :dir()). The element that a pseudo-class is attached to is defined as an anchor element (e.g., button in case button:hover). Pseudo-classes let you apply a style to an element not only in relation to the content of the document tree, but also in relation to external factors like the history of the navigator (:visited, for example), the status of its content (like :checked on certain form elements), or the position of the mouse (like :hover, which lets you know if the mouse is over an element or not). Note: In contrast to pseudo-classes, pseudo-elements can be used to style a specific part of an element. Element display state pseudo-classesThese pseudo-classes enable the selection of elements based on their display states. :fullscreen Matches an element that is currently in fullscreen mode. :modal Matches an element that is in a state in which it excludes all interaction with elements outside it until the interaction has been dismissed. :picture-in-picture Matches an element that is currently in picture-in-picture mode. Input pseudo-classesThese pseudo-classes relate to form elements, and enable selecting elements based on HTML attributes and the state that the field is in before and after interaction. :autofill Matches when an <input> has been autofilled by the browser. :enabled Represents a user interface element that is in an enabled state. :disabled Represents a user interface element that is in a disabled state. :read-only Represents any element that cannot be changed by the user. :read-write Represents any element that is user-editable. :placeholder-shown Matches an input element that is displaying placeholder text. For example, it will match the placeholder attribute in the <input> and <textarea> elements. :default Matches one or more UI elements that are the default among a set of elements. :checked Matches when elements such as checkboxes and radio buttons are toggled on. :indeterminate Matches UI elements when they are in an indeterminate state. :blank Matches a user-input element which is empty, containing an empty string or other null input. :valid Matches an element with valid contents. For example, an input element with the type 'email' that contains a validly formed email address or an empty value if the control is not required. :invalid Matches an element with invalid contents. For example, an input element with type 'email' with a name entered. :in-range Applies to elements with range limitations. For example, a slider control when the selected value is in the allowed range. :out-of-range Applies to elements with range limitations. For example, a slider control when the selected value is outside the allowed range. :required Matches when a form element is required. :optional Matches when a form element is optional. :user-invalid Represents an element with incorrect input, but only when the user has interacted with it. Linguistic pseudo-classesThese pseudo-classes reflect the document language and enable the selection of elements based on language or script direction. :dir() The directionality pseudo-class selects an element based on its directionality as determined by the document language. :lang() Select an element based on its content language. Location pseudo-classesThese pseudo-classes relate to links, and to targeted elements within the current document. :any-link Matches an element if the element would match either :link or :visited. :link Matches links that have not yet been visited. :visited Matches links that have been visited. :local-link Matches links whose absolute URL is the same as the target URL. For example, anchor links to the same page. :target Matches the element which is the target of the document URL. :target-within Matches elements which are the target of the document URL, but also elements which have a descendant which is the target of the document URL. :scope Represents elements that are a reference point for selectors to match against. Resource state pseudo-classesThese pseudo-classes apply to media that is capable of being in a state where it would be described as playing, such as a video. :playing Represents a media element that is capable of playing when that element is playing. :paused Represents a media element that is capable of playing when that element is paused. Time-dimensional pseudo-classesThese pseudo-classes apply when viewing something which has timing, such as a WebVTT caption track. :current Represents the element or ancestor of the element that is being displayed. :past Represents an element that occurs entirely before the :current element. :future Represents an element that occurs entirely after the :current element. Tree-structural pseudo-classesThese pseudo-classes relate to the location of an element within the document tree. :root Represents an element that is the root of the document. In HTML this is usually the <html> element. :empty Represents an element with no children other than white-space characters. :nth-child Uses An+B notation to select elements from a list of sibling elements. :nth-last-child Uses An+B notation to select elements from a list of sibling elements, counting backwards from the end of the list. :first-child Matches an element that is the first of its siblings. :last-child Matches an element that is the last of its siblings. :only-child Matches an element that has no siblings. For example, a list item with no other list items in that list. :nth-of-type Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements. :nth-last-of-type Uses An+B notation to select elements from a list of sibling elements that match a certain type from a list of sibling elements counting backwards from the end of the list. :first-of-type Matches an element that is the first of its siblings, and also matches a certain type selector. :last-of-type Matches an element that is the last of its siblings, and also matches a certain type selector. :only-of-type Matches an element that has no siblings of the chosen type selector. User action pseudo-classesThese pseudo-classes require some interaction by the user in order for them to apply, such as holding a mouse pointer over an element. :hover Matches when a user designates an item with a pointing device, such as holding the mouse pointer over the item. :active Matches when an item is being activated by the user. For example, when the item is clicked on. :focus Matches when an element has focus. :focus-visible Matches when an element has focus and the user agent identifies that the element should be visibly focused. :focus-within Matches an element to which :focus applies, plus any element that has a descendant to which :focus applies. Functional pseudo-classesThese pseudo-classes accept a selector list or forgiving selector list as a parameter. :is() The matches-any pseudo-class matches any element that matches any of the selectors in the list provided. The list is forgiving. :not() The negation, or matches-none, pseudo-class represents any element that is not represented by its argument. :where() The specificity-adjustment pseudo-class matches any element that matches any of the selectors in the list provided without adding any specificity weight. The list is forgiving. :has() The relational pseudo-class represents an element if any of the relative selectors match when anchored against the attached element. Syntaxselector:pseudo-class { property: value; } Like regular classes, you can chain together as many pseudo-classes as you want in a selector.Alphabetical indexPseudo-classes defined by a set of CSS specifications include the following: A :active :any-link :autofill B :blank Experimental C :checked :current Experimental D :default :defined :dir() Experimental :disabled E :empty :enabled F :first :first-child :first-of-type :fullscreen :future Experimental :focus :focus-visible :focus-within H :has() Experimental :host :host() :host-context() Experimental :hover I :indeterminate :in-range :invalid :is() L :lang() :last-child :last-of-type :left :link :local-link Experimental M :modal N :not() :nth-child() :nth-col() Experimental :nth-last-child() :nth-last-col() Experimental :nth-last-of-type() :nth-of-type() O :only-child :only-of-type :optional :out-of-range P :past Experimental :picture-in-picture :placeholder-shown :paused :playing R :read-only :read-write :required :right :root S :scope :state() Experimental T :target :target-within Experimental U :user-invalid Experimental V :valid :visited W :where() SpecificationsSpecificationHTML Standard # pseudo-classesSelectors Level 4 CSS Basic User Interface Module Level 4 See also Pseudo-elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
48,developer.mozilla.org/en-US/docs/Web/CSS/padding,"developer.mozilla.org/en-US/docs/Web/CSS/padding. padding - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSpaddingArticle ActionsEnglish (US)In this articleTry itConstituent propertiesSyntaxFormal definitionFormal syntaxExamplesSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleTry itConstituent propertiesSyntaxFormal definitionFormal syntaxExamplesSpecificationsBrowser compatibilitySee alsopaddingThe padding CSS shorthand property sets the padding area on all four sides of an element at once.Try it An element's padding area is the space between its content and its border. Note: Padding creates extra space within an element. In contrast, margin creates extra space around an element. Constituent propertiesThis property is a shorthand for the following CSS properties: padding-top padding-right padding-bottom padding-left Syntax/* Apply to all four sides */ padding: 1em; /* top and bottom | left and right */ padding: 5% 10%; /* top | left and right | bottom */ padding: 1em 2em 2em; /* top | right | bottom | left */ padding: 5px 1em 0 2em; /* Global values */ padding: inherit; padding: initial; padding: revert; padding: revert-layer; padding: unset; The padding property may be specified using one, two, three, or four values. Each value is a <length> or a <percentage>. Negative values are invalid. When one value is specified, it applies the same padding to all four sides. When two values are specified, the first padding applies to the top and bottom, the second to the left and right. When three values are specified, the first padding applies to the top, the second to the right and left, the third to the bottom. When four values are specified, the paddings apply to the top, right, bottom, and left in that order (clockwise). Values <length> The size of the padding as a fixed value. <percentage> The size of the padding as a percentage, relative to the inline size (width in a horizontal language, defined by writing-mode) of the containing block. Formal definitionInitial valueas each of the properties of the shorthand:padding-bottom: 0padding-left: 0padding-right: 0padding-top: 0Applies toall elements, except table-row-group, table-header-group, table-footer-group, table-row, table-column-group and table-column. It also applies to ::first-letter and ::first-line.InheritednoPercentagesrefer to the width of the containing blockComputed valueas each of the properties of the shorthand:padding-bottom: the percentage as specified or the absolute lengthpadding-left: the percentage as specified or the absolute lengthpadding-right: the percentage as specified or the absolute lengthpadding-top: the percentage as specified or the absolute lengthAnimation typea lengthFormal syntaxpadding = <'padding-top'>{1,4} ExamplesSetting padding with pixelsHTML <h4>This element has moderate padding.</h4> <h3>The padding is huge in this element!</h3> CSS h4 { background-color: lime; padding: 20px 50px; } h3 { background-color: cyan; padding: 110px 50px 50px 110px; } ResultSetting padding with pixels and percentagespadding: 5%; /* All sides: 5% padding */ padding: 10px; /* All sides: 10px padding */ padding: 10px 20px; /* top and bottom: 10px padding */ /* left and right: 20px padding */ padding: 10px 3% 20px; /* top:   10px padding */ /* left and right: 3% padding */ /* bottom:   20px padding */ padding: 1em 3px 30px 5px; /* top: 1em padding */ /* right: 3px padding */ /* bottom: 30px padding */ /* left: 5px padding */ SpecificationsSpecificationCSS Box Model Module Level 3 # padding-shorthandBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Introduction to the CSS basic box model padding-top, padding-right, padding-bottom, and padding-left. The mapped logical properties: padding-block-start, padding-block-end, padding-inline-start, and padding-inline-end and the shorthands padding-block and padding-inline Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
49,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:actuate,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:actuate. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
50,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/append,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/append. DocumentFragment: append() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentappend()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChildlastElementChildInstance methodsappend() getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: append() method The DocumentFragment.append() method inserts a set of Node objects or string objects after the last child of the document fragment. String objects are inserted as equivalent Text nodes. This method appends a child to a DocumentFragment. To append to an arbitrary element in the tree, see Element.append().Syntaxappend(param1) append(param1, param2) append(param1, param2, /* â¦ ,*/ paramN) Parameters param1, â¦, paramN A set of Node or string objects to insert. Return valueNone (undefined).Exceptions HierarchyRequestError DOMException Thrown when the node cannot be inserted at the specified point in the hierarchy. ExamplesAppending an element to a document fragmentlet fragment = new DocumentFragment(); let div = document.createElement(""div""); fragment.append(div); fragment.children; // HTMLCollection [<div>] SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-appendâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also DocumentFragment.prepend() Element.append() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
51,developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Perceivable,"developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Perceivable. Perceivable - Accessibility | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesAccessibilityUnderstanding the Web Content Accessibility GuidelinesPerceivableArticle ActionsEnglish (US)In this articleGuideline 1.1 â Providing text alternatives for non-text contentGuideline 1.2 â Providing text alternatives for time-based mediaGuideline 1.3 â Create content that can be presented in different waysGuideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundSee also KeyboardOperablePerceivablePerceivableColor contrastUse of colorRobustText labels and namesUnderstandable In this articleGuideline 1.1 â Providing text alternatives for non-text contentGuideline 1.2 â Providing text alternatives for time-based mediaGuideline 1.3 â Create content that can be presented in different waysGuideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundSee alsoPerceivableThis article provides practical advice on how to write your web content so that it conforms to the success criteria outlined in the Perceivable principle of the Web Content Accessibility Guidelines (WCAG) 2.0 and 2.1. Perceivable states that users must be able to perceive it in some way, using one or more of their senses. Note: To read the W3C definitions for Perceivable and its guidelines and success criteria, see Principle 1: Perceivable - Information and user interface components must be presentable to users in ways they can perceive. Guideline 1.1 â Providing text alternatives for non-text contentThe key here is that text can be converted to other forms that people with disabilities can use. For example, it can be spoken by a screen reader, converted to large print, or represented on a braille display. Non-text content refers to multimedia such as images, audio, and video. Success criteria How to conform to the criteria Practical resource  1.1.1 Provide text equivalents (A)   All images that convey meaningful content should be given suitable   alternative text.  Text alternatives.   Complex images or charts should have an accessible alternative provided,   either on the same page or via a link. Use a regular link instead of   a `longdesc` attribute.     A text description may work, or an accessible data table (see   HTML table advanced features and accessibility). See   Other text alternative mechanisms   for the argument against `longdesc`.      Multimedia content (i.e., audio or video) should at least have a   descriptive identification available, such as a caption or similar.     See Text alternatives   for static caption options, and   Audio transcripts,   Video text tracks, and   Other multimedia content   for other alternatives.      UI controls such as form elements and buttons should have text labels   that describe their purpose.     Buttons are simpleâyou should make sure the button text describes the   function of the button (e.g., <button>Upload image</button>). For more information on other UI controls, see   UI controls.     Implement decorative (non-content) images, video, etc., in a way that is   invisible to assistive technology, so it doesn't confuse users.     Decorative images should be implemented using CSS background images   (see   Backgrounds). If you have to include an image via an   <img> element, give it a blank alt   (alt=""""). Otherwise, screen readers may try to read out   the filepath, etc.      If you are including background video or audio that autoplays, make it   as unobtrusive as possible. Don't make it look/sound like content, and   provide a control to turn it off. Ideally, don't include it at all.    Note: Also see the WCAG description for Guideline 1.1: Text alternatives. Guideline 1.2 â Providing text alternatives for time-based mediaTime-based media refers to multimedia with a duration, such as audio and video. Note that if the audio/video serves as an alternative to existing text content, you don't need to provide another text alternative. Success criteria How to conform to the criteria Practical resource  1.2.1 Provide alternatives for pre-recorded audio-only and video-only content (A) A transcript should be provided for prerecorded audio-only media, and a transcript or audio description should be provided for prerecorded video-only media (i.e., silent video). See Audio transcripts for transcript information. No audio description tutorial is available yet. 1.2.2 Provide captions for web-based video (A) You should provide captions for video presented on the web (e.g., HTML video). This is for the benefit of people who can't hear the audio part of the video. See Video text tracks for HTML video captions, and Other multimedia content for other technologies. See also Add your own subtitles & closed captions (YouTube). 1.2.3 Provide text transcript or audio description for web-based video (A) You should provide text transcripts or audio descriptions for video presented on the web (e.g., HTML video. This is for the benefit of people who can't see the visual part of the video, and don't get the full content from the audio alone. See Audio transcripts for transcript information. No audio description tutorial is available yet. 1.2.4 Provide captions for live audio (AA) You should provide synchronized captions for all live multimedia that contains audio (e.g., video conferences, live audio broadcasts). 1.2.5 Provide audio descriptions for prerecorded video (AA) Audio descriptions should be provided for prerecorded video, but only where the existing audio does not convey the full meaning expressed by the video. 1.2.6 Provide sign language equivalent to prerecorded audio (AAA) An equivalent sign language video should be provided for any prerecorded content containing audio. 1.2.7 Provide extended video with audio descriptions (AAA) Where audio descriptions cannot be provided (see 1.2.5) due to video timing issues (e.g., there are no suitable pauses in the content in which to insert the audio descriptions), an alternative version of the video should be provided that includes inserted pauses (and audio descriptions). 1.2.8 Provide an alternative for prerecorded media (AAA) For all content that features video, a descriptive text transcript should be provided, for example a script of the movie you are watching. This is for the benefit of hearing-impaired viewers who cannot hear the content. See Audio transcripts for transcript information. 1.2.9 Provide a transcript for live audio (AAA) For any live audio content being broadcast, a descriptive text should be provided, for example a script of the play or musical you are listening to. This is for the benefit of hearing-impaired viewers who cannot hear the content. See Audio transcripts for transcript information.  Note: Also see the WCAG description for Guideline 1.2: Time-based Media: Provide alternatives for time-based media. Guideline 1.3 â Create content that can be presented in different waysThis guideline refers to the ability of content to be consumed by users in multiple ways, accommodating their differing needs. Success criteria How to conform to the criteria Practical resource 1.3.1 Info and relationships (A)    Any content structureâor visual relationship made between contentâcan   also be determined programmatically, or be inferred from text   description. The main situations in which this is relevant are:      Text labels and the form elements they describe. These are    associated unambiguously using the <label>    element, which can be picked up by screen readers, etc.       Image alt text. Content images should have text available that    clearly describes the image's contents, which can be    programmatically associated with it (e.g., `alt` text),    or otherwise is easy to associate (e.g., describes it and is sat    right next to it). This should mean that the full meaning can still    be inferred even if you can't see the image.       Lists. If the order of list items is important, use an ordered list    (<ol>).    The whole of   HTML: A good basis for accessibility   is packed with information about this, but you should particularly   refer to   Good semantics,   UI controls, and   Text alternatives.    1.3.2 Meaningful content sequence (A)   A sensible, logical reading order should be easy to determine for any   content, even if it is visually presented in an unusual way. The order   should be made obvious by use of correct semantic elements (e.g.,   headings, paragraphs), with CSS being used to create any unusual layout   styles, irrespective of the markup.     Again, refer to   HTML: A good basis for accessibility.   1.3.3 Sensory characteristics (A)    Instructions for operating controls or understanding content do not   rely on a single sense. This may prove inaccessible to people with a   disability related to that sense, or a device that does not support   that sense. So, for example:      ""Click the round button to continue""The button should be    clearly labelled so that it is obvious that it is the button you    need to press. If there are multiple buttons, make sure they are all    clearly labelled to distinguish their function.       ""Listen to the audio instructions for guidance""This is    obviously problematicâaudio will be inaccessible to those with    hearing impairments, whereas text can be read, but also spoken by a    screen reader if required.       ""Swipe from the right-hand side of the screen to reveal the menu""Some    users might not be able to swipe the screen, either due to    disability or because their device does not support touch. An    alternative should be provided, such as a keyboard shortcut or    button that can be activated by keyboard or other means.    Note: Conveying instructions solely by color is    related, but covered in a different guideline â 1.4.1.       1.3.4 Orientation (AA)   added in 2.1   Content does not restrict its view and operation to a single display   orientation, such as portrait or landscape, unless a specific display   orientation is essential.   Understanding Orientation 1.3.5 Identify Input Purpose (AA) added in 2.1    Follow the list of   53 input fields   to programmatically identify the purpose of a field.   Understanding Identify Input Purpose 1.3.6 Identify Purpose (AAA) added in 2.1   In content implemented using markup languages, the purpose of user   interface components, icons, and regions can be programmatically   determined.  Understanding Identify Purpose  Note: Also see the WCAG description for Guideline 1.3: Adaptable: Create content that can be presented in different ways without losing information or structure. Guideline 1.4: Make it easier for users to see and hear content including separating foreground from backgroundThis guideline relates to making sure core content is easy to discern from backgrounds and other decoration. The classic example is color (both color contrast and use of color to convey instructions), but it applies in other situations too. Success criteria How to conform to the criteria Practical resource 1.4.1 Use of color (A)    Color should not be solely relied upon to convey information. For   example, in forms, you should never mark required fields purely with a   color (like red). Instead (or as well as), something like an asterisk   with a label of ""required"" would be more appropriate.     See   Color and color contrast   and   Multiple labels.   1.4.2 Audio controls (A)   For any audio that plays for longer than three seconds, provide   accessible controls to play and pause the audio/video, and mute/adjust   volume.     Use native `<button>`s to provide accessible keyboard   controls, as shown in   Video player styling basics.   1.4.3 Minimum contrast (AA)    The color contrast between background and foreground content should be   at a minimum level to ensure legibility:      Text and its background should have a contrast ratio of at least    4.5:1.       Heading (or just larger) text should have a ratio of at least 3:1.    Larger text is defined as at least 18pt, or 14pt bold.      See   Color and color contrast.   1.4.4 Resize text (AA)   The page should be readable and usable when the text size is doubled.   This means that designs should be responsive, so that when the text size   is increased, the content is still accessible.   1.4.5 Images of text (AA)   Images should NOT be used to present content where text would do the   job. For example, if an image is mostly textual, it could be represented   using text as well as images.   1.4.6 Enhanced contrast (AAA) This follows, and builds on, criterion 1.4.3.    Text and its background should have a contrast ratio of at least    7:1.       Heading (or just larger) text should have a ratio of at least 4.5:1.    Larger text is defined as at least 18pt, or 14pt bold.      See   Color and color contrast.   1.4.7 Low or no background audio (AAA)   Prerecorded audio recordings that primarily feature speech should have   minimal background noise, so the content can be easily understood.   1.4.8 Visual presentation (AAA) For text content presentation, the following should be true: Foreground and background colors should be user-selectable.    Text blocks should be no wider than 80 characters (or glyphs), for    maximum readability.   Text should not be fully justified (e.g., text-align: justify;).    Line height should be at least 1.5 times the text size within    paragraphs (e.g., `line-height: 1.5;`), and at least 2.25    times the text size between paragraphs (e.g., padding: 2.25rem;).       When the text size is doubled, the content should not need to be    scrolled.     1.4.9 Images of text (No Exception) (AAA)   Text should not be presented as part of an image unless it is purely   decoration (i.e., it does not convey any content) or cannot be presented   in any other way.   1.4.10 Reflow (AA) added in 2.1    No horizontal scrolling for left-to-right languages (like English)    or right-to-left languages (like Arabic)   No vertical scrolling for top-to-bottom languages (like Japanese)    Except for parts of the content which require two-dimensional layout    for usage or meaning (like a large data table)    Understanding Reflow 1.4.11 Non-Text Contrast(AA) added in 2.1   Minimum color contrast ratio of 3:1 for user interface components and   graphical objects.  Understanding Non-Text Contrast 1.4.12 Text Spacing (AA) added in 2.1    No loss of content or functionality occurs when the following styles   are applied:   Line height (line spacing) to at least 1.5 times the font size Spacing following paragraphs to at least 2 times the font size Letter spacing (tracking) to at least 0.12 times the font size Word spacing to at least 0.16 times the font size Understanding Text Spacing 1.4.13 Content on Hover or Focus (AA) added in 2.1    While additional content may appear and disappear in coordination with   hover and keyboard focus, this success criterion specifies three   conditions that must be met:   dismissible (can be closed/removed)    hoverable (the additional content does not disappear when the    pointer is over it)       persistent (the additional content does not disappear without user    action)    Understanding Content on Hover or Focus  Note: Also see the WCAG description for Guideline 1.4: Distinguishable: Make it easier for users to see and hear content including separating foreground from background. See also WCAG Perceivable Operable Understandable Robust Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
52,developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout/event,"developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout/event. XMLHttpRequest: timeout event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsXMLHttpRequesttimeoutArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoXMLHttpRequestConstructorXMLHttpRequest()Instance propertieschannel Non-standard mozAnon Non-standard mozBackgroundRequest Non-standard mozSystem Non-standard readyStateresponseresponseTextresponseTyperesponseURLresponseXMLstatusstatusTexttimeoutuploadwithCredentialsInstance methodsabort()getAllResponseHeaders()getResponseHeader()open()overrideMimeType()send()setRequestHeader()Eventsaborterrorloadloadendloadstartprogressreadystatechangetimeout Inheritance:XMLHttpRequestEventTargetEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoXMLHttpRequest: timeout eventThe timeout event is fired when progression is terminated due to preset time expiring.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""timeout"", (event) => {}); ontimeout = (event) => {}; Event typeA ProgressEvent. Inherits from Event.   Event     ProgressEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. lengthComputable Read only A boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. In other words, it tells if the progress is measurable or not. loaded Read only A 64-bit unsigned integer value indicating the amount of work already performed by the underlying process. The ratio of work done can be calculated by dividing total by the value of this property. When downloading a resource using HTTP, this only counts the body of the HTTP message, and doesn't include headers and other overhead. total Read only A 64-bit unsigned integer representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this is the Content-Length (the size of the body of the message), and doesn't include the headers and other overhead. Examplesconst client = new XMLHttpRequest(); client.open(""GET"", ""http://www.example.org/example.txt""); client.ontimeout = () => { console.error(""Timeout!!""); }; client.send(); You could also set up the event handler using the addEventListener() method: client.addEventListener(""timeout"", () => { console.error(""Timeout!!""); }); SpecificationsSpecificationXMLHttpRequest Standard # event-xhr-timeoutXMLHttpRequest Standard # handler-xhr-ontimeoutBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also XMLHttpRequest Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
53,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/autoReverse,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/autoReverse. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
54,developer.mozilla.org/en-US/docs/Glossary/DOM,"developer.mozilla.org/en-US/docs/Glossary/DOM. DOM (Document Object Model) - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsDOM (Document Object Model)Article ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoDOM (Document Object Model)The DOM (Document Object Model) is an API that represents and interacts with any HTML or XML document. The DOM is a document model loaded in the browser and representing the document as a node tree, where each node represents part of the document (e.g. an element, text string, or comment). The DOM is one of the most-used APIs on the Web because it allows code running in a browser to access and interact with every node in the document. Nodes can be created, moved and changed. Event listeners can be added to nodes and triggered on occurrence of a given event. DOM was not originally specifiedâit came about when browsers began implementing JavaScript. This legacy DOM is sometimes called DOM 0. Today, the WHATWG maintains the DOM Living Standard.See also The Document Object Model on Wikipedia The DOM documentation on MDN The DOM Standard Glossary API HTML XML World Wide Web Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
55,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isInteger,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isInteger. Number.isInteger() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsNumberNumber.isInteger()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsNumberConstructorNumber() constructorPropertiesNumber.EPSILONNumber.MAX_SAFE_INTEGERNumber.MAX_VALUENumber.MIN_SAFE_INTEGERNumber.MIN_VALUENumber.NaNNumber.NEGATIVE_INFINITYNumber.POSITIVE_INFINITYMethodsNumber.isFinite()Number.isInteger()Number.isNaN()Number.isSafeInteger()Number.parseFloat()Number.parseInt()Number.prototype.toExponential()Number.prototype.toFixed()Number.prototype.toLocaleString()Number.prototype.toPrecision()Number.prototype.toString()Number.prototype.valueOf()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoNumber.isInteger()The Number.isInteger() static method determines whether the passed value is an integer.Try itSyntaxNumber.isInteger(value) Parameters value The value to be tested for being an integer. Return valueThe boolean value true if the given value is an integer. Otherwise false.DescriptionIf the target value is an integer, return true, otherwise return false. If the value is NaN or Infinity, return false. The method will also return true for floating point numbers that can be represented as integer. It will always return false if the value is not a number. Note that some number literals, while looking like non-integers, actually represent integers â due to the precision limit of ECMAScript floating-point number encoding (IEEE-754). For example, 5.0000000000000001 only differs from 5 by 1e-16, which is too small to be represented. (For reference, Number.EPSILON stores the distance between 1 and the next representable floating-point number greater than 1, and that is about 2.22e-16.) Therefore, 5.0000000000000001 will be represented with the same encoding as 5, thus making Number.isInteger(5.0000000000000001) return true. In a similar sense, numbers around the magnitude of Number.MAX_SAFE_INTEGER will suffer from loss of precision and make Number.isInteger return true even when it's not an integer. (The actual threshold varies based on how many bits are needed to represent the decimal â for example, Number.isInteger(4500000000000000.1) is true, but Number.isInteger(4500000000000000.5) is false.)ExamplesUsing isIntegerNumber.isInteger(0); // true Number.isInteger(1); // true Number.isInteger(-100000); // true Number.isInteger(99999999999999999999999); // true Number.isInteger(0.1); // false Number.isInteger(Math.PI); // false Number.isInteger(NaN); // false Number.isInteger(Infinity); // false Number.isInteger(-Infinity); // false Number.isInteger(""10""); // false Number.isInteger(true); // false Number.isInteger(false); // false Number.isInteger([1]); // false Number.isInteger(5.0); // true Number.isInteger(5.000000000000001); // false Number.isInteger(5.0000000000000001); // true, because of loss of precision Number.isInteger(4500000000000000.1); // true, because of loss of precision SpecificationsSpecificationECMAScript Language Specification # sec-number.isintegerBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Number.isInteger in core-js The Number object it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
56,developer.mozilla.org/en-US/docs/Web/HTML/Element/img#intrinsicsize,"developer.mozilla.org/en-US/docs/Web/HTML/Element/img#intrinsicsize. <img>: The Image Embed element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<img>Article ActionsEnglish (US)In this articleTry itSupported image formatsImage loading errorsAttributesStyling with CSSExamplesSecurity and privacy concernsAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleTry itSupported image formatsImage loading errorsAttributesStyling with CSSExamplesSecurity and privacy concernsAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also<img>: The Image Embed elementThe <img> HTML element embeds an image into the document.Try it The above example shows usage of the <img> element: The src attribute is required, and contains the path to the image you want to embed. The alt attribute holds a text description of the image, which isn't mandatory but is incredibly useful for accessibility â screen readers read this description out to their users so they know what the image means. Alt text is also displayed on the page if the image can't be loaded for some reason: for example, network errors, content blocking, or linkrot. There are many other attributes to achieve various purposes: Referrer/CORS control for security and privacy: see crossorigin and referrerpolicy. Use both width and height to set the intrinsic size of the image, allowing it to take up space before it loads, to mitigate content layout shifts. Responsive image hints with sizes and srcset (see also the <picture> element and our Responsive images tutorial). Supported image formatsThe HTML standard doesn't list what image formats to support, so user agents may support different formats. Note: The Image file type and format guide provides comprehensive information about image formats and their web browser support.  This section is just a summary!  The image file formats that are most commonly used on the web are: APNG (Animated Portable Network Graphics) â Good choice for lossless animation sequences (GIF is less performant) AVIF (AV1 Image File Format) â Good choice for both images and animated images due to high performance. GIF (Graphics Interchange Format) â Good choice for simple images and animations. JPEG (Joint Photographic Expert Group image) â Good choice for lossy compression of still images (currently the most popular). PNG (Portable Network Graphics) â Good choice for lossless compression of still images (slightly better quality than JPEG). SVG (Scalable Vector Graphics) â Vector image format. Use for images that must be drawn accurately at different sizes. WebP (Web Picture format) â Excellent choice for both images and animated images Formats like WebP and AVIF are recommended as they perform much better than PNG, JPEG, GIF for both still and animated images. WebP is widely supported while AVIF lacks support in Edge. SVG remains the recommended format for images that must be drawn accurately at different sizes.Image loading errorsIf an error occurs while loading or rendering an image, and an onerror event handler has been set for the error event, that event handler will get called. This can happen in several situations, including: The src attribute is empty ("""") or null. The src URL is the same as the URL of the page the user is currently on. The image is corrupted in some way that prevents it from being loaded. The image's metadata is corrupted in such a way that it's impossible to retrieve its dimensions, and no dimensions were specified in the <img> element's attributes. The image is in a format not supported by the user agent. AttributesThis element includes the global attributes. alt Defines an alternative text description of the image. Note: Browsers do not always display images. There are a number of situations in which a browser might not display images, such as: Non-visual browsers (such as those used by people with visual impairments) The user chooses not to display images (saving bandwidth, privacy reasons) The image is invalid or an unsupported type In these cases, the browser may replace the image with the text in the element's alt attribute. For these reasons and others, provide a useful value for alt whenever possible. Setting this attribute to an empty string (alt="""") indicates that this image is not a key part of the content (it's decoration or a tracking pixel), and that non-visual browsers may omit it from rendering. Visual browsers will also hide the broken image icon if the alt is empty and the image failed to display. This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark. crossorigin Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the <canvas> element without being marked ""tainted"". If the crossorigin attribute is not specified, then a non-CORS request is sent (without the Origin request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in <canvas> elements. If the crossorigin attribute is specified, then a CORS request is sent (with the Origin request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any Access-Control-Allow-Origin response header, or by not including the site's origin in any Access-Control-Allow-Origin response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console. Allowed values: anonymous A CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or Authorization request header). use-credentials The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the Authorization request header). If the server does not opt into sharing credentials with the origin site (by sending back the Access-Control-Allow-Credentials: true response header), then the browser marks the image as tainted and restricts access to its image data. If the attribute has an invalid value, browsers handle it as if the anonymous value was used. See CORS settings attributes for additional information. decoding Provides an image decoding hint to the browser. Allowed values: sync Decode the image synchronously, for atomic presentation with other content. async Decode the image asynchronously, to reduce delay in presenting other content. auto Default: no preference for the decoding mode. The browser decides what is best for the user. elementtiming Marks the image for observation by the PerformanceElementTiming API. The value given becomes an identifier for the observed image element. See also the elementtiming attribute page. fetchpriority Experimental Provides a hint of the relative priority to use when fetching the image. Allowed values: high Signals a high-priority fetch relative to other images. low Signals a low-priority fetch relative to other images. auto Default: Signals automatic determination of fetch priority relative to other images. height The intrinsic height of the image, in pixels. Must be an integer without a unit. Note: Including height and width enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance. ismap This Boolean attribute indicates that the image is part of a server-side map. If so, the coordinates where the user clicked on the image are sent to the server. Note: This attribute is allowed only if the <img> element is a descendant of an <a> element with a valid href attribute. This gives users without pointing devices a fallback destination. loading Indicates how the browser should load the image: eager Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value). lazy Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases. Note: Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when. referrerpolicy A string indicating which referrer to use when fetching the resource: no-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPSâHTTPS), but don't send it to a less secure destination (HTTPSâHTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPSâHTTPS), and send no header to a less secure destination (HTTPSâHTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. sizes One or more strings separated by commas, indicating a set of source sizes. Each source size consists of: A media condition. This must be omitted for the last item in the list. A source size value. Media Conditions describe properties of the viewport, not of the image. For example, (max-height: 500px) 1000px proposes to use a source of 1000px width, if the viewport is not higher than 500px. Source size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the srcset attribute, when those sources are described using width (w) descriptors. The selected source size affects the intrinsic size of the image (the image's display size if no CSS styling is applied). If the srcset attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect. src The image URL. Mandatory for the <img> element. On browsers supporting srcset, src is treated like a candidate image with a pixel density descriptor 1x, unless an image with this pixel density descriptor is already defined in srcset, or unless srcset contains w descriptors. srcset One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of: A URL to an image Optionally, whitespace followed by one of:   A width descriptor (a positive integer directly followed by w). The width descriptor is divided by the source size given in the sizes attribute to calculate the effective pixel density. A pixel density descriptor (a positive floating point number directly followed by x). If no descriptor is specified, the source is assigned the default descriptor of 1x. It is incorrect to mix width descriptors and pixel density descriptors in the same srcset attribute. Duplicate descriptors (for instance, two sources in the same srcset which are both described with 2x) are also invalid. If the srcset attribute uses width descriptors, the sizes attribute must also be present, or the srcset itself will be ignored. The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our Responsive images tutorial for an example. width The intrinsic width of the image in pixels. Must be an integer without a unit. usemap The partial URL (starting with #) of an image map associated with the element. Note: You cannot use this attribute if the <img> element is inside an <a> or <button> element. Deprecated attributes align Deprecated Aligns the image with its surrounding context. Use the float and/or vertical-align CSS properties instead of this attribute. Allowed values: top Equivalent to vertical-align: top or vertical-align: text-top middle Equivalent to vertical-align: -moz-middle-with-baseline bottom The default, equivalent to vertical-align: unset or vertical-align: initial left Equivalent to float: left right Equivalent to float: right border Deprecated The width of a border around the image. Use the border CSS property instead. hspace Deprecated The number of pixels of white space on the left and right of the image. Use the margin CSS property instead. longdesc Deprecated A link to a more detailed description of the image. Possible values are a URL or an element id. Note: This attribute is mentioned in the latest W3C version, HTML 5.2, but has been removed from the WHATWG's HTML Living Standard. It has an uncertain future; authors should use a WAI-ARIA alternative such as aria-describedby or aria-details. name Deprecated A name for the element. Use the id attribute instead. vspace Deprecated The number of pixels of white space above and below the image. Use the margin CSS property instead. Styling with CSS<img> is a replaced element; it has a display value of inline by default, but its default dimensions are defined by the embedded image's intrinsic values, like it were inline-block. You can set properties like border/border-radius, padding/margin, width, height, etc. on an image. <img> has no baseline, so when images are used in an inline formatting context with vertical-align: baseline, the bottom of the image will be placed on the text baseline. You can use the object-position property to position the image within the element's box, and the object-fit property to adjust the sizing of the image within the box (for example, whether the image should fit the box or fill it even if clipping is required). Depending on its type, an image may have an intrinsic width and height. For some image types, however, intrinsic dimensions are unnecessary. SVG images, for instance, have no intrinsic dimensions if their root <svg> element doesn't have a width or height set on it.ExamplesAlternative textThe following example embeds an image into the page and includes alternative text for accessibility. <img src=""favicon144.png"" alt=""MDN logo"" /> Image linkThis example builds upon the previous one, showing how to turn the image into a link. To do so, nest the <img> tag inside the <a>. You should make the alternative text describe the resource the link is pointing to, as if you were using a text link instead. <a href=""https://developer.mozilla.org""> <img src=""favicon144.png"" alt=""Visit the MDN site"" /> </a> Using the srcset attributeIn this example we include a srcset attribute with a reference to a high-resolution version of the logo; this will be loaded instead of the src image on high-resolution devices. The image referenced in the src attribute is counted as a 1x candidate in user agents that support srcset. <img src=""favicon72.png"" alt=""MDN logo"" srcset=""favicon144.png 2x"" /> Using the srcset and sizes attributesThe src attribute is ignored in user agents that support srcset when w descriptors are included. When the (max-width: 600px) media condition matches, the 200 pixel-wide image will load (it is the one that matches 200px most closely), otherwise the other image will load. <img src=""clock-demo-200px.png"" alt=""Clock"" srcset=""clock-demo-200px.png 200w, clock-demo-400px.png 400w"" sizes=""(max-width: 600px) 200px, 50vw"" /> Note: To see the resizing in action, view the example on a separate page, so you can actually resize the content area. Security and privacy concernsAlthough <img> elements have innocent uses, they can have undesirable consequences for user security and privacy. See Referer header: privacy and security concerns for more information and mitigations.Accessibility concernsAuthoring meaningful alternate descriptionsAn alt attribute's value should clearly and concisely describe the image's content. It should not describe the presence of the image itself or the file name of the image. If the alt attribute is purposefully left off because the image has no textual equivalent, consider alternate methods to present what the image is trying to communicate. Don't <img alt=""image"" src=""penguin.jpg"" /> Do <img alt=""A Rockhopper Penguin standing on a beach."" src=""penguin.jpg"" /> When an alt attribute is not present on an image, some screen readers may announce the image's file name instead. This can be a confusing experience if the file name isn't representative of the image's contents. An alt Decision Tree â¢ Images â¢ WAI Web Accessibility Tutorials Alt-texts: The Ultimate Guide â Axess Lab How to Design Great Alt Text: An Introduction | Deque MDN Understanding WCAG, Guideline 1.1 explanations Understanding Success Criterion 1.1.1 | W3C Understanding WCAG 2.0 Identifying SVG as an imageDue to a VoiceOver bug, VoiceOver does not correctly announce SVG images as images. Include role=""img"" to all <img> elements with SVG source files to ensure assistive technologies correctly announce the SVG as image content. <img src=""mdn.svg"" alt=""MDN logo"" role=""img"" /> The title attributeThe title attribute is not an acceptable substitute for the alt attribute. Additionally, avoid duplicating the alt attribute's value in a title attribute declared on the same image. Doing so may cause some screen readers to announce the description twice, creating a confusing experience. The title attribute should also not be used as supplemental captioning information to accompany an image's alt description. If an image needs a caption, use the figure and figcaption elements. The value of the title attribute is usually presented to the user as a tooltip, which appears shortly after the cursor stops moving over the image. While this can provide additional information to the user, you should not assume that the user will ever see it: the user may only have keyboard or touchscreen. If you have information that's particularly important or valuable for the user, present it inline using one of the methods mentioned above instead of using title. Using the HTML title attribute â updated | The Paciello Group Technical summary Content categories Flow content,   phrasing content,   embedded content,   palpable content. If the element has a usemap attribute, it also is a part   of the interactive content category.   Permitted content None; it is a void element. Tag omission Must have a start tag and must not have an end tag. Permitted parents Any element that accepts embedded content. Implicit ARIA role    with non-empty alt attribute or no    alt attribute:    img    with empty alt attribute:    presentation  Permitted ARIA roles with non-empty alt attribute:    button checkbox link menuitem menuitemcheckbox menuitemradio option progressbar scrollbar separator slider switch tab treeitem    with empty alt attribute, none    or presentation with no alt attribute, no role permitted  DOM interface HTMLImageElement SpecificationsSpecificationHTML Standard # the-img-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Images in HTML Image file type and format guide Responsive images <picture>, <object> and <embed> elements Other image-related CSS properties: object-fit, object-position, image-orientation, image-rendering, and image-resolution. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 1, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
57,developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent,"developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent. DragEvent: DragEvent() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDragEventDragEvent()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilityHTML Drag and Drop APIDragEventConstructorDragEvent() Instance propertiesdataTransferInheritance:MouseEventUIEventEventRelated pages for HTML Drag and Drop APIDataTransferDataTransferItemDataTransferItemListIn this articleSyntaxSpecificationsBrowser compatibilityDragEvent: DragEvent() constructorThis constructor is used to create a synthetic DragEvent object. Although this interface has a constructor, it is not possible to create a useful DataTransfer object from script, since DataTransfer objects have a processing and security model that is coordinated by the browser during drag-and-drops.  This interface inherits properties from MouseEvent and Event. Syntaxnew DragEvent(type) new DragEvent(type, dragEventInit) Parameters type A string representing the name of the event (see DragEvent event types). dragEventInit Optional A DragEventInit dictionary, having the following fields: ""dataTransfer"", optional and defaults to ""null"". The   type is DataTransfer.    The DragEventInit dictionary inherits from the MouseEventInit dictionary. SpecificationsSpecificationHTML Standard # the-dragevent-interfaceBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
58,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/contextmenu,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/contextmenu. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
59,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend/event,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend/event. HTMLMediaElement: suspend event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementsuspendArticle ActionsEnglish (US)In this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()Eventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspend timeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetIn this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElement: suspend eventThe suspend event is fired when media data loading has been suspended. This event is not cancelable and does not bubble.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""suspend"", (event) => {}); onsuspend = (event) => {}; Event typeA generic Event.ExamplesThese examples add an event listener for the HTMLMediaElement's suspend event, then post a message when that event handler has reacted to the event firing. Using addEventListener(): const video = document.querySelector(""video""); video.addEventListener(""suspend"", (event) => { console.log(""Data loading has been suspended.""); }); Using the onsuspend event handler property: const video = document.querySelector(""video""); video.onsuspend = (event) => { console.log(""Data loading has been suspended.""); }; SpecificationsSpecificationHTML Standard # event-media-suspendHTML Standard # handler-onsuspendBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Related Events The HTMLMediaElement playing event The HTMLMediaElement waiting event The HTMLMediaElement seeking event The HTMLMediaElement seeked event The HTMLMediaElement ended event The HTMLMediaElement loadedmetadata event The HTMLMediaElement loadeddata event The HTMLMediaElement canplay event The HTMLMediaElement canplaythrough event The HTMLMediaElement durationchange event The HTMLMediaElement timeupdate event The HTMLMediaElement play event The HTMLMediaElement pause event The HTMLMediaElement ratechange event The HTMLMediaElement volumechange event The HTMLMediaElement suspend event The HTMLMediaElement emptied event The HTMLMediaElement stalled event See also HTMLAudioElement HTMLVideoElement <audio> <video> Web Audio API Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
60,developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements,"developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements. Pseudo-elements - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSPseudo-elementsArticle ActionsEnglish (US)In this articleSyntaxAlphabetical indexSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleSyntaxAlphabetical indexSpecificationsBrowser compatibilitySee alsoPseudo-elementsA CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). For example, ::first-line can be used to change the font of the first line of a paragraph. /* The first line of every <p> element. */ p::first-line { color: blue; text-transform: uppercase; } Note: In contrast to pseudo-elements, pseudo-classes can be used to style an element based on its state. Syntaxselector::pseudo-element { property: value; } You can use only one pseudo-element in a selector. It must appear after the simple selectors in the statement. Note: As a rule, double colons (::) should be used instead of a single colon (:). This distinguishes pseudo-classes from pseudo-elements. However, since this distinction was not present in older versions of the W3C spec, most browsers support both syntaxes for the original pseudo-elements. Alphabetical indexPseudo-elements defined by a set of CSS specifications include the following: A ::after B ::backdrop ::before C ::cue ::cue-region F ::first-letter ::first-line ::file-selector-button G ::grammar-error Experimental M ::marker P ::part() ::placeholder S ::selection ::slotted() ::spelling-error Experimental T ::target-text Experimental SpecificationsSpecificationCascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification # pseudo-element-selectorsBrowser compatibility Browser Lowest Version Support of Firefox (Gecko) 1.0 (1.0) :pseudo-element 1.0 (1.5) :pseudo-element ::pseudo-element Opera 4.0 :pseudo-element 7.0 :pseudo-element ::pseudo-element Safari (WebKit) 1.0 (85) :pseudo-element ::pseudo-element See also Pseudo-classes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 23, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
61,developer.mozilla.org/en-US/docs/Web/API/UIEvent/view,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/view. UIEvent: view property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventviewArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilityUI EventsUIEventConstructorUIEvent()Instance propertiesdetailsourceCapabilities Experimental view which Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleValueSpecificationsBrowser compatibilityUIEvent: view property The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in. ValueA reference to an AbstractView object.SpecificationsSpecificationUI Events # dom-uievent-viewBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
62,developer.mozilla.org/en-US/docs/Web/API/DragEvent#event/types,"developer.mozilla.org/en-US/docs/Web/API/DragEvent#event/types. DragEvent - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDragEventArticle ActionsEnglish (US)In this articleInstance propertiesConstructorsEvent typesExampleSpecificationsBrowser compatibilitySee alsoHTML Drag and Drop APIDragEventConstructorDragEvent()Instance propertiesdataTransferInheritance:MouseEventUIEventEventRelated pages for HTML Drag and Drop APIDataTransferDataTransferItemDataTransferItemListIn this articleInstance propertiesConstructorsEvent typesExampleSpecificationsBrowser compatibilitySee alsoDragEventThe DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way. This interface inherits properties from MouseEvent and Event.   Event     UIEvent     MouseEvent     DragEvent  Instance properties DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ConstructorsAlthough this interface has a constructor, it is not possible to create a useful DataTransfer object from script, since DataTransfer objects have a processing and security model that is coordinated by the browser during drag-and-drops. DragEvent() Creates a synthetic and untrusted DragEvent. Event types drag This event is fired when an element or text selection is being dragged. dragend This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key). dragenter This event is fired when a dragged element or text selection enters a valid drop target. dragleave This event is fired when a dragged element or text selection leaves a valid drop target. dragover This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than mouseover ). dragstart This event is fired when the user starts dragging an element or text selection. drop This event is fired when an element or text selection is dropped on a valid drop target. ExampleAn Example of each property, constructor, event type and global event handlers is included in their respective reference page.SpecificationsSpecificationHTML Standard # the-dragevent-interfaceBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Drag and drop Drag Operations Recommended Drag Types DataTransfer test - Paste or Drag Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
63,developer.mozilla.org/en-US/docs/Glossary/Hyperlink,"developer.mozilla.org/en-US/docs/Glossary/Hyperlink. Hyperlink - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsHyperlinkArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoHyperlinkHyperlinks connect webpages or data items to one another. In HTML, <a> elements define hyperlinks from a spot on a webpage (like a text string or image) to another spot on some other webpage (or even on the same page).See also Hyperlink on Wikipedia The Hyperlink guide on MDN Links in HTML Documents - W3C HTML a - hyperlink - W3C <a> on MDN <link> on MDN Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
64,developer.mozilla.org/en-US/docs/Web/CSS/Cascade,"developer.mozilla.org/en-US/docs/Web/CSS/Cascade. Introducing the CSS Cascade - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSIntroducing the CSS CascadeArticle ActionsEnglish (US)In this articleOrigin typesCascading orderBasic exampleAuthor styles: inline styles, layers, and precedenceComplete cascade orderWhich CSS entities participate in the cascadeCSS animations and the cascadeResetting stylesSpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleOrigin typesCascading orderBasic exampleAuthor styles: inline styles, layers, and precedenceComplete cascade orderWhich CSS entities participate in the cascadeCSS animations and the cascadeResetting stylesSpecificationsSee alsoIntroducing the CSS CascadeThe cascade is an algorithm that defines how user agents combine property values originating from different sources. The cascade defines the origin and layer that takes precedence when declarations in more than one origin or cascade layer set a value for a property on an element. The cascade lies at the core of CSS, as emphasized by the name: Cascading Style Sheets. When a selector matches an element, the property value from the origin with the highest precedence gets applied, even if the selector from a lower precedence origin or layer has greater specificity. This article explains what the cascade is and the order in which CSS declarations cascade, covering cascade layers and origin type. Understanding origin precedence is key to understanding the cascade.Origin typesThe CSS cascade algorithm's job is to select CSS declarations in order to determine the correct values for CSS properties. CSS declarations come from different origin types: User-agent stylesheets, Author stylesheets, and User stylesheets. Though style sheets come from these different origins and can be within different layers in each of these origins, they overlap in scope; to make this work, the cascade algorithm defines how they interact. Before addressing the interactions, let's define some terms:User-agent stylesheetsUser-agent, or browsers, have basic style sheets that give default styles to any document. These style sheets are named user-agent stylesheets. Most browsers use actual stylesheets for this purpose, while others simulate them in code. The end result is the same. Some browsers let users modify the user-agent stylesheet, but this is rare and not something that can be controlled. Although some constraints on user-agent stylesheets are set by the HTML specification, browsers have a lot of latitude: that means some differences exist between browsers. To simplify the development process, Web developers may use a CSS reset stylesheet, such as normalize.css, which sets common properties values to a known state for all browsers before beginning to make alterations to suit their specific needs. Unless the user-agent stylesheet includes an !important next to a property, making it ""important"", styles declared by author styles, including a reset style sheet, take precedence over the user-agent styles, regardless of the specificity of the associated selector.Author stylesheetsAuthor stylesheets are the most common type of style sheet; these are the styles written by web developers. These styles can reset user-agent styles, as noted above, and define the styles for the design of a given web page or application. The author, or web developer, defines the styles for the document using one or more linked or imported stylesheets, <style> blocks, and inline styles defined with the style attribute. These author styles define the look and feel of the website â its theme.User stylesheetsIn most browsers, the user (or reader) of the website can choose to override styles using a custom user stylesheet designed to tailor the experience to the user's wishes. Depending on the user agent, user styles can be configured directly or added via browser extensions.Cascade layersThe cascade order is based on origin type. The cascade within each origin type is based on the declaration order of cascade layers within that type. For all origins - user-agent, author, or user - styles can be declared within or outside of named or anonymous layers. When declared using layer, layer() or @layer, styles are placed into the specified named layer, or into an anonymous layer if no name is provided. Styles declared outside of a layer are treated as being part of an anonymous last declared layer. Let's take a look at cascading origin type before diving into cascade layers within each origin type.Cascading orderThe cascading algorithm determines how to find the value to apply for each property for each document element. The following steps apply to the cascading algorithm: Relevance: It first filters all the rules from the different sources to keep only the rules that apply to a given element. That means rules whose selector matches the given element and which are part of an appropriate media at-rule. Origin and importance: Then it sorts these rules according to their importance, that is, whether or not they are followed by !important, and by their origin. Ignoring layers for the moment, the cascade order is as follows:  Order (low to high) Origin Importance  1 user-agent (browser) normal 2 user normal 3 author (developer) normal 4 CSS @keyframe animations 5 author (developer) !important 6 user !important 7 user-agent (browser) !important 8 CSS transitions  Specificity: In case of equality with an origin, the specificity of a rule is considered to choose one value or another. The specificity of the selectors are compared, and the declaration with the highest specificity wins. Order of appearance: In the origin with precedence, if there are competing values for a property that are in style block matching selectors of equal specificity, the last declaration in the style order is applied. The cascade is in ascending order, meaning animations have precedence of normal values, whether those are declared in user, author, or user-agent styles, important values take precedence over animations, and transitions have precedence over important values. Note: Transitions and animations Property values set by animation @keyframes are more important than all normal styles (those with no !important set). Property values being set in a transition take precedence over all other values set, even those marked with !important. The cascade algorithm is applied before the specificity algorithm, meaning if :root p { color: red;} is declared in the user stylesheet (line 2) and a less specific p {color: blue;} is in the author stylesheet (line 3), the paragraphs will be blue.Basic exampleBefore taking a deeper look at how cascade layers impact the cascade, let's look at an example involving multiple sources of CSS across the various origins, and work through the steps of the cascade algorithm: Here we have a user agent style sheet, two author style sheets, and a user stylesheet, with no inline styles within the HTML: User-agent CSS: li { margin-left: 10px; } Author CSS 1: li { margin-left: 0; } /* This is a reset */ Author CSS 2: @media screen { li {  margin-left: 3px; } } @media print { li {  margin-left: 1px; } } @layer namedLayer { li {  margin-left: 5px; } } User CSS: .specific { margin-left: 1em; } HTML: <ul> <li class=""specific"">1<sup>st</sup></li> <li>2<sup>nd</sup></li> </ul> In this case, declarations inside li and .specific rules should apply. Once again, there are four steps in the cascade algorithm, in order: Relevance Origin and importance Specificity Order of appearance The 1px is for print media. Due to lack of relevance based on its media type, it is removed from consideration. No declaration is marked as !important, so the precedence order is author style sheets over user style sheets over user-agent stylesheet. Based on origin and importance, the 1em from the user stylesheet and the 10px from the user-agent stylesheet are removed from consideration. Note that even though the user style on .specific of 1em has a higher specificity, it's a normal declaration in a user style sheet. As such, it has a lower precedence than any author styles, and gets removed by the origin and importance step of the algorithm before specificity even comes into play. There are three declarations in author stylesheets: li { margin-left: 0; } /* from author css 1 */ @media screen { li {  margin-left: 3px; } } @layer namedLayer { li {  margin-left: 5px; } } The last one, the 5px is part of a cascade layer. Normal declarations in layers have lower precedence than normal styles not in a layer within the same origin type. This is also removed by step 2 of the algorithm, origin and importance. This leaves the 0 and the 3px, which both have the same selector, hence the same specificity. We then look at order of appearance. The second one, the last of the two unlayered author styles, wins. margin-left: 3px; Note: The declaration defined in the user CSS, while it may have greater specificity, is not chosen as the cascade algorithm's origin and importance is applied before the specificity algorithm. The declaration defined in a cascade layer, though it may come later in the code, will not have precedence either as normal styles in cascade layers have less precedence than normal unlayered styles. Order of appearance only matters when both origin, importance, and specificity are equal. Author styles: inline styles, layers, and precedenceThe table in Cascading order provided a precedence order overview. The table summarized the user-agent, user, and author origin type styles in two lines each with ""origin type - normal"" and ""origin type - !important"". The precedence within each origin type is more nuanced. Styles can be contained within layers within their origin type, and, with author styles, there is also the issue of where inline styles land in the cascade order. The order in which layers are declared is important in determining precedence. Normal styles in a layer take precedence over styles declared in prior layers; with normal styles declared outside of any layer taking precedence over normal layered styles regardless of specificity. In this example, the author used CSS's @import rule to import five external style sheets within a <style> information element. <style> @import unlayeredStyles.css; @import AStyles.css layer(A); @import moreUnlayeredStyles.css; @import BStyles.css layer(B); @import CStyles.css layer(C); p {  color: red;  padding: 1em !important; } </style> and then in the body of the document we have inline styles: <p style=""line-height: 1.6em; text-decoration: overline !important;"">Hello</p>  In the CSS code block above, three cascade layers named ""A"", ""B"", and ""C"", were created, in that order. Three stylesheets were imported directly into layers and two were imported without creating or being assigned to a layer. The ""All unlayered styles"" in the list below (normal author style precedence - order 4) includes styles from these two stylesheets and the additional unlayered CSS style blocks. In addition, there are two inline styles, a normal line-height declaration and an important text-decoration declaration:  Order (low to high) Author style Importance  1 A - first layer normal 2 B - second layer normal 3 C - last layer normal 4 All unlayered styles normal 5 inline style normal 6 animations 7 All unlayered styles !important 8 C - last layer !important 9 B - second layer !important 10 A - first layer !important 11 inline style !important 12 transitions  In all origin types, the non important styles contained in layers have the lowest precedence. In our example, the normal styles associated with the first declared layer (A) have lower precedence than normal styles in the second declared layer (B), which have lower precedence than normal styles in the third declared layer (C). These layered styles have lower precedence than all normal unlayered styles, which includes normal styles from unlayeredStyles.css, moreUnlayeredStyles.css, and the color of p in the <style> itself. If any of the layered styles in A, B, or C, have selectors with higher specificity matching an element, similar to :root body p { color: black;}, it doesn't matter. Those declarations are removed from consideration because of origin; normal layered styles have less precedence than normal unlayered styles. If, however, the more specific selector :root body p { color: black;} was found in unlayeredStyles.css, as both origin and importance have the same precedence, specificity would mean the more specific, black declaration would win. The layer order of precedence is inverted for styles declared as !important. Important styles declared in a layer take precedence over important styles declared outside of a layer. Important styles in the first declared layer (A) take precedence over important declarations found in layer B, which takes precedence over C, which have precedence over important declarations in the unlayered styles.Inline stylesOnly relevant to author styles are inline styles, declared with the style attribute. Normal inline styles take precedence over any other normal author styles, no matter the specificity of the selector. If line-height: 2; were declared in a :root body p selector block in any of the five imported stylesheets, the line height would still be 1.6. Normal inline styles take precedence over any other normal author styles unless the property is being altered by a CSS animation. All important inline styles take precedence over all author styles, important and not, inline and not, layered and not. Important styles also take precedence over animated properties, but not transitioning properties. Three things can override an important inline style: 1) an important user style, 2) an important user agent style, or 3) a property value being transitioned.Importance and layersThe origin type precedence order is inverted for important styles. Important styles declared outside of any cascade layer have lower precedence than those declared as part of a layer. Important values that come in early layers have precedence over important styles declared in subsequent cascade layers. Take for example the following CSS: p { color: red; } @layer B { :root p {  color: blue; } } Even though the red is declared first and has a less specific selector, because unlayered CSS takes precedence over layered CSS, the paragraph will be red. Had we included an inline style on the paragraph setting it to a different color, such as <p style=""color: black"">, the paragraph would be black. When we add !important to this bit of CSS, the precedence order is reversed with the stylesheet: p { color: red !important; } @layer B { :root p {  color: blue !important; } } Now the paragraph will be blue. The !important in the earliest declared layer takes precedence of subsequent layers and unlayered important declarations. If the inline style contained !important, such as <p style=""color: black !important"">, again the paragraph would be black. Inline importance does take precedence over all other author declared !important declarations, no matter the specificity. Note: !important reverses the precedence of cascade layers. For this reason, rather than using !important to override external styles, import frameworks, third party styles, widget stylesheets, etc., into layers, demoting their precedence. !important should only be used sparingly, if ever, to guard required styles against later overrides, in the first declared layer. Styles that are transitioning take precedence over all important styles, no matter who or how they are declared.Complete cascade orderNow that we have a better understanding of origin type and cascade layer precedence, we realize the table in Cascading order could have more accurately been represented by the following table: Precedence Order(low to high) Style Origin Importance  1 user-agent - first declared layer normal user-agent - last declared layer user-agent - unlayered styles 2 user - first declared layer normal user - last declared layer user - unlayered styles 3 author - first declared layer normal author - last declared layer author - unlayered styles inline style 4 animations 5 author - unlayered styles !important author - last declared layer author - first declared layer inline style 6 user - unlayered styles !important user - last declared layer user - first declared layer 7 user-agent - unlayered styles !important user-agent - last declared layer user-agent - first declared layer 8 transitions Which CSS entities participate in the cascadeOnly CSS property/value pair declarations participate in the cascade. This means that at-rules containing entities other than declarations, such as a @font-face rule containing descriptors, don't participate in the cascade. For the most part, the properties and descriptors defined in at-rules don't participate in the cascade. Only at-rules as a whole participate in the cascade. For example, within a @font-face rule, font names are identified by font-family descriptors. If several @font-face rules with the same descriptor are defined, only the most appropriate @font-face, as a whole, is considered. If more than one are identically appropriate, the entire @font-face declarations are compared using steps 1, 2, and 4 of the algorithm (there is no specificity when it comes to at-rules). While the declarations contained in most at-rules â such as those in @media, @document, or @supports â participate in the cascade, the at-rule may make an entire selector not relevant, as we saw with the print style in the basic example. Declarations in @keyframes don't participate in the cascade. As with @font-face, only the @keyframes as a whole is selected via the cascade algorithm. The precedence order of animation is described below. When it comes to @import, the @import doesn't participate itself in the cascade, but all of the imported styles do participate. If the @import defines a named or anonymous layer, the contents of the imported stylesheet are placed into the specified layer. All other CSS imported with @import is treated as the last declared layer. This was discussed above. Finally, @charset obeys specific algorithms and isn't affected by the cascade algorithm.CSS animations and the cascadeCSS animations, using @keyframes at-rules, define animations between states. Keyframes don't cascade, meaning that at any given time CSS takes values from only one single @keyframes, and never mixes multiple ones together. If the several keyframe animations are defined with the same animation name, the last defined @keyframes in the origin and layer with the greatest precedence. Only one @keyframes definition is used, even if the @keyframes animate different property. @keyframes with the same name are never combined. p { animation: infinite 5s alternate repeatedName; } @keyframes repeatedName { from {  font-size: 1rem; } to {  font-size: 3rem; } } @layer A { @keyframes repeatedName {  from {  background-color: yellow;  }  to {  background-color: orange;  } } } @layer B { @keyframes repeatedName {  from {  color: white;  }  to {  color: black;  } } } In this example, there are three separate animation declaration named repeatedName. When animation: infinite 5s alternate repeatedName is applied to the paragraph, only one animation is applied: the keyframe animation defined in the unlayered CSS takes precedence over the layered keyframe animation declarations based on origin and cascade layer precedence order. In this example, only the element's font size will be animated. Note: There are no important animations, as property declarations in a @keyframes block that contain !important as part of the value are ignored. Resetting stylesAfter your content has finished altering styles, it may find itself in a situation where it needs to restore them to a known state. This may happen in cases of animations, theme changes, and so forth. The CSS property all lets you quickly set (almost) everything in CSS back to a known state. all lets you opt to immediately restore all properties to any of their initial (default) state, the state inherited from the previous level of the cascade, a specific origin (the user-agent stylesheet, the author stylesheet, or the user stylesheet), or even to clear the values of the properties entirely.SpecificationsSpecificationCSS Cascading and Inheritance Level 4 See also A very simple introduction to the CSS cascade CSS key concepts:  CSS syntax At-rules Comments Specificity Inheritance Box model Layout modes Visual formatting models Margin collapsing Values   Initial values Computed values Used values Actual values Value definition syntax Shorthand properties Replaced elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 16, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
65,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay/event,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay/event. HTMLMediaElement: canplay event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementcanplayArticle ActionsEnglish (US)In this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()Eventsabortcanplay canplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetIn this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElement: canplay eventThe canplay event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content. This event is not cancelable and does not bubble.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""canplay"", (event) => {}); oncanplay = (event) => {}; Event typeA generic Event.ExamplesThese examples add an event listener for the HTMLMediaElement's canplay event, then post a message when that event handler has reacted to the event firing. Using addEventListener(): const video = document.querySelector(""video""); video.addEventListener(""canplay"", (event) => { console.log(""Video can start, but not sure it will play through.""); }); Using the oncanplay event handler property: const video = document.querySelector(""video""); video.oncanplay = (event) => { console.log(""Video can start, but not sure it will play through.""); }; SpecificationsSpecificationHTML Standard # event-media-canplayHTML Standard # handler-oncanplayBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Related Events The HTMLMediaElement playing event The HTMLMediaElement waiting event The HTMLMediaElement seeking event The HTMLMediaElement seeked event The HTMLMediaElement ended event The HTMLMediaElement loadedmetadata event The HTMLMediaElement loadeddata event The HTMLMediaElement canplay event The HTMLMediaElement canplaythrough event The HTMLMediaElement durationchange event The HTMLMediaElement timeupdate event The HTMLMediaElement play event The HTMLMediaElement pause event The HTMLMediaElement ratechange event The HTMLMediaElement volumechange event The HTMLMediaElement suspend event The HTMLMediaElement emptied event The HTMLMediaElement stalled event See also HTMLAudioElement HTMLVideoElement <audio> <video> Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
66,developer.mozilla.org/en-US/docs/Web/API/Event/target,"developer.mozilla.org/en-US/docs/Web/API/Event/target. Event: target property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsEventtargetArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelEventConstructorEvent()Instance propertiesbubblescancelablecancelBubble Deprecated composedcurrentTargetdefaultPreventedeventPhaseexplicitOriginalTarget Non-standard isTrustedoriginalTarget Non-standard returnValue Deprecated srcElement Deprecated target timeStamptypeInstance methodscomposedPath()initEvent() Deprecated preventDefault()stopImmediatePropagation()stopPropagation()Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoEvent: target property The read-only target property of the Event interface is a reference to the object onto which the event was dispatched. It is different from Event.currentTarget when the event handler is called during the bubbling or capturing phase of the event. ValueThe associated EventTarget.ExampleThe event.target property can be used in order to implement event delegation. // Make a list const ul = document.createElement(""ul""); document.body.appendChild(ul); const li1 = document.createElement(""li""); const li2 = document.createElement(""li""); ul.appendChild(li1); ul.appendChild(li2); function hide(evt) { // evt.target refers to the clicked <li> element // This is different than evt.currentTarget, which would refer to the parent <ul> in this context evt.target.style.visibility = ""hidden""; } // Attach the listener to the list // It will fire when each <li> is clicked ul.addEventListener(""click"", hide, false); SpecificationsSpecificationDOM Standard # ref-for-dom-event-targetâ¢Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Comparison of Event Targets Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
67,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect. CanvasRenderingContext2D: rect() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2Drect()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect() reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: rect() method The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current path.  Like other methods that modify the current path, this method does not directly render anything. To draw the rectangle onto a canvas, you can use the fill() or stroke() methods. Note: To both create and render a rectangle in one step, use the  fillRect() or  strokeRect() methods. Syntaxrect(x, y, width, height)  The rect() method creates a rectangular path whose starting point is at (x, y) and whose size is specified by width and height. Parameters x The x-axis coordinate of the rectangle's starting point. y The y-axis coordinate of the rectangle's starting point. width The rectangle's width. Positive values are to the right, and negative to the left. height The rectangle's height. Positive values are down, and negative are up. Return valueNone (undefined).ExamplesDrawing a rectangle This example creates a rectangular path using the rect() method. The path is then rendered using the fill() method. HTML <canvas id=""canvas""></canvas> JavaScript The rectangle's corner is located at (10, 20). It has a width of 150 and a height of 100. const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.rect(10, 20, 150, 100); ctx.fill(); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-rect-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D CanvasRenderingContext2D.fillRect CanvasRenderingContext2D.strokeRect() CanvasRenderingContext2D.fill() CanvasRenderingContext2D.stroke() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
68,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback. HTMLMediaElement: disableRemotePlayback property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementdisableRemotePlaybackArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlayback durationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: disableRemotePlayback property The HTMLMediaElement.disableRemotePlayback property determines whether the media element is allowed to have a remote playback UI. Value A boolean value indicating whether the media element may have a remote playback UI. (false means ""not disabled"", which means ""enabled"") Exampleconst obj = document.createElement(""audio""); obj.disableRemotePlayback = true; SpecificationsSpecificationRemote Playback API # the-disableremoteplayback-attributeBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.disableRemotePlayback property Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
69,developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace,"developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace. Node: isDefaultNamespace() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodeisDefaultNamespace()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace() isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: isDefaultNamespace() method The isDefaultNamespace() method of the Node interface accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not. Note: The default namespace of an HTML element is always """". For a SVG element, it is set by the xmlns attribute. SyntaxisDefaultNamespace(namespaceURI) Parameters namespaceURI A string representing the namespace against which the element will be checked. Note: namespaceURI is not an optional parameter, but can be null. Return value A boolean value that holds the return value true or false, indicating if the parameter is the default namespace, or not. ExampleIs """" the default namespace for &lt;output&gt;: <output>Not tested</output>.<br /> Is ""http://www.w3.org/2000/svg"" the default namespace for &lt;output&gt;: <output>Not tested</output>.<br /> Is """" the default namespace for &lt;svg&gt;: <output>Not tested</output>.<br /> Is ""http://www.w3.org/2000/svg"" the default namespace for &lt;svg&gt;: <output>Not tested</output>.<br /> <svg xmlns=""http://www.w3.org/2000/svg"" height=""1""></svg> <button>Click to see the results</button> const button = document.querySelector(""button""); button.addEventListener(""click"", () => { const aHtmlElt = document.querySelector(""output""); const aSvgElt = document.querySelector(""svg""); const result = document.getElementsByTagName(""output""); result[0].value = aHtmlElt.isDefaultNamespace(""""); // true result[1].value = aHtmlElt.isDefaultNamespace(""http://www.w3.org/2000/svg""); // false result[2].value = aSvgElt.isDefaultNamespace(""""); // true result[3].value = aSvgElt.isDefaultNamespace(""http://www.w3.org/2000/svg""); // false }); SpecificationsSpecificationDOM Standard # dom-node-isdefaultnamespaceBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.lookupNamespaceURI Node.lookupPrefix Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
70,developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent,"developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent. ProgressEvent: ProgressEvent() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsProgressEventProgressEvent()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilitySee alsoXMLHttpRequestProgressEventConstructorProgressEvent() Instance propertieslengthComputableloadedtotalInheritance:EventRelated pages for XMLHttpRequestFormDataXMLHttpRequestXMLHttpRequestEventTargetXMLHttpRequestUploadIn this articleSyntaxSpecificationsBrowser compatibilitySee alsoProgressEvent: ProgressEvent() constructorThe ProgressEvent() constructor returns a new ProgressEvent object, representing the current completion of a long process.Syntaxnew ProgressEvent(type) new ProgressEvent(type, options) Parameters type   A string with the name of the event.  It is case-sensitive and browsers set it to loadstart, progress, abort, error, load, timeout, or loadend.  options Optional An object that, in addition of the properties defined in Event(), can have the following properties: lengthComputable Optional    A boolean value indicating if the total work to be done, and the   amount of work already done, by the underlying process is calculable. In other words,   it tells if the progress is measurable or not. It defaults to false.   loaded Optional    A number representing the amount of work already   performed by the underlying process. The ratio of work done can be calculated with the   property and ProgressEvent.total. When downloading a resource using HTTP,   this only represent the part of the content itself, not headers and other overhead. It   defaults to 0.   total Optional    A number representing the total amount of work that the   underlying process is in the progress of performing. When downloading a resource using   HTTP, this only represent the content itself, not headers and other overhead. It   defaults to 0.    Return valueA new ProgressEvent object.SpecificationsSpecificationXMLHttpRequest Standard # dom-progressevent-progresseventBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The ProgressEvent interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
71,developer.mozilla.org/en-US/docs/Web/API/Attr/value,"developer.mozilla.org/en-US/docs/Web/API/Attr/value. Attr: value property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrvalueArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilityDocument Object ModelAttrInstance propertieslocalNamenamenamespaceURIownerElementprefixspecified Deprecated value Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilityAttr: value propertyThe value property of the Attr interface contains the value of the attribute.ValueA string representing the attribute value.ExampleThe following example displays the current value of the attribute test. Clicking on the button will change it to a different value, and read it again to update the displayed value.HTML<label test=""initial value""></label> <button>Click me to set test to <code>""a new value""</code>â¦</button> <p> Current value of the <code>test</code> attribute: <output id=""result"">None.</output> </p> JavaScriptconst element = document.querySelector(""label""); const button = document.querySelector(""button""); const result = document.querySelector(""#result""); const attribute = element.attributes[0]; result.value = attribute.value; button.addEventListener(""click"", () => { attribute.value = ""a new value""; result.value = attribute.value; }); SpecificationsSpecificationDOM Standard # dom-attr-valueBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
72,developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#invalid/selector/list,"developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#invalid/selector/list. Selector list - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSSelector listArticle ActionsEnglish (US)In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee alsoSelector listThe CSS selector list (,) selects all the matching nodes. A selector list is a comma-separated list of selectors.DescriptionWhen multiple selectors share the same declarations, they can be grouped together into a comma-separated list. Selector lists can also be passed as parameters to some functional CSS pseudo-classes. White space may appear before and/or after the comma. The following three declarations are equivalent: span { border: red 2px solid; } div { border: red 2px solid; } span, div { border: red 2px solid; } :is(span, div) { border: red 2px solid; } ExamplesWhen applying the same styles to elements matching different criteria, grouping the selectors in a comma-separated list can improve consistency while reducing the size of style sheets.Single line groupingThis example shows grouping selectors in a single line using a comma-separated list. h1, h2, h3, h4, h5, h6 { font-family: helvetica; } Multi line groupingThis example shows grouping selectors in multiple lines using a comma-separated list. #main, .content, article, h1 + p { font-size: 1.1em; } Valid and invalid selector listsAn invalid selector represents, and therefore matches, nothing. When a selector list contains an invalid selector, the entire style block is ignored, except for the :is() and :where() pseudo-classes that accept forgiving selector lists.Invalid selector listA downside to using a selector list is that a single unsupported selector in the selector list invalidates the entire rule. Consider the following two CSS rule sets: h1 { font-family: sans-serif; } h2:invalid-pseudo { font-family: sans-serif; } h3 { font-family: sans-serif; } h1, h2:invalid-pseudo, h3 { font-family: sans-serif; } They are not equivalent. In the first rule set, styles will be applied on the h1 and h3 elements, but the h2:invalid-pseudo rule will not be parsed. In the second rule set, because one selector in the list is invalid, the entire rule will not be parsed. Because of this, no style will be applied to the h1 and h3 elements as when any selector in a list of selectors in invalid, the entire style block will be ignored.Forgiving selector listA way to remedy the invalid selector list problem is to use the :is() or the :where() pseudo-class, which accept a forgiving selector list. Each selector in a forgiving selector list is parsed individually. So any invalid selectors in the list are ignored and the valid ones are used. Carrying on from the previous example, the following two CSS rule sets are now equivalent: h1 { font-family: sans-serif; } h2:maybe-unsupported { font-family: sans-serif; } h3 { font-family: sans-serif; } :is(h1, h2:maybe-unsupported, h3) { font-family: sans-serif; } The difference between the two is that the specificity of :is() is its most specific argument, whereas the :where() selector and the forgiving selector list parameter do not add any specificity weight.Relative selector listA relative selector list is a comma-separated selector list parsed as relative selectors, which begin with an explicit or implied combinator. h2:has(+ p, + ul.red) { font-style: italic; } In the above example, the italic style will be applied to any h2 heading that is immediately followed by <p> or <ul class=""red"">. Note that pseudo-elements and the :has() selector are not valid within the :has() relative selector list.SpecificationsSpecificationSelectors Level 4 # groupingBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The :is() and :where() pseudo-classes accept forgiving selector lists. The :not() pseudo-class accepts a regular selector list The :has() pseudo-class accepts a relative selector list. CSS selectors Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 30, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
73,developer.mozilla.org/en-US/docs/Web/API/Document/dragstart/event,"developer.mozilla.org/en-US/docs/Web/API/Document/dragstart/event. HTMLElement: dragstart event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdragstartArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover Experimental styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover() Experimental showPopover() Experimental togglePopover() Experimental Eventsbeforeinputbeforetoggle Experimental changecopycutdragdragenddragenterdragleavedragoverdragstart droperrorinputloadmscandidatewindowhide Non-standard mscandidatewindowshow Non-standard mscandidatewindowupdate Non-standard pastetoggle Experimental Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: dragstart eventThe dragstart event is fired when the user starts dragging an element or text selection.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""dragstart"", (event) => {}); ondragstart = (event) => {}; Event typeA DragEvent. Inherits from Event.   Event     UIEvent     MouseEvent     DragEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ExamplesSetting opacity on drag startIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it, and then releasing it. We listen for the dragstart event to make the element half transparent while it is being dragged. For a more complete example of drag and drop, see the page for the drag event. HTML <div id=""container""> <div id=""draggable"" draggable=""true"">This div is draggable</div> </div> <div class=""dropzone""></div> CSS body { /* Prevent the user selecting text in the example */ user-select: none; } #draggable { text-align: center; background: white; } #container { width: 200px; height: 20px; background: blueviolet; padding: 10px; } .dragging { opacity: 0.5; } JavaScript const source = document.getElementById(""draggable""); source.addEventListener(""dragstart"", (event) => { // make it half transparent event.target.classList.add(""dragging""); }); source.addEventListener(""dragend"", (event) => { // reset the transparency event.target.classList.remove(""dragging""); }); ResultSpecificationsSpecificationHTML Standard # ix-handler-ondragstartHTML Standard # event-dnd-dragstartBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Other drag and drop events:  drag dragend dragover dragenter dragleave drop This event on other targets:  Window: dragstart event Document: dragstart event SVGElement: dragstart event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
74,developer.mozilla.org/en-US/docs/Web/CSS/CSS/Selectors#relative/selector,"developer.mozilla.org/en-US/docs/Web/CSS/CSS/Selectors#relative/selector. CSS selectors - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSCSS selectorsArticle ActionsEnglish (US)In this articleBasic selectorsGrouping selectorsCombinatorsPseudo-classes and pseudo-elementsStructure of a selectorSpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleBasic selectorsGrouping selectorsCombinatorsPseudo-classes and pseudo-elementsStructure of a selectorSpecificationsSee alsoCSS selectorsCSS selectors define the pattern to select elements to which a set of CSS rules are then applied. CSS selectors can be grouped into the following categories based on the type of elements they can select.Basic selectors Universal selector Selects all elements. Optionally, it may be restricted to a specific namespace or to all namespaces. Syntax: * ns|* *|* Example: * will match all the elements of the document. Type selector Selects all elements that have the given node name. Syntax: elementname Example: input will match any <input> element. Class selector Selects all elements that have the given class attribute. Syntax: .classname Example: .index will match any element that has class=""index"". ID selector Selects an element based on the value of its id attribute. There should be only one element with a given ID in a document. Syntax: #idname Example: #toc will match the element that has id=""toc"". Attribute selector Selects all elements that have the given attribute. Syntax: [attr] [attr=value] [attr~=value] [attr|=value] [attr^=value] [attr$=value] [attr*=value] Example: [autoplay] will match all elements that have the autoplay attribute set (to any value). Grouping selectors Selector list The , selector is a grouping method that selects all the matching nodes. Syntax: A, B Example: div, span will match both <span> and <div> elements. Combinators Descendant combinator The "" "" (space) combinator selects nodes that are descendants of the first element. Syntax: A B Example: div span will match all <span> elements that are inside a <div> element. Child combinator The > combinator selects nodes that are direct children of the first element. Syntax: A > B Example: ul > li will match all <li> elements that are nested directly inside a <ul> element. General sibling combinator The ~ combinator selects siblings. This means that the second element follows the first (though not necessarily immediately), and both share the same parent. Syntax: A ~ B Example: p ~ span will match all <span> elements that follow a <p>, immediately or not. Adjacent sibling combinator The + combinator matches the second element only if it immediately follows the first element. Syntax: A + B Example: h2 + p will match the first <p> element that immediately follows an h2 element. Column combinator Experimental The || combinator selects nodes which belong to a column. Syntax: A || B Example: col || td will match all <td> elements that belong to the scope of the <col>. Pseudo-classes and pseudo-elements Pseudo classes The : pseudo allow the selection of elements based on state information that is not contained in the document tree. Example: a:visited will match all <a> elements that have been visited by the user. Pseudo elements The :: pseudo represent entities that are not included in HTML. Example: p::first-line will match the first line of all <p> elements. Structure of a selectorThe term 'selector' can refer to one of the following: Simple selector A selector with a single component, such as a single id selector or type selector, that's not used in combination with or contains any other selector component or combinator. A given element is said to match a simple selector when that simple selector accurately describes the element. All basic selectors, attributes, and single pseudo-classes and pseudo-elements are simple selectors. Compound selector A sequence of simple selectors that are not separated by a combinator. A compound selector represents a set of simultaneous conditions on a single element. A given element is said to match a compound selector when the element matches all the simple selectors in the compound selector. In a compound selector, the type selector or a universal selector in a compound selector must come first in the sequence of selectors. Only one type selector or universal selector is allowed in the sequence. Since whitespace represents the descendant combinator, no whitespace is allowed between the simple selectors in a compound selector. Example: a#selected {...} Complex selector A sequence of one or more simple and/or compound selectors that are separated by combinators. A complex selector represents a set of simultaneous conditions on a set of elements. These conditions apply in the context of relationships described by the combinators. A given element is said to match a complex selector when the element matches compound selectors and the combinators between the compound selectors. Examples: a#selected > .icon {...}, .box h2 + p {...}, a .icon {...} Relative selector A selector representing an element relative to one or more anchor elements preceded by a combinator. Relative selectors that don't begin with an explicit combinator have an implied descendant combinator. Examples: + div#topic > #reference {...}, > .icon {...}, dt:has(+ img) ~ dd {...} Selector list A comma-separated list of simple, compound, or complex selectors. If the constituent selector type of a selector list is important but unspecified, it is called a complex selector list. A given element is said to match a selector list when the element matches any (at least one) of the selectors in that selector list. Read more about when a selector list is deemed invalid and how to construct a forgiving selector list. Example: #main, article.heading {...} SpecificationsSpecificationSelectors Level 4 See the pseudo-class and pseudo-element specification tables for details on those.See also :has() pseudo class CSS Specificity Selector list Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
75,developer.mozilla.org/en-US/docs/Web/API/Canvas/API/Manipulating/video/using/canvas,"developer.mozilla.org/en-US/docs/Web/API/Canvas/API/Manipulating/video/using/canvas. Manipulating video using canvas - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvas APIManipulating video using canvasArticle ActionsEnglish (US)In this articleThe document contentThe JavaScript codeSee alsoCanvas APIGuidesManipulating video using canvasTutorialCanvas tutorialBasic usage of canvasDrawing shapes with canvasApplying styles and colorsDrawing textUsing imagesTransformationsCompositing and clippingBasic animationsAdvanced animationsPixel manipulation with canvasOptimizing canvasFinaleInterfacesCanvasGradientCanvasPatternCanvasRenderingContext2DHTMLCanvasElementImageBitmapImageBitmapRenderingContextImageDataOffscreenCanvasPath2DTextMetricsMethodscreateImageBitmapIn this articleThe document contentThe JavaScript codeSee alsoManipulating video using canvasBy combining the capabilities of the video element with a canvas, you can manipulate video data in real time to incorporate a variety of visual effects to the video being displayed. This tutorial demonstrates how to perform chroma-keying (also known as the ""green screen effect"") using JavaScript code.The document contentThe HTML document used to render this content is shown below. <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>Video test page</title>  <style>  body {   background: black;   color: #cccccc;  }  #c2 {   background-image: url(media/foo.png);   background-repeat: no-repeat;  }  div {   float: left;   border: 1px solid #444444;   padding: 10px;   margin: 10px;   background: #3b3b3b;  }  </style> </head> <body>  <div>  <video   id=""video""   src=""media/video.mp4""   controls=""true""   crossorigin=""anonymous"" />  </div>  <div>  <canvas id=""c1"" width=""160"" height=""96""></canvas>  <canvas id=""c2"" width=""160"" height=""96""></canvas>  </div>  <script src=""processor.js""></script> </body> </html> The key bits to take away from this are: This document establishes two canvas elements, with the IDs c1 and c2. Canvas c1 is used to display the current frame of the original video, while c2 is used to display the video after performing the chroma-keying effect; c2 is preloaded with the still image that will be used to replace the green background in the video. The JavaScript code is imported from a script named processor.js. The JavaScript codeThe JavaScript code in processor.js consists of three methods.Initializing the chroma-key playerThe doLoad() method is called when the HTML document initially loads. This method's job is to prepare the variables needed by the chroma-key processing code, and to set up an event listener so we can detect when the user starts playing the video. const processor = {}; processor.doLoad = function doLoad() { const video = document.getElementById(""video""); this.video = video; this.c1 = document.getElementById(""c1""); this.ctx1 = this.c1.getContext(""2d""); this.c2 = document.getElementById(""c2""); this.ctx2 = this.c2.getContext(""2d""); video.addEventListener(  ""play"",  () => {  this.width = video.videoWidth / 2;  this.height = video.videoHeight / 2;  this.timerCallback();  },  false ); }; This code grabs references to the elements in the HTML document that are of particular interest, namely the video element and the two canvas elements. It also fetches references to the graphics contexts for each of the two canvases. These will be used when we're actually doing the chroma-keying effect. Then addEventListener() is called to begin watching the video element so that we obtain notification when the user presses the play button on the video. In response to the user beginning playback, this code fetches the width and height of the video, halving each (we will be halving the size of the video when we perform the chroma-keying effect), then calls the timerCallback() method to start watching the video and computing the visual effect.The timer callbackThe timer callback is called initially when the video starts playing (when the ""play"" event occurs), then takes responsibility for establishing itself to be called periodically in order to launch the keying effect for each frame. processor.timerCallback = function timerCallback() { if (this.video.paused || this.video.ended) {  return; } this.computeFrame(); setTimeout(() => {  this.timerCallback(); }, 0); }; The first thing the callback does is check to see if the video is even playing; if it's not, the callback returns immediately without doing anything. Then it calls the computeFrame() method, which performs the chroma-keying effect on the current video frame. The last thing the callback does is call setTimeout() to schedule itself to be called again as soon as possible. In the real world, you would probably schedule this to be done based on knowledge of the video's frame rate.Manipulating the video frame dataThe computeFrame() method, shown below, is responsible for actually fetching a frame of data and performing the chroma-keying effect. processor.computeFrame = function () { this.ctx1.drawImage(this.video, 0, 0, this.width, this.height); const frame = this.ctx1.getImageData(0, 0, this.width, this.height); const data = frame.data; for (let i = 0; i < data.length; i += 4) {  const red = data[i + 0];  const green = data[i + 1];  const blue = data[i + 2];  if (green > 100 && red > 100 && blue < 43) {  data[i + 3] = 0;  } } this.ctx2.putImageData(frame, 0, 0); }; When this routine is called, the video element is displaying the most recent frame of video data, which looks like this: In line 2, that frame of video is copied into the graphics context ctx1 of the first canvas, specifying as the height and width the values we previously saved to draw the frame at half size. Note that you can pass the video element into the context's drawImage() method to draw the current video frame into the context. The result is: Line 3 fetches a copy of the raw graphics data for the current frame of video by calling the getImageData() method on the first context. This provides raw 32-bit pixel image data we can then manipulate. Line 4 computes the number of pixels in the image by dividing the total size of the frame's image data by four. The for loop that begins on line 6 scans through the frame's pixels, pulling out the red, green, and blue values for each pixel, and compares the values against predetermined numbers that are used to detect the green screen that will be replaced with the still background image imported from foo.png. Every pixel in the frame's image data that is found that is within the parameters that are considered to be part of the green screen has its alpha value replaced with a zero, indicating that the pixel is entirely transparent. As a result, the final image has the entire green screen area 100% transparent, so that when it's drawn into the destination context in line 13, the result is an overlay onto the static backdrop. The resulting image looks like this: This is done repeatedly as the video plays, so that frame after frame is processed and displayed with the chroma-key effect. View the full source for this example.See also Web media technologies Guide to media types and formats on the web Learning area: Video and audio content Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
76,developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Understandable,"developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding/WCAG/Understandable. Understandable - Accessibility | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesAccessibilityUnderstanding the Web Content Accessibility GuidelinesUnderstandableArticle ActionsEnglish (US)In this articleGuideline 3.1 â Readable: Make text content readable and understandableGuideline 3.2 â Predictable: Make Web pages appear and operate in predictable waysGuideline 3.3 â Input Assistance: Help users avoid and correct mistakesSee also KeyboardOperablePerceivablePerceivableColor contrastUse of colorRobustText labels and namesUnderstandable In this articleGuideline 3.1 â Readable: Make text content readable and understandableGuideline 3.2 â Predictable: Make Web pages appear and operate in predictable waysGuideline 3.3 â Input Assistance: Help users avoid and correct mistakesSee alsoUnderstandableThis article provides practical advice on how to write your web content so that it conforms to the success criteria outlined in the Understandable principle of the Web Content Accessibility Guidelines (WCAG) 2.0 and 2.1. Understandable states that information and the operation of user interface must be understandable. Note: To read the W3C definitions for Understandable and its guidelines and success criteria, see Principle 3: Understandable â Information and the operation of user interface must be understandable. Guideline 3.1 â Readable: Make text content readable and understandableThis guideline focuses on making text content as understandable as possible. Success criteria How to conform to the criteria Practical resource  3.1.1 Language of Page (A)   The default human language of each web page should be detectable via   code. This is essential for purposes like making sure the reader has   arrived at a page written in a language suitable for them. The simplest   way to achieve this is to set the lang   attribute on the page's <html> element, giving   it a value equal to the language code that best represents the language   the page is written in.     See   Setting the primary language of the document.   3.1.2 Language of Parts (AA)    In cases where the content of a page includes words or phrases that   are in a different language to the primary language, use the   lang attribute on an element wrapped   around the term in question (e.g. a <span>   if no semantic element is available) to set an appropriate language   for it.      You don't need to set a different language for words or phrases that   are the same regardless of language (for example proper names,   technical terms that aren't part of a specific language).    3.1.3 Unusual Words (AAA)   Where technical terms, jargon, or idioms/slang are used, definitions   should be provided for such phrases/words. Your site should provide a   glossary that contains definitions of such words/terms that you can then   link to when they appear, or at the very least provide definitions   somewhere in the surrounding text, or in a   description list   at the bottom of the page.   3.1.4 Abbreviations (AAA)    Where abbreviations are used, you should provide an expansion of them,   or a definition as required.      The <abbr> element is often thought of as   the preferred way to provide an expansion for an abbreviation â it   takes a title attribute that contains the   expansion, and this appears when the acronym is moused over. However,   the title contents are not accessible via keyboard, nor are they   reliably read out by screen readers. A better way to handle this is to   again provide links to glossary pages containing the acronym expansion   and explanation, or at the very least include them in the surrounding   text in context.     See   Abbreviations.   3.1.5 Reading Level (AAA)    If text is provided that requires a higher reading level that lower   secondary education level (typically children around 11-14 years old),   provide supplementary explainer material to help people who can't read   it, or provide an alternative version that is written at lower   secondary level.      This doesn't mean that all subject matter should be understood by   everyone, but that the style of writing should be accessible by   everyone. It is better to just write all content at lower secondary   level, even technical documentation like programming tutorials, unless   there is a good reason not to (e.g. an alternative style for poetic   effect), or they have to be written in a strict style (e.g. W3C   specs).    3.1.6 Pronunciation (AAA)    A mechanism should be provided to give users access to pronunciation   of words where they are is needed to understand the content fully.      The HTML <audio> element can be used to   create a control that allows the reader to play back an audio file   containing the correct pronunciation, and it also makes sense to   include a textual pronunciation guide after difficult words, in the   same way that you find in dictionary entries.     See   Video and audio content, and   Pronunciation Guide for English Dictionary  Note: Also see the WCAG description for Guideline 3.1 Readable: Make text content readable and understandable. Guideline 3.2 â Predictable: Make Web pages appear and operate in predictable waysThis guideline focuses on making user interfaces intuitive and understandable. Success criteria How to conform to the criteria Practical resource  3.2.1 On Focus (A)    When a control or other page feature receives focus, it should not   change the context in a way that may confuse or disorientate the user.      This is a matter of sensible design â people don't want interfaces to   surprise them; they want things to be intuitive and behave as   expected. For example, focusing a navigation menu option should not   change the displayed page â it should be activated before the display   changes.   Element.focus_event contains some   useful information. Also see   Building keyboard accessibility back in   for some useful implementation ideas.   3.2.2 On Input (A)    When data is inputted into a control, or a setting is changed, context   should not be changed unexpectedly. The user should be warned/advised   of the impending change before it occurs.      Again, sensible design should be implemented. For example, if pressing   a button causes the application to exit the current view, the user   should be asked to confirm this action, save their work if   appropriate, etc.   HTMLElement.oninput is useful here. 3.2.3 Consistent Navigation (AA)    Navigation menu/control style and positioning should be consistent   between different pages or views of a web page, and the existing items   should appear in the same order, even if for example new items are   added. If the user has initiated a change, e.g. choosing a different   color scheme or position for the navigation, their choice should be   respected across all pages.      Again, sensible design â make the navigation controls the same across   all pages or views.     See   Page layouts   for information on modern markup for layouts. See also   Styling links as buttons   for a useful accessible navigation menu example.   3.2.4 Consistent Identification (AA)    Controls or components that have the same functionality should be   identified in the same way across different pages or views. A currency   converter appearing on every page of a world travel site for example   should be exactly the same, semantically and in terms of labels.   Again, sensible design!   ""Labels"" can refer to descriptive information in text content, or HTML   form labels. See   Meaningful text labels   for more information.   3.2.5 Change on Request (AAA)    Changes in context that could possibly confuse or disorient users   should only occur only when requested by the user, OR the user should   be able to turn them off.      If you need to have something that significantly changes the current   view (e.g. content or controls), let the user control when they want   that change to occur (e.g. what page to show, when to advance to the   next photo in the gallery...)      If you need to have something like a carousel on a page, provide an   option to stop it automatically advancing. Better to avoid such   functionality if possible.    Note: Also see the WCAG description for Guideline 3.2 Predictable: Make Web pages appear and operate in predictable ways. Guideline 3.3 â Input Assistance: Help users avoid and correct mistakesThis guideline centers around helping users enter correct information when required with the minimum of mistakes. Success criteria How to conform to the criteria Practical resource  3.3.1 Error Identification (A)    When a user is filling out a form or choosing between options, any   error that is detected should be clearly reported to the user, along   with the form control that the error relates to.      It is advisable to implement client-side error detection and handling,   via HTML form validation features, and/or JavaScript, whatever is   best for your situation. When an error is detected, an intuitive error   message should be shown next to the form input that is at fault to   help the user correct their inputs. For screen reader users, you can   use aria live regions to alert the user to a change on the page.   Note: Server-side validation should *always* be    used alongside client-side validation. Client-side validation is too    easy to turn off or otherwise get around, so it can't be relied on    alone.      See   Form data validation   for comprehensive validation information, and   WAI-ARIA: Dynamic content updates   for information on live regions.   3.3.2 Labels or Instructions (A)    Clear instructions should be provided when data input is required.   When a simple instruction or prompt is required, you can use   <label> elements for single inputs like name   or age, a combination or <label>s and   <fieldset>s/<legend>s   for multiple inputs that go together (like the elements of a date of   birth or postal address).      When more complex explanation is required, you can always include   explanatory paragraphs too, or maybe you need to try to make your   forms more intuitive.    Meaningful text labels How to structure an HTML form Text labels and names  3.3.3 Error Suggestion (AA)    When an error is detected and suggestions for correction are known,   provide these to the user (e.g. suggesting alternatives when the user   is choosing a user name and has selected one that is already taken),   unless doing so would cause a security issue (e.g. when entering a   password) or context problem (e.g. they are trying to answer a   question in a quiz app).      In such cases, when this is appropriate, you'll probably use a   combination of JavaScript and server-side functionality to check if   the entry is correct, and if not, what viable suggestions can be given   to the user. Such suggestions should be displayed usefully in context,   just like error messages (see 3.3.1).   No tutorial suggestions yet. 3.3.4 Error Prevention (Legal, Financial, Data) (AA)    In the case of forms involved with entry of sensitive data (such as   legal agreements, e-commerce transactions, or personal data), at least   one of the following should be true:   Submissions are reversible.    Data is checked for errors, and the user is given an opportunity to    correct them.       A mechanism is available for confirming and correcting information    before final submission.    Reversible â for any view where data can be entered,   provide an equivalent view that allows you to edit or even delete an   entry, as appropriate (for example, see   Django web framework).   Checking data â as covered in 3.3.1, a combination of   client-side and server-side validation should be used to detect errors   and display helpful messages to the user to allow them to correct   their inputs.   Confirm and correct â where appropriate, after   filling in a series of form fields to perform a task (such as buying a   product), the user should be shown a confirmation screen where they   can review their inputs and correct anything that doesn't look right.   This pattern is commonly used on e-commerce sites like Amazon.    3.3.5 Context-sensitive help is available (AAA)   Provide instructions and other appropriate cues in context to aid form   completion and submission.     This really just builds on 3.3.1 and other similar criteria but requires   more thorough contextual help information and services, e.g. providing a   dedicated link to a help page or service on each page, providing   examples showing what successful completion should look like.   3.3.6 Error Prevention (All) (AAA)   This principle builds on 3.3.4, extending its requirements to all user   input situations, not just ones involving sensitive data.  Again, see 3.3.4.  Note: Also see the WCAG description for Guideline 3.3 Input Assistance: Help users avoid and correct mistakes. See also WCAG Perceivable Operable Understandable Robust Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
77,developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#array/literals,"developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#array/literals. Grammar and types - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptGuideGrammar and typesArticle ActionsEnglish (US)In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore information JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore informationGrammar and types Â« Previous Next Â» This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.BasicsJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python. JavaScript is case-sensitive and uses the Unicode character set. For example, the word FrÃ¼h (which means ""early"" in German) could be used as a variable name. const FrÃ¼h = ""foobar""; But, the variable frÃ¼h is not the same as FrÃ¼h because JavaScript is case sensitive. In JavaScript, instructions are called statements and are separated by semicolons (;). A semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they must be separated by semicolons. Note: ECMAScript also has rules for automatic insertion of semicolons (ASI) to end statements. (For more information, see the detailed reference about JavaScript's lexical grammar.) It is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code. The source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments, or whitespace. (Spaces, tabs, and newline characters are considered whitespace.)CommentsThe syntax of comments is the same as in C++ and in many other languages: // a one line comment /* this is a longer, * multi-line comment */ You can't nest block comments. This often happens when you accidentally include a */ sequence in your comment, which will terminate the comment. /* You can't, however, /* nest comments */ SyntaxError */ In this case, you need to break up the */ pattern. For example, by inserting a backslash: /* You can /* nest comments *\/ by escaping slashes */ Comments behave like whitespace, and are discarded during script execution. Note: You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: #!/usr/bin/env node. This is called hashbang comment syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See Hashbang comments for more details. DeclarationsJavaScript has three kinds of variable declarations. var Declares a variable, optionally initializing it to a value. let Declares a block-scoped, local variable, optionally initializing it to a value. const Declares a block-scoped, read-only named constant. VariablesYou use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules. A JavaScript identifier usually starts with a letter, underscore (_), or dollar sign ($). Subsequent characters can also be digits (0 â 9). Because JavaScript is case sensitive, letters include the characters A through Z (uppercase) as well as a through z (lowercase). You can use most of ISO 8859-1 or Unicode letters such as Ã¥ and Ã¼ in identifiers. (For more details, see this blog post or the lexical grammar reference.) You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, $credit, and _name.Declaring variablesYou can declare a variable in two ways: With the keyword var. For example, var x = 42. This syntax can be used to declare both local and global variables, depending on the execution context. With the keyword const or let. For example, let y = 13. This syntax can be used to declare a block-scope local variable. (See Variable scope below.) You can declare variables to unpack values using the destructuring assignment syntax. For example, const { bar } = foo. This will create a variable named bar and assign to it the value corresponding to the key of the same name from our object foo. Variables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an undeclared global variable. This is an error in strict mode and should be avoided altogether.Declaration and initializationIn a statement like let x = 42, the let x part is called a declaration, and the = 42 part is called an initializer. The declaration allows the variable to be accessed later in code without throwing a ReferenceError, while the initializer assigns a value to the variable. In var and let declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value undefined. let x; console.log(x); // logs ""undefined"" In essence, let x = 42 is equivalent to let x; x = 42. const declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with undefined is likely a programmer mistake. const x; // SyntaxError: Missing initializer in const declaration Variable scopeA variable may belong to one of the following scopes: Global scope: The default scope for all code running in script mode. Module scope: The scope for code running in module mode. Function scope: The scope created with a function. In addition, variables declared with let or const can belong to an additional scope: Block scope: The scope created with a pair of curly braces (a block). When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function. let and const declarations can also be scoped to the block statement that they are declared in. if (Math.random() > 0.5) { const y = 5; } console.log(y); // ReferenceError: y is not defined However, variables created with var are not block-scoped, but only local to the function (or global scope) that the block resides within. For example, the following code will log 5, because the scope of x is the global context (or the function context if the code is part of a function). The scope of x is not limited to the immediate if statement block. if (true) { var x = 5; } console.log(x); // x is 5 Variable hoistingvar-declared variables are hoisted, meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see var declarations as being ""lifted"" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always undefined, because only its declaration is hoisted, but not its initialization. console.log(x === undefined); // true var x = 3; (function () { console.log(x); // undefined var x = ""local value""; })(); The above examples will be interpreted the same as: var x; console.log(x === undefined); // true x = 3; (function () { var x; console.log(x); // undefined x = ""local value""; })(); Because of hoisting, all var statements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code. Whether let and const are hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a ReferenceError, because the variable is in a ""temporal dead zone"" from the start of the block until the declaration is processed. console.log(x); // ReferenceError const x = 3; console.log(y); // ReferenceError let y = 3; Unlike var declarations, which only hoist the declaration but not its value, function declarations are hoisted entirely â you can safely call the function anywhere in its scope. See the hoisting glossary entry for more discussion.Global variablesGlobal variables are in fact properties of the global object. In web pages, the global object is window, so you can set and access global variables using the window.variable syntax. In all environments, you can use the globalThis variable (which itself is a global variable) to access global variables. Consequently, you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called phoneNumber is declared in a document, you can refer to this variable from an iframe as parent.phoneNumber.ConstantsYou can create a read-only, named constant with the const keyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign ($), and can contain alphabetic, numeric, or underscore characters. const PI = 3.14; A constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for let block-scope variables. You cannot declare a constant with the same name as a function or variable in the same scope. For example: // THIS WILL CAUSE AN ERROR function f() {} const f = 5; // THIS WILL CAUSE AN ERROR TOO function f() { const g = 5; var g; //statements } However, const only prevents re-assignments, but doesn't prevent mutations. The properties of objects assigned to constants are not protected, so the following statement is executed without problems. const MY_OBJECT = { key: ""value"" }; MY_OBJECT.key = ""otherValue""; Also, the contents of an array are not protected, so the following statement is executed without problems. const MY_ARRAY = [""HTML"", ""CSS""]; MY_ARRAY.push(""JAVASCRIPT""); console.log(MY_ARRAY); // ['HTML', 'CSS', 'JAVASCRIPT']; Data structures and typesData typesThe latest ECMAScript standard defines eight data types: Seven data types that are primitives:  Boolean. true and false. null. A special keyword denoting a null value. (Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.) undefined. A top-level property whose value is not defined. Number. An integer or floating point number. For example: 42 or 3.14159. BigInt. An integer with arbitrary precision. For example: 9007199254740992n. String. A sequence of characters that represent a text value. For example: ""Howdy"". Symbol. A data type whose instances are unique and immutable. and Object Although these data types are relatively few, they enable you to perform useful operations with your applications. Functions are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.Data type conversionJavaScript is a dynamically typed language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution. So, for example, you could define a variable as follows: let answer = 42; And later, you could assign the same variable a string value, for example: answer = ""Thanks for all the fish!""; Because JavaScript is dynamically typed, this assignment does not cause an error message.Numbers and the '+' operatorIn expressions involving numeric and string values with the + operator, JavaScript converts numeric values to strings. For example, consider the following statements: x = ""The answer is "" + 42; // ""The answer is 42"" y = 42 + "" is the answer""; // ""42 is the answer"" z = ""37"" + 7; // ""377"" With all other operators, JavaScript does not convert numeric values to strings. For example: ""37"" - 7; // 30 ""37"" * 7; // 259 Converting strings to numbersIn the case that a value representing a number is in memory as a string, there are methods for conversion. parseInt() parseFloat() parseInt only returns whole numbers, so its use is diminished for decimals. Note: Additionally, a best practice for parseInt is to always include the radix parameter. The radix parameter is used to specify which numerical system is to be used. parseInt(""101"", 2); // 5 An alternative method of retrieving a number from a string is with the + (unary plus) operator: ""1.1"" + ""1.1"" // '1.11.1' (+""1.1"") + (+""1.1""); // 2.2 // Note: the parentheses are added for clarity, not required. LiteralsLiterals represent values in JavaScript. These are fixed valuesânot variablesâthat you literally provide in your script. This section describes the following types of literals: Array literals Boolean literals Numeric literals Object literals RegExp literals String literals Array literalsAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets ([]). When you create an array using an array literal, it is initialized with the specified values as its elements, and its length is set to the number of arguments specified. The following example creates the coffees array with three elements and a length of three: const coffees = [""French Roast"", ""Colombian"", ""Kona""]; If an array is created using a literal in a top-level script, JavaScript interprets the array each time it evaluates the expression containing the array literal. In addition, a literal used in a function is created each time the function is called. Note: Array literals create Array objects. See Array and Indexed collections for details on Array objects. Extra commas in array literals If you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the fish array: const fish = [""Lion"", , ""Angel""]; When you log this array, you will see: console.log(fish); // [ 'Lion', <1 empty item>, 'Angel' ] Note that the second item is ""empty"", which is not exactly the same as the actual undefined value. When using array-traversing methods like Array.prototype.map, empty slots are skipped. However, index-accessing fish[1] still returns undefined. If you include a trailing comma at the end of the list of elements, the comma is ignored. In the following example, the length of the array is three. There is no myList[3]. All other commas in the list indicate a new element. const myList = [""home"", , ""school""]; In the following example, the length of the array is four, and myList[0] and myList[2] are missing. const myList = [, ""home"", , ""school""]; In the following example, the length of the array is four, and myList[1] and myList[3] are missing. Only the last comma is ignored. const myList = [""home"", , ""school"", ,]; Note: Trailing commas help keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line. const myList = [ ""home"", ""school"", + ""hospital"", ]; Understanding the behavior of extra commas is important to understanding JavaScript as a language. However, when writing your own code, you should explicitly declare the missing elements as undefined, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability. const myList = [""home"", /* empty */, ""school"", /* empty */, ]; Boolean literalsThe Boolean type has two literal values: true and false. Note: Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. The Boolean object is a wrapper around the primitive Boolean data type. See Boolean for more information. Numeric literalsJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10. Note that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like -123.4 are fine, being interpreted as a unary - operator applied to the numeric literal 123.4. Integer literals Integer and BigInt literals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2). A decimal integer literal is a sequence of digits without a leading 0 (zero). A leading 0 (zero) on an integer literal, or a leading 0o (or 0O) indicates it is in octal. Octal integer literals can include only the digits 0 â 7. A leading 0x (or 0X) indicates a hexadecimal integer literal. Hexadecimal integers can include digits (0 â 9) and the letters a â f and A â F. (The case of a character does not change its value. Therefore: 0xa = 0xA = 10 and 0xf = 0xF = 15.) A leading 0b (or 0B) indicates a binary integer literal. Binary integer literals can only include the digits 0 and 1. A trailing n suffix on an integer literal indicates a BigInt literal. The integer literal can use any of the above bases. Note that leading-zero octal syntax like 0123n is not allowed, but 0o123n is fine. Some examples of integer literals are: 0, 117, 123456789123456789n    (decimal, base 10) 015, 0001, 0o777777777777n    (octal, base 8) 0x1123, 0x00111, 0x123456789ABCDEFn  (hexadecimal, ""hex"" or base 16) 0b11, 0b0011, 0b11101001010101010101n (binary, base 2) For more information, see Numeric literals in the Lexical grammar reference. Floating-point literals A floating-point literal can have the following parts: An unsigned decimal integer, A decimal point (.), A fraction (another decimal number), An exponent. The exponent part is an e or E followed by an integer, which can be signed (preceded by + or -). A floating-point literal must have at least one digit, and either a decimal point or e (or E). More succinctly, the syntax is: [digits].[digits][(E|e)[(+|-)]digits] For example: 3.1415926 .123456789 3.1E+12 .1e-23 Object literalsAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Warning: Do not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the { will be interpreted as the beginning of a block. The following is an example of an object literal. The first element of the car object defines a property, myCar, and assigns to it a new string, ""Saturn""; the second element, the getCar property, is immediately assigned the result of invoking the function (carTypes(""Honda"")); the third element, the special property, uses an existing variable (sales). const sales = ""Toyota""; function carTypes(name) { return name === ""Honda"" ? name : `Sorry, we don't sell ${name}.`; } const car = { myCar: ""Saturn"", getCar: carTypes(""Honda""), special: sales }; console.log(car.myCar); // Saturn console.log(car.getCar); // Honda console.log(car.special); // Toyota Additionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options. const car = { manyCars: { a: ""Saab"", b: ""Jeep"" }, 7: ""Mazda"" }; console.log(car.manyCars.b); // Jeep console.log(car[7]); // Mazda Object property names can be any string, including the empty string. If the property name would not be a valid JavaScript identifier or number, it must be enclosed in quotes. Property names that are not valid identifiers cannot be accessed as a dot (.) property. const unusualPropertyNames = { '': 'An empty string', '!': 'Bang!' } console.log(unusualPropertyNames.''); // SyntaxError: Unexpected string console.log(unusualPropertyNames.!); // SyntaxError: Unexpected token ! Instead, they must be accessed with the bracket notation ([]). console.log(unusualPropertyNames[""""]); // An empty string console.log(unusualPropertyNames[""!""]); // Bang! Enhanced Object literals Object literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for foo: foo assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences. const obj = { // __proto__ __proto__: theProtoObj, // Shorthand for 'handler: handler' handler, // Methods toString() {  // Super calls  return ""d "" + super.toString(); }, // Computed (dynamic) property names [""prop_"" + (() => 42)()]: 42, }; RegExp literalsA regex literal (which is defined in detail later) is a pattern enclosed between slashes. The following is an example of a regex literal. const re = /ab+c/; String literalsA string literal is zero or more characters enclosed in double ("") or single (') quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks). The following are examples of string literals: 'foo' ""bar"" '1234' 'one line another line' ""Joyo's cat"" You should use string literals unless you specifically need to use a String object. See String for details on String objects. You can call any of the String object's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the length property with a string literal: // Will print the number of symbols in the string including whitespace. console.log(""Joyo's cat"".length); // In this case, 10. Template literals are also available. Template literals are enclosed by the back-tick (`) (grave accent) character instead of double or single quotes. Template literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.) // Basic literal string creation `In JavaScript ' ' is a line-feed.` // Multiline strings `In JavaScript, template strings can run over multiple lines, but double and single quoted strings cannot.` // String interpolation const name = 'Lev', time = 'today'; `Hello ${name}, how are you ${time}?` Tagged templates are a compact syntax for specifying a template literal along with a call to a ""tag"" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal â as in the following example, where the template tag function is named print. The print function will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky [object Object]. const formatArg = (arg) => { if (Array.isArray(arg)) {  // Print a bulleted list  return arg.map((part) => `- ${part}`).join("" ""); } if (arg.toString === Object.prototype.toString) {  // This object will be serialized to ""[object Object]"".  // Let's print something nicer.  return JSON.stringify(arg); } return arg; }; const print = (segments, ...args) => { // For any well-formed template literal, there will always be N args and // (N+1) string segments. let message = segments[0]; segments.slice(1).forEach((segment, index) => {  message += formatArg(args[index]) + segment; }); console.log(message); }; const todos = [ ""Learn JavaScript"", ""Learn Web APIs"", ""Set up my website"", ""Profit!"", ]; const progress = { javascript: 20, html: 50, css: 10 }; print`I need to do: ${todos} My current progress is: ${progress} `; // I need to do: // - Learn JavaScript // - Learn Web APIs // - Set up my website // - Profit! // My current progress is: {""javascript"":20,""html"":50,""css"":10} Since tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call: print([""I need to do: "", "" My current progress is: "", "" ""], todos, progress); This may be reminiscent of the console.log-style interpolation: console.log(""I need to do: %o My current progress is: %o "", todos, progress); You can see how the tagged template reads more naturally than a traditional ""formatter"" function, where the variables and the template itself have to be declared separately. Using special characters in strings In addition to ordinary characters, you can also include special characters in strings, as shown in the following example. ""one line another line""; The following table lists the special characters that you can use in JavaScript strings. Character Meaning  \0 Null Byte \b Backspace \f Form Feed  New Line \r Carriage Return \t Tab \v Vertical tab \' Apostrophe or single quote \"" Double quote \\ Backslash character \XXX The character with the Latin-1 encoding specified by up to three octal digits XXX between 0 and 377. For example, \251 is the octal sequence for the copyright symbol. \xXX The character with the Latin-1 encoding specified by the two hexadecimal digits XX between 00 and FF. For example, \xA9 is the hexadecimal sequence for the copyright symbol. \uXXXX The Unicode character specified by the four hexadecimal digits XXXX. For example, \u00A9 is the Unicode sequence for the copyright symbol. See Unicode escape sequences. \u{XXXXX} Unicode code point escapes. For example, \u{2F804} is the same as the simple Unicode escapes \uD87E\uDC04. Escaping characters For characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided. You can insert a quotation mark inside a string by preceding it with a backslash. This is known as escaping the quotation mark. For example: const quote = ""He read \""The Cremation of Sam McGee\"" by R.W. Service.""; console.log(quote); The result of this would be: He read ""The Cremation of Sam McGee"" by R.W. Service. To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path c:\temp to a string, use the following: const home = ""c:\\temp""; You can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string. const str = ""this string \ is broken \ across multiple \ lines.""; console.log(str); // this string is broken across multiple lines. More informationThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide: Control flow and error handling Loops and iteration Functions Expressions and operators In the next chapter, we will have a look at control flow constructs and error handling. Â« Previous Next Â» Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
78,developer.mozilla.org/en-US/docs/Web/API/Document/Object/Model/Examples#example/7/displaying/event/object/properties,"developer.mozilla.org/en-US/docs/Web/API/Document/Object/Model/Examples#example/7/displaying/event/object/properties. Examples of web and XML development using the DOM - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocument Object Model (DOM)Examples of web and XML development using the DOMArticle ActionsEnglish (US)In this articleExample 1: height and widthExample 2: Image AttributesExample 3: Manipulating StylesExample 4: Using StylesheetsExample 5: Event PropagationExample 6: getComputedStyleExample 7: Displaying Event Object PropertiesExample 8: Using the DOM Table InterfaceDocument Object ModelGuidesIntroduction to the DOMUsing the Document Object ModelTraversing an HTML table with JavaScript and DOM InterfacesLocating DOM elements using selectorsHow to create a DOM treeIntroduction to eventsHow whitespace is handled by HTML, CSS, and in the DOMExamples of web and XML development using the DOMInterfacesAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDocumentDocumentFragmentDocumentTypeDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleExample 1: height and widthExample 2: Image AttributesExample 3: Manipulating StylesExample 4: Using StylesheetsExample 5: Event PropagationExample 6: getComputedStyleExample 7: Displaying Event Object PropertiesExample 8: Using the DOM Table InterfaceExamples of web and XML development using the DOMThis chapter provides some longer examples of web and XML development using the DOM. Wherever possible, the examples use common APIs, tricks, and patterns in JavaScript for manipulating the document object.Example 1: height and widthThe following example shows the use of the height and width properties alongside images of varying dimensions: <!DOCTYPE html> <html lang=""en""> <head>  <title>width/height example</title>  <script>  function init() {   const arrImages = new Array(3);   arrImages[0] = document.getElementById(""image1"");   arrImages[1] = document.getElementById(""image2"");   arrImages[2] = document.getElementById(""image3"");   const objOutput = document.getElementById(""output"");   let strHtml = ""<ul>"";   for (let i = 0; i < arrImages.length; i++) {   strHtml +=    ""<li>image"" +    (i + 1) +    "": height="" +    arrImages[i].height +    "", width="" +    arrImages[i].width +    "", style.height="" +    arrImages[i].style.height +    "", style.width="" +    arrImages[i].style.width +    ""<\/li>"";   }   strHtml += ""<\/ul>"";   objOutput.innerHTML = strHtml;  }  </script> </head> <body onload=""init();"">  <p>  Image 1: no height, width, or style  <img id=""image1"" src=""http://www.mozilla.org/images/mozilla-banner.gif"" />  </p>  <p>  Image 2: height=""50"", width=""500"", but no style  <img   id=""image2""   src=""http://www.mozilla.org/images/mozilla-banner.gif""   height=""50""   width=""500"" />  </p>  <p>  Image 3: no height, width, but style=""height: 50px; width: 500px;""  <img   id=""image3""   src=""http://www.mozilla.org/images/mozilla-banner.gif""   style=""height: 50px; width: 500px;"" />  </p>  <div id=""output""></div> </body> </html> Example 2: Image Attributes<!DOCTYPE html> <html lang=""en""> <head>  <title>Modifying an image border</title>  <script>  function setBorderWidth(width) {   document.getElementById(""img1"").style.borderWidth = width + ""px"";  }  </script> </head> <body>  <p>  <img   id=""img1""   src=""image1.gif""   style=""border: 5px solid green;""   width=""100""   height=""100""   alt=""border test"" />  </p>  <form name=""FormName"">  <input   type=""button""   value=""Make border 20px-wide""   onclick=""setBorderWidth(20);"" />  <input   type=""button""   value=""Make border 5px-wide""   onclick=""setBorderWidth(5);"" />  </form> </body> </html> Example 3: Manipulating StylesIn this simple example, some basic style properties of an HTML paragraph element are accessed using the style object on the element and that object's CSS style properties, which can be retrieved and set from the DOM. In this case, you are manipulating the individual styles directly. In the next example (see Example 4), you can use stylesheets and their rules to change styles for whole documents. <!DOCTYPE html> <html lang=""en""> <head>  <title>Changing color and font-size example</title>  <script>  function changeText() {   const p = document.getElementById(""pid"");   p.style.color = ""blue"";   p.style.fontSize = ""18pt"";  }  </script> </head> <body>  <p id=""pid"" onclick=""window.location.href = 'http://www.cnn.com/';"">  linker  </p>  <form>  <p><input value=""rec"" type=""button"" onclick=""changeText();"" /></p>  </form> </body> </html> Example 4: Using StylesheetsThe styleSheets property on the document object returns a list of the stylesheets that have been loaded on that document. You can access these stylesheets and their rules individually using the stylesheet, style, and CSSRule objects, as demonstrated in this example, which prints out all of the style rule selectors to the console. const ss = document.styleSheets; for (let i = 0; i < ss.length; i++) { for (let j = 0; j < ss[i].cssRules.length; j++) {  dump(`${ss[i].cssRules[j].selectorText} `); } } For a document with a single stylesheet in which the following three rules are defined: body { background-color: darkblue; } p { font-family: Arial; font-size: 10pt; margin-left: 0.125in; } #lumpy { display: none; } This script outputs the following: BODY P #LUMPY Example 5: Event PropagationThis example demonstrates how events fire and are handled in the DOM in a very simple way. When the BODY of this HTML document loads, an event listener is registered with the top row of the TABLE. The event listener handles the event by executing the function stopEvent, which changes the value in the bottom cell of the table. However, stopEvent also calls an event object method, event.stopPropagation, which keeps the event from bubbling any further up into the DOM. Note that the table itself has an onclick event handler that ought to display a message when the table is clicked. But the stopEvent method has stopped propagation, and so after the data in the table is updated, the event phase is effectively ended, and an alert box is displayed to confirm this. <!DOCTYPE html> <html lang=""en""> <head>  <title>Event Propagation</title>  <style>  #t-daddy {   border: 1px solid red;  }  #c1 {   background-color: pink;  }  </style>  <script>  function stopEvent(event) {   const c2 = document.getElementById(""c2"");   c2.textContent = ""hello"";   // this ought to keep t-daddy from getting the click.   event.stopPropagation();   alert(""event propagation halted."");  }  function load() {   const elem = document.getElementById(""tbl1"");   elem.addEventListener(""click"", stopEvent, false);  }  </script> </head> <body onload=""load();"">  <table id=""t-daddy"" onclick=""alert('hi');"">  <tr id=""tbl1"">   <td id=""c1"">one</td>  </tr>  <tr>   <td id=""c2"">two</td>  </tr>  </table> </body> </html> Example 6: getComputedStyleThis example demonstrates how the window.getComputedStyle method can be used to get the styles of an element that are not set using the style attribute or with JavaScript (e.g., elt.style.backgroundColor=""rgb(173, 216, 230)""). These latter types of styles can be retrieved with the more direct elt.style property, whose properties are listed in the DOM CSS Properties List. getComputedStyle() returns a CSSStyleDeclaration object, whose individual style properties can be referenced with this object's getPropertyValue() method, as the following example document shows. <!DOCTYPE html> <html lang=""en""> <head>  <title>getComputedStyle example</title>  <script>  function cStyles() {   const RefDiv = document.getElementById(""d1"");   const txtHeight = document.getElementById(""t1"");   const h_style = document.defaultView   .getComputedStyle(RefDiv, null)   .getPropertyValue(""height"");   txtHeight.value = h_style;   const txtWidth = document.getElementById(""t2"");   const w_style = document.defaultView   .getComputedStyle(RefDiv, null)   .getPropertyValue(""width"");   txtWidth.value = w_style;   const txtBackgroundColor = document.getElementById(""t3"");   const b_style = document.defaultView   .getComputedStyle(RefDiv, null)   .getPropertyValue(""background-color"");   txtBackgroundColor.value = b_style;  }  </script>  <style>  #d1 {   margin-left: 10px;   background-color: rgb(173, 216, 230);   height: 20px;   max-width: 20px;  }  </style> </head> <body>  <div id=""d1"">&nbsp;</div>  <form action="""">  <p>   <button type=""button"" onclick=""cStyles();"">getComputedStyle</button>   height<input id=""t1"" type=""text"" value=""1"" /> max-width<input   id=""t2""   type=""text""   value=""2"" />   bg-color<input id=""t3"" type=""text"" value=""3"" />  </p>  </form> </body> </html> Example 7: Displaying Event Object PropertiesThis example uses DOM methods to display all the properties of the onload event object and their values in a table. It also shows a useful technique of using a for...in loop to iterate over the properties of an object to get their values. The properties of event objects differs greatly between browsers, the WHATWG DOM Standard lists the standard properties, however many browsers have extended these greatly. Put the following code into a blank text file and load it into a variety of browsers, you'll be surprised at the different number and names of properties. You might also like to add some elements in the page and call this function from different event handlers. <!DOCTYPE html> <html lang=""en""> <head>  <meta charset=""utf-8"" />  <title>Show Event properties</title>  <style>  table {   border-collapse: collapse;  }  thead {   font-weight: bold;  }  td {   padding: 2px 10px 2px 10px;  }  .odd {   background-color: #efdfef;  }  .even {   background-color: #ffffff;  }  </style>  <script>  function showEventProperties(e) {   function addCell(row, text) {   const cell = row.insertCell(-1);   cell.appendChild(document.createTextNode(text));   }   const event = e || window.event;   document.getElementById(""eventType"").innerHTML = event.type;   const table = document.createElement(""table"");   const thead = table.createTHead();   let row = thead.insertRow(-1);   const labelList = [""#"", ""Property"", ""Value""];   const len = labelList.length;   for (let i = 0; i < len; i++) {   addCell(row, labelList[i]);   }   const tbody = document.createElement(""tbody"");   table.appendChild(tbody);   for (const p in event) {   row = tbody.insertRow(-1);   row.className = row.rowIndex % 2 ? ""odd"" : ""even"";   addCell(row, row.rowIndex);   addCell(row, p);   addCell(row, event[p]);   }   document.body.appendChild(table);  }  window.onload = (event) => {   showEventProperties(event);  };  </script> </head> <body>  <h1>Properties of the DOM <span id=""eventType""></span> Event Object</h1> </body> </html> Example 8: Using the DOM Table InterfaceThe DOM HTMLTableElement interface provides some convenience methods for creating and manipulating tables. Two frequently used methods are HTMLTableElement.insertRow and HTMLTableRowElement.insertCell. To add a row and some cells to an existing table: <table id=""table0""> <tr>  <td>Row 0 Cell 0</td>  <td>Row 0 Cell 1</td> </tr> </table> <script> const table = document.getElementById(""table0""); const row = table.insertRow(-1); let cell; let text; for (let i = 0; i < 2; i++) {  cell = row.insertCell(-1);  text = ""Row "" + row.rowIndex + "" Cell "" + i;  cell.appendChild(document.createTextNode(text)); } </script> Notes A table's innerHTML property should never be used to modify a table, although you can use it to write an entire table or the content of a cell. If DOM Core methods document.createElement and Node.appendChild are used to create rows and cells, IE requires that they are appended to a <tbody> element, whereas other browsers will allow appending to a <table> element (the rows will be added to the last <tbody> element). There are a number of other convenience methods belonging to the HTMLTableElement interface that can be used for creating and modifying tables. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 20, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
79,developer.mozilla.org/en-US/docs/Glossary/Representation/header,"developer.mozilla.org/en-US/docs/Glossary/Representation/header. Representation header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsRepresentation headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoRepresentation headerA representation header is an HTTP header that describes the particular representation of the resource sent in an HTTP message body. Representations are different forms of a particular resource. For example, the same data might be formatted as a particular media type such as XML or JSON, localized to a particular written language or geographical region, and/or compressed or otherwise encoded for transmission. The underlying resource is the same in each case, but its representation is different. Clients specify the formats that they prefer to be sent during content negotiation (using Accept-* headers), and the representation headers tell the client the format of the selected representation they actually received. Representation headers may be present in both HTTP request and response messages. If sent as a response to a HEAD request, they describe the body content that would be selected if the resource was actually requested. Representation headers include: Content-Type, Content-Encoding, Content-Language, and Content-Location.See also RFC 9110, section 3.2: Representations List of all HTTP headers Payload header Entity header Digest/ Want-Digest Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
80,developer.mozilla.org/en-US/docs/Glossary/Element,"developer.mozilla.org/en-US/docs/Glossary/Element. Element - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsElementArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoElementAn element is a part of a webpage. In XML and HTML, an element may contain a data item or a chunk of text or an image, or perhaps nothing. A typical element includes an opening tag with some attributes, enclosed text content, and a closing tag. Elements and tags are not the same things. Tags begin or end an element in source code, whereas elements are part of the DOM, the document model for displaying the page in the browser.See also Getting started with HTML Defining custom elements The Element interface, representing an element in the DOM. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 13, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
81,developer.mozilla.org/en-US/docs/Glossary/Request/header,"developer.mozilla.org/en-US/docs/Glossary/Request/header. Request header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsRequest headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoRequest headerA request header is an HTTP header that can be used in an HTTP request to provide information about the request context, so that the server can tailor the response. For example, the Accept-* headers indicate the allowed and preferred formats of the response. Other headers can be used to supply authentication credentials (e.g. Authorization), to control caching, or to get information about the user agent or referrer, etc. Not all headers that can appear in a request are referred to as request headers by the specification. For example, the Content-Type header is referred to as a representation header. In addition, CORS defines a subset of request headers as simple headers, request headers that are always considered authorized and are not explicitly listed in responses to preflight requests. The HTTP message below shows a few request headers after a GET request: GET /home.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://developer.mozilla.org/testpage.html Connection: keep-alive Upgrade-Insecure-Requests: 1 If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT If-None-Match: ""c561c68d0ba92bbeb8b0fff2a9199f722e3a621a"" Cache-Control: max-age=0 See also List of all HTTP headers RFC 9110, section 6.3: Header Fields Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
82,developer.mozilla.org/en-US/docs/Web/API/Attr/localName,"developer.mozilla.org/en-US/docs/Web/API/Attr/localName. Attr: localName property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrlocalNameArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelAttrInstance propertieslocalName namenamespaceURIownerElementprefixspecified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoAttr: localName propertyThe read-only localName property of the Attr interface returns the local part of the qualified name of an attribute, that is the name of the attribute, stripped from any namespace in front of it. For example, if the qualified name is xml:lang, the returned local name is lang, if the element supports that namespace. The local name is always in lower case, whatever case at the attribute creation. Note: HTML only supports a fixed set of namespaces on SVG and MathML elements. These are xml (for the xml:lang attribute), xlink (for the xlink:href, xlink:show, xlink:target and xlink:title attributes) and xpath. That means that the local name of an attribute of an HTML element is always be equal to its qualified name: Colons are treated as regular characters. In XML, like in SVG or MathML, the colon denotes the end of the prefix and what is before is the namespace; the local name may be different from the qualified name. ValueA string representing the local part of the attribute's qualified name.ExampleThe following example displays the local name of the first attribute of the two first elements, when we click on the appropriate button. The <svg> element is XML and supports namespaces leading to the local name (lang) to be different from the qualified name xml:lang. The <label> element is HTML, that doesn't support namespaces, leading to a local name and the qualified name to be both xml:lang.HTML<svg xml:lang=""en-US"" class=""struct"" height=""1"" width=""1"">Click me</svg> <label xml:lang=""en-US"" class=""struct""></label> <p> <button>Show value for &lt;svg&gt;</button> <button>Show value for &lt;label&gt;</button> </p> <p> Local part of the attribute <code>xml:lang</code>: <output id=""result"">None.</output> </p> JavaScriptconst elements = document.querySelectorAll("".struct""); const buttons = document.querySelectorAll(""button""); const outputEl = document.querySelector(""#result""); let i = 0; for (const button of buttons) { const element = elements[i]; button.addEventListener(""click"", () => {  const attribute = element.attributes[0];  outputEl.value = attribute.localName; }); i++; } SpecificationsSpecificationDOM Standard # dom-attr-localnameBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The properties Attr.name, returning the qualified name of the attribute, and Attr.prefix, the namespace prefix. The Element.localName() property, returning the local name of an Element. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
83,developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/frame,"developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/frame. HTMLTableElement: frame property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLTableElementframeArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityHTML DOM APIHTMLTableElementInstance propertiesalign Deprecated bgColor Deprecated border Deprecated captioncellPadding Deprecated cellSpacing Deprecated frame Deprecated rowsrules Deprecated summary Deprecated tBodiestFoottHeadwidth Deprecated Instance methodscreateCaption()createTBody()createTFoot()createTHead()deleteCaption()deleteRow()deleteTFoot()deleteTHead()insertRow()Inheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilityHTMLTableElement: frame propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The HTMLTableElement interface's frame property is a string that indicates which of the table's exterior borders should be drawn. ValueOne of the following: void No sides. This is the default. ""above"" Top side ""below"" Bottom side ""hsides"" Top and bottom only ""vsides"" Right and left sides only ""lhs"" Left-hand side only ""rhs"" Right-hand side only ""box"" All four sides ""border"" All four sides Examples// Set the frame of TableA to 'border' const t = document.getElementById(""TableA""); t.frame = ""border""; t.border = ""2px""; Specifications W3C DOM 2 HTML Specification Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
84,developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/sheet,"developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/sheet. ProcessingInstruction: sheet property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsProcessingInstructionsheetArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelProcessingInstructionInstance propertiessheet targetInheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoProcessingInstruction: sheet property The read-only sheet property of the ProcessingInstruction interface contains the stylesheet associated to the ProcessingInstruction. The xml-stylesheet processing instruction is used to associate a stylesheet in an XML file.ValueThe associated Stylesheet object, or null if there are none.Example<?xml version=""1.0"" encoding=""UTF-8""?> <?xml-stylesheet type=""text/css"" href=""rule.css""?> â¦ The sheet property of the processing instruction will return the StyleSheet object describing rule.css.SpecificationsSpecificationCSS Object Model (CSSOM) # dom-linkstyle-sheetBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOM API Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
85,developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType,"developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType. DOMImplementation: createDocumentType() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDOMImplementationcreateDocumentType()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDOMImplementationInstance methodscreateDocument()createDocumentType() createHTMLDocument()hasFeature() Deprecated Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDOMImplementation: createDocumentType() method The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild(). SyntaxcreateDocumentType(qualifiedNameStr, publicId, systemId) Parameters qualifiedNameStr   A string containing the qualified name, like  svg:svg.  publicId A string containing the PUBLIC identifier. systemId A string containing the SYSTEM identifiers. Return valueA DocumentType.Examplesconst dt = document.implementation.createDocumentType( ""svg:svg"", ""-//W3C//DTD SVG 1.1//EN"", ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" ); const d = document.implementation.createDocument( ""http://www.w3.org/2000/svg"", ""svg:svg"", dt ); alert(d.doctype.publicId); // -//W3C//DTD SVG 1.1//EN SpecificationsSpecificationDOM Standard # ref-for-dom-domimplementation-createdocumenttypeâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOMImplementation interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
86,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/accelerate,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/accelerate. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
87,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient. CanvasRenderingContext2D: createLinearGradient() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DcreateLinearGradient()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient() createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: createLinearGradient() method The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line connecting two given coordinates.  This method returns a linear CanvasGradient. To be applied to a shape, the gradient must first be assigned to the fillStyle or strokeStyle properties. Note: Gradient coordinates are global, i.e., relative to the current  coordinate space. When applied to a shape, the coordinates are NOT relative to the  shape's coordinates. SyntaxcreateLinearGradient(x0, y0, x1, y1)  The createLinearGradient() method is specified by four parameters defining the start and end points of the gradient line. Parameters x0 The x-axis coordinate of the start point. y0 The y-axis coordinate of the start point. x1 The x-axis coordinate of the end point. y1 The y-axis coordinate of the end point. Return valueA linear CanvasGradient initialized with the specified line.Exceptions NotSupportedError DOMException Thrown when non-finite values are passed as parameters. ExamplesFilling a rectangle with a linear gradient This example initializes a linear gradient using the createLinearGradient() method. Three color stops between the gradient's start and end points are then created. Finally, the gradient is assigned to the canvas context, and is rendered to a filled rectangle. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Create a linear gradient // The start gradient point is at x=20, y=0 // The end gradient point is at x=220, y=0 const gradient = ctx.createLinearGradient(20, 0, 220, 0); // Add three color stops gradient.addColorStop(0, ""green""); gradient.addColorStop(0.5, ""cyan""); gradient.addColorStop(1, ""green""); // Set the fill style and draw a rectangle ctx.fillStyle = gradient; ctx.fillRect(20, 20, 200, 100); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-createlineargradient-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D CanvasRenderingContext2D.createRadialGradient() CanvasRenderingContext2D.createConicGradient() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
88,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey. KeyboardEvent: shiftKey property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventshiftKeyArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKey Instance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoKeyboardEvent: shiftKey property The KeyboardEvent.shiftKey read-only property is a boolean value that indicates if the shift key was pressed (true) or not (false) when the event occurred. ValueA boolean value.Examples<html lang=""en-US""> <head>  <meta charset=""utf-8"" />  <meta name=""viewport"" content=""width=device-width"" />  <title>shiftKey example</title>  <script>  function showChar(e) {   alert(   ""Key Pressed: "" +    String.fromCharCode(e.charCode) +    "" "" +    ""charCode: "" +    e.charCode +    "" "" +    ""SHIFT key pressed: "" +    e.shiftKey +    "" "" +    ""ALT key pressed: "" +    e.altKey +    "" ""   );  }  </script> </head> <body onkeypress=""showChar(event);"">  <p>  Press any character key, with or without holding down the SHIFT key.<br />  You can also use the SHIFT key together with the ALT key.  </p> </body> </html> SpecificationsSpecificationUI Events # dom-keyboardevent-shiftkeyBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also KeyboardEvent Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
89,developer.mozilla.org/en-US/docs/Glossary/HTTP/header,"developer.mozilla.org/en-US/docs/Glossary/HTTP/header. HTTP header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsHTTP headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoHTTP headerAn HTTP header is a field of an HTTP request or response that passes additional context and metadata about the request or response. For example, a request message can use headers to indicate it's preferred media formats, while a response can use header to indicate the media format of the returned body. Headers are case-insensitive, begin at the start of a line and are immediately followed by a ':' and a header-dependent value. The value finishes at the next CRLF or at the end of the message. The HTTP and Fetch specifications refer to a number of header categories, including: Request header: Headers containing more information about the resource to be fetched or about the client itself. Response header: Headers with additional information about the response, like its location or about the server itself (name, version, â¦). Representation header: metadata about the resource in the message body (e.g. encoding, media type, etc.). Fetch metadata request header: Headers with metadata about the resource in the message body (e.g. encoding, media type, etc.). A basic request with one header: GET /example.html HTTP/1.1 Host: example.com Redirects have mandatory headers (Location): 302 Found Location: /NewPage.html A typical set of headers: 304 Not Modified Access-Control-Allow-Origin: * Age: 2318192 Cache-Control: public, max-age=315360000 Connection: keep-alive Date: Mon, 18 Jul 2016 16:06:00 GMT Server: Apache Vary: Accept-Encoding Via: 1.1 3dc30c7222755f86e824b93feb8b5b8c.cloudfront.net (CloudFront) X-Amz-Cf-Id: TOl0FEm6uI4fgLdrKJx0Vao5hpkKGZULYN2TWD2gAWLtr7vlNjTvZw== X-Backend-Server: developer6.webapp.scl3.mozilla.com X-Cache: Hit from cloudfront X-Cache-Info: cached Note: Older versions of the specification referred to: General header: Headers applying to both requests and responses but with no relation to the data eventually transmitted in the body. Entity header: Headers containing more information about the body of the entity, like its content length or its MIME-type (this is a superset of what are now referred to as the Representation metadata headers) See also List of all HTTP headers Syntax of headers in the HTTP specification Glossary HTTP header Request header Response header Representation header Fetch metadata request header Forbidden header name Forbidden response header name CORS-safelisted request header CORS-safelisted response header Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
90,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isFinite,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isFinite. Number.isFinite() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsNumberNumber.isFinite()Article ActionsEnglish (US)In this articleTry itSyntaxExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsNumberConstructorNumber() constructorPropertiesNumber.EPSILONNumber.MAX_SAFE_INTEGERNumber.MAX_VALUENumber.MIN_SAFE_INTEGERNumber.MIN_VALUENumber.NaNNumber.NEGATIVE_INFINITYNumber.POSITIVE_INFINITYMethodsNumber.isFinite()Number.isInteger()Number.isNaN()Number.isSafeInteger()Number.parseFloat()Number.parseInt()Number.prototype.toExponential()Number.prototype.toFixed()Number.prototype.toLocaleString()Number.prototype.toPrecision()Number.prototype.toString()Number.prototype.valueOf()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleTry itSyntaxExamplesSpecificationsBrowser compatibilitySee alsoNumber.isFinite()The Number.isFinite() static method determines whether the passed value is a finite number â that is, it checks that a given value is a number, and the number is neither positive Infinity, negative Infinity, nor NaN.Try itSyntaxNumber.isFinite(value) Parameters value The value to be tested for finiteness. Return valueThe boolean value true if the given value is a finite number. Otherwise false.ExamplesUsing isFinite()Number.isFinite(Infinity); // false Number.isFinite(NaN); // false Number.isFinite(-Infinity); // false Number.isFinite(0); // true Number.isFinite(2e64); // true Difference between Number.isFinite() and global isFinite()In comparison to the global isFinite() function, this method doesn't first convert the parameter to a number. This means only values of the type number and are finite return true, and non-numbers always return false. isFinite(""0""); // true; coerced to number 0 Number.isFinite(""0""); // false isFinite(null); // true; coerced to number 0 Number.isFinite(null); // false SpecificationsSpecificationECMAScript Language Specification # sec-number.isfiniteBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Number.isFinite in core-js The Number object it belongs to The global function isFinite Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
91,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode. KeyboardEvent: keyCode property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventkeyCodeArticle ActionsEnglish (US)In this articleExamplesSpecificationsBrowser compatibilityValue of keyCodeConstants for keyCode valueUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleExamplesSpecificationsBrowser compatibilityValue of keyCodeConstants for keyCode valueKeyboardEvent: keyCode propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The deprecated KeyboardEvent.keyCode read-only property represents a system and implementation dependent numerical code identifying the unmodified value of the pressed key. This is usually the decimal ASCII (RFC 20) or Windows 1252 code corresponding to the key. If the key can't be identified, this value is 0. You should avoid using this if possible; it's been deprecated for some time. Instead, you should use KeyboardEvent.code, if it's implemented. Unfortunately, some browsers still don't have it, so you'll have to be careful to make sure you use one which is supported on all target browsers. Note: Web developers shouldn't use the keyCode attribute for printable characters when handling keydown and keyup events. As described above, the keyCode attribute is not useful for printable characters, especially those input with the Shift or Alt key pressed. When implementing a shortcut key handler, the keypress event is usually better (at least when Gecko is the runtime in use). Exampleswindow.addEventListener( ""keydown"", (event) => {  if (event.defaultPrevented) {  return; // Should do nothing if the default action has been cancelled  }  let handled = false;  if (event.key !== undefined) {  // Handle the event with KeyboardEvent.key  handled = true;  } else if (event.keyCode !== undefined) {  // Handle the event with KeyboardEvent.keyCode  handled = true;  }  if (handled) {  // Suppress ""double action"" if event handled  event.preventDefault();  } }, true ); SpecificationsSpecificationUI Events # dom-keyboardevent-keycodeBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Value of keyCodePrintable keys in standard positionThe value of key events which are caused by pressing or releasing printable keys in standard position is not compatible between browsers. IE just exposes the native virtual keycode value as KeyboardEvent.keyCode. Google Chrome, Chromium and Safari must decide the value from the input character. If the inputting character can be inputted with the US keyboard layout, they use the keyCode value on the US keyboard layout. Firefox gets keyCode values from ASCII characters inputtable by the key â even with shift modifiers or an ASCII capable keyboard layout. See the following rules for details: If the system is Windows and the native keycode of the pressed key indicates that the key is a-z or 0-9, use a keycode for it. If the system is Mac and the native keycode of the pressed key indicates that the key is 0-9, use a keycode for it. If the pressed key inputs an ASCII alphabetic or numeric character with no modifier key, use a keycode for it. If the pressed key inputs an ASCII alphabetic or numeric character with a Shift key modifier, use a keycode for it. If the pressed key inputs a different ASCII character with no modifier key, use a keycode for it. If the pressed key inputs a different ASCII character with a Shift key modifier, use a keycode for it. Otherwise, i.e., pressed key inputs a unicode character:  If the keyboard layout is ASCII-capable (i.e., can input ASCII alphabets), use 0 or compute with the following additional rules. Otherwise, i.e., the keyboard layout isn't ASCII capable, use the ASCII capable keyboard layout installed on the environment with the highest priority:   If the pressed key on the alternative keyboard layout inputs an ASCII alphabetic or numeric character, use a keycode for it. Otherwise, use 0 or compute with the following additional rules.  Gecko sets keyCode values of punctuation keys as far as possible (when points 7.1 or 7.2 in the above list are reached) with the following rules: Warning: The purpose of these new additional rules is for making users whose keyboard layouts map unicode characters to punctuation keys in a US keyboard layout can use web applications which support Firefox only with ASCII-capable keyboard layouts or just with a US keyboard layout. Otherwise, the newly mapped keyCode values may be conflict with other keys. For example, if the active keyboard layout is Russian, the keyCode value of both the ""Period"" key and ""Slash"" key are 190 (KeyEvent.DOM_VK_PERIOD). If you need to distinguish those keys but you don't want to support all keyboard layouts in the world by yourself, you should probably use KeyboardEvent.code. If running macOS or Linux:  If the active keyboard layout is not ASCII-capable and an alternative ASCII-capable keyboard layout is available.   If the alternative ASCII-capable keyboard layout produces an ASCII character via just the unmodified key, use a keyCode for the character. If the alternative ASCII-capable keyboard layout produces an ASCII character with a Shift key modifier, use a keyCode for the shifted character. Otherwise, use a keyCode for an ASCII character produced by the key when the US keyboard layout is active. Otherwise, use a keyCode for an ASCII character produced by the key when the US keyboard layout is active. If running on Windows:  Use a keyCode value for an ASCII character produced by a key which is mapped to the same virtual keycode of Windows when the US keyboard layout is active.   keyCode values of each browser's keydown event caused by printable keys in  standard position  KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek  ""Digit1"" 0x31 (49) 0x31 (49) 0x31 (49) 0x31 (49) 0x31 (49) 0x31 (49) 0x31 (49) 0x31 (49) ""Digit2"" 0x32 (50) 0x32 (50) 0x32 (50) 0x32 (50) 0x32 (50) 0x32 (50) 0x32 (50) 0x32 (50) ""Digit3"" 0x33 (51) 0x33 (51) 0x33 (51) 0x33 (51) 0x33 (51) 0x33 (51) 0x33 (51) 0x33 (51) ""Digit4"" 0x34 (52) 0x34 (52) 0x34 (52) 0x34 (52) 0x34 (52) 0x34 (52) 0x34 (52) 0x34 (52) ""Digit5"" 0x35 (53) 0x35 (53) 0x35 (53) 0x35 (53) 0x35 (53) 0x35 (53) 0x35 (53) 0x35 (53) ""Digit6"" 0x36 (54) 0x36 (54) 0x36 (54) 0x36 (54) 0x36 (54) 0x36 (54) 0x36 (54) 0x36 (54) ""Digit7"" 0x37 (55) 0x37 (55) 0x37 (55) 0x37 (55) 0x37 (55) 0x37 (55) 0x37 (55) 0x37 (55) ""Digit8"" 0x38 (56) 0x38 (56) 0x38 (56) 0x38 (56) 0x38 (56) 0x38 (56) 0x38 (56) 0x38 (56) ""Digit9"" 0x39 (57) 0x39 (57) 0x39 (57) 0x39 (57) 0x39 (57) 0x39 (57) 0x39 (57) 0x39 (57) ""Digit0"" 0x30 (48) 0x30 (48) 0x30 (48) 0x30 (48) 0x30 (48) 0x30 (48) 0x30 (48) 0x30 (48) ""KeyA"" 0x41 (65) 0x41 (65) 0x41 (65) 0x41 (65) 0x41 (65) 0x41 (65) 0x41 (65) 0x41 (65) ""KeyB"" 0x42 (66) 0x42 (66) 0x42 (66) 0x42 (66) 0x42 (66) 0x42 (66) 0x42 (66) 0x42 (66) ""KeyC"" 0x43 (67) 0x43 (67) 0x43 (67) 0x43 (67) 0x43 (67) 0x43 (67) 0x43 (67) 0x43 (67) ""KeyD"" 0x44 (68) 0x44 (68) 0x44 (68) 0x44 (68) 0x44 (68) 0x44 (68) 0x44 (68) 0x44 (68) ""KeyE"" 0x45 (69) 0x45 (69) 0x45 (69) 0x45 (69) 0x45 (69) 0x45 (69) 0x45 (69) 0x45 (69) ""KeyF"" 0x46 (70) 0x46 (70) 0x46 (70) 0x46 (70) 0x46 (70) 0x46 (70) 0x46 (70) 0x46 (70) ""KeyG"" 0x47 (71) 0x47 (71) 0x47 (71) 0x47 (71) 0x47 (71) 0x47 (71) 0x47 (71) 0x47 (71) ""KeyH"" 0x48 (72) 0x48 (72) 0x48 (72) 0x48 (72) 0x48 (72) 0x48 (72) 0x48 (72) 0x48 (72) ""KeyI"" 0x49 (73) 0x49 (73) 0x49 (73) 0x49 (73) 0x49 (73) 0x49 (73) 0x49 (73) 0x49 (73) ""KeyJ"" 0x4A (74) 0x4A (74) 0x4A (74) 0x4A (74) 0x4A (74) 0x4A (74) 0x4A (74) 0x4A (74) ""KeyK"" 0x4B (75) 0x4B (75) 0x4B (75) 0x4B (75) 0x4B (75) 0x4B (75) 0x4B (75) 0x4B (75) ""KeyL"" 0x4C (76) 0x4C (76) 0x4C (76) 0x4C (76) 0x4C (76) 0x4C (76) 0x4C (76) 0x4C (76) ""KeyM"" 0x4D (77) 0x4D (77) 0x4D (77) 0x4D (77) 0x4D (77) 0x4D (77) 0x4D (77) 0x4D (77) ""KeyN"" 0x4E (78) 0x4E (78) 0x4E (78) 0x4E (78) 0x4E (78) 0x4E (78) 0x4E (78) 0x4E (78) ""KeyO"" 0x4F (79) 0x4F (79) 0x4F (79) 0x4F (79) 0x4F (79) 0x4F (79) 0x4F (79) 0x4F (79) ""KeyP"" 0x50 (80) 0x50 (80) 0x50 (80) 0x50 (80) 0x50 (80) 0x50 (80) 0x50 (80) 0x50 (80) ""KeyQ"" 0x51 (81) 0x51 (81) 0x51 (81) 0x51 (81) 0xBA (186)â ï¸ 0x51 (81) 0x51 (81) 0xBA (186)â ï¸ 0x51 (81) 0x51 (81) 0xBA (186)â ï¸ 0x51 (81) 0x51 (81) 0x51 (81) 0xBA (186)â ï¸ 0x51 (81) ""KeyR"" 0x52 (82) 0x52 (82) 0x52 (82) 0x52 (82) 0x52 (82) 0x52 (82) 0x52 (82) 0x52 (82) ""KeyS"" 0x53 (83) 0x53 (83) 0x53 (83) 0x53 (83) 0x53 (83) 0x53 (83) 0x53 (83) 0x53 (83) ""KeyT"" 0x54 (84) 0x54 (84) 0x54 (84) 0x54 (84) 0x54 (84) 0x54 (84) 0x54 (84) 0x54 (84) ""KeyU"" 0x55 (85) 0x55 (85) 0x55 (85) 0x55 (85) 0x55 (85) 0x55 (85) 0x55 (85) 0x55 (85) ""KeyV"" 0x56 (86) 0x56 (86) 0x56 (86) 0x56 (86) 0x56 (86) 0x56 (86) 0x56 (86) 0x56 (86) ""KeyW"" 0x57 (87) 0x57 (87) 0x57 (87) 0x57 (87) 0x57 (87) 0x57 (87) 0x57 (87) 0x57 (87) ""KeyX"" 0x58 (88) 0x58 (88) 0x58 (88) 0x58 (88) 0x58 (88) 0x58 (88) 0x58 (88) 0x58 (88) ""KeyY"" 0x59 (89) 0x59 (89) 0x59 (89) 0x59 (89) 0x59 (89) 0x59 (89) 0x59 (89) 0x59 (89) ""KeyZ"" 0x5A (90) 0x5A (90) 0x5A (90) 0x5A (90) 0x5A (90) 0x5A (90) 0x5A (90) 0x5A (90)  KeyboardEvent.code US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) Internet Explorer 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29   keyCode values of each browser's keydown event caused by printable keys in  standard position (punctuations in US layout):  KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows (10.9) Mac (10.9) Linux (Ubuntu 14.04) US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek  ""Comma"" 0xBC (188) 0xBC (188) 0xBC (188) 0xBC (188) 0xBC (188) 0xBC (188) 0xBC (188) 0xBC (188) ""Comma"" with Shift ""Period"" 0xBE (190) 0xBE (190) 0xBE (190) 0xBE (190) 0xBE (190) 0xBE (190) 0xBE (190) 0xBE (190) ""Period"" with Shift ""Semicolon"" 0xBA (186) 0xBB (187)â ï¸ 0xBA (186) 0xBA (186) 0xBB (187)â ï¸ 0xBA (186) 0xBA (186) 0xBA (186) [1] 0xE5 (229)â ï¸ [2] 0xBA (186) 0xBA (186) 0xE5 (229)â ï¸ [3] 0xBA (186) 0xBA (186) [1] 0xE5 (229)â ï¸ [2] 0x3B (59) 0x3B (59) 0x00 (0)â ï¸ 0x3B (59) 0x3B (59) [1] 0x00 (0)â ï¸ 0x3B (59) 0x3B (59) 0x00 (0)â ï¸ ""Semicolon"" with Shift 0xBB (187)â ï¸ [1] 0xBB (187)â ï¸ 0xBB (187)â ï¸ [1] ""Quote"" 0xDE (222) 0xBA (186)â ï¸ 0xDE (222) 0xDE (222) 0xBA (186)â ï¸ 0xDE (222) 0xDE (222) 0xBA (186)â ï¸ [1] 0xDE (222) 0xDE (222) 0xBA (186)â ï¸ 0xDE (222) 0xDE (222) 0xBA (186)â ï¸ [1] 0xDE (222) 0xDE (222) 0x3A (58)â ï¸ 0xDE (222) 0xDE (222) 0x3A (58)â ï¸ [1] 0xDE (222) 0xDE (222) 0x3A (58)â ï¸ 0xDE (222) ""Quote"" with Shift 0xDE (222)â ï¸ [1] 0x38 (56)â ï¸ 0xDE (222)â ï¸ [1] ""BracketLeft"" 0xDB (219) 0xC0(192)â ï¸ 0xDB (219) 0xDB (219) 0xC0(192)â ï¸ 0xDB (219) 0xDB (219) 0xDB (219) [1] 0xDB (219) 0xDB (219) 0x32 (50)â ï¸ 0xDB (219) 0xDB (219) 0xDB (219) [1] 0xDB (219) 0xDB (219) 0x40 (64)â ï¸ 0xDB (219) 0xDB (219) 0x40 (64)â ï¸ [1] 0xDB (219) 0xDB (219) 0x40 (64)â ï¸ 0xDB (219) ""BracketLeft"" with Shift 0xC0 (192)â ï¸ [1] 0xC0 (192)â ï¸ 0xC0 (192)â ï¸ [1] ""BracketRight"" 0xDD (221) 0xDB (219)â ï¸ 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ [1] 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ [1] 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ [1] 0xDD (221) 0xDD (221) 0xDB (219)â ï¸ 0xDD (221) ""BracketRight"" with Shift ""Backquote"" 0xC0 (192) â N/A 0xC0 (192) 0xC0 (192) â N/A 0xC0 (192) 0xC0 (192) 0xC0 (192) 0xF4 (244)â ï¸ 0xC0 (192) 0xC0 (192) 0xC0 (192) â N/A 0xC0 (192) 0xC0 (192) 0xC0 (192) 0x00 (0) 0xC0 (192) ""Backquote"" with Shift ""Backslash"" 0xDC (220) 0xDD (221)â ï¸ 0xDC (220) 0xDC (220) 0xDD (221)â ï¸ 0xDC (220) 0xDC (220) 0xDC (220) 0xDD (221)â ï¸ 0xDC (220) 0xDC (220) 0xDC (220) 0xDD (221)â ï¸ 0xDC (220) 0xDC (220) 0xDC (220) 0xDD (221)â ï¸ 0xDC (220) ""Backslash"" with Shift ""Minus"" 0xBD (189) 0xBD (189) 0xBD (189) 0xBD (189) [1] 0xBD (189) 0xBD (189) 0xBD (189) 0xBD (189) 0xBD (189) 0xBD (189) [1] 0xBD (189) 0xAD (173) 0xAD (173) 0xAD (173)[1] 0xAD (173) 0xAD (173) ""Minus"" with Shift 0xBB (187)â ï¸ [1] 0xBB (187)â ï¸ 0xBD (189) 0xBB (187)â ï¸ [1] 0xBD (189) ""Equal"" 0xBB (187) 0xDE (222)â ï¸ 0xBB (187) 0xBB (187) 0xDE (222)â ï¸ 0xBB (187) 0xBB (187) 0xBB (187) [1] 0xBB (187) 0xBB (187) 0x36 (54)â ï¸ 0xBB (187) 0xBB (187) 0xBB (187)[1] 0xBB (187) 0x3D (61) 0xA0 (160)â ï¸ 0x3D (61) 0x3D (61) 0xA0 (160)â ï¸ [1] 0x3D (61) 0x3D (61) 0xA0 (160)â ï¸ 0x3D (61) ""Equal"" with Shift 0xC0 (192)â ï¸ [1] 0xC0 (192)â ï¸ 0xBB (187) 0xC0 (192)â ï¸ [1] 0xBB (187) ""IntlRo"" 0xC1 (193) 0xE2 (226)â ï¸ 0xC1 (193) 0xC1 (193) 0xE2 (226)â ï¸ 0xC1 (193) 0xBD (189) 0xBD (189) 0x00 (0)â ï¸ [4] 0xDC (220)â ï¸ [4] 0xBD (189) 0xBD (189) 0xE5 (229)â ï¸ [5] 0x00 (0) 0xDC (220)â ï¸ 0x00 (0) 0xA7 (167) 0xA7 (167) 0x00 (0) 0x00 (0) 0xDC (220)â ï¸ 0x00 (0) ""IntlRo"" with Shift ""IntlYen"" 0xFF (255) 0xDC (220)â ï¸ 0xFF (255) 0xFF (255) 0xDC (220)â ï¸ 0xFF (255) 0x00 (0)â ï¸ 0x00 (0)â ï¸ 0x00 (0)â ï¸ [4] 0xDC (220)â ï¸ [4] 0x00 (0)â ï¸ 0x00 (0)â ï¸ 0xE5 (229)â ï¸ [5] 0x00 (0)â ï¸ 0xDC (220)â ï¸ 0x00 (0)â ï¸ 0xDC (220) 0xDC (220) 0x00 (0)â ï¸ 0x00 (0)â ï¸ 0xDC (220)â ï¸ 0x00 (0)â ï¸ ""IntlYen"" with Shift 0xDC (220) 0xDC (220) 0xBD (189)â ï¸ 0xDC (220) 0xDC (220)  KeyboardEvent.code US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek US Japanese Greek Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) Internet Explorer 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 [1] The value is input from JIS keyboard. When you use ANSI keyboard, the keyCode value and inputted character are what you select from the US keyboard layout. [2] The key is a dead key. The value of keyup event is 0xBA (186). [3] The key is a dead key. The value of keyup event is 0x10 (16). [4] No key events are fired. [5] The key isn't available with Greek keyboard layout (does not input any character). The value of keyup event is 0x00 (0).Non-printable keys (function keys) keyCode values of each browser's keydown event caused by modifier keys: KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04)  ""AltLeft"" 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) ""AltRight"" 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) 0x12 (18) ""AltRight"" when it's ""AltGraph"" key [1] [1] âN/A 0xE1 (225)â ï¸ â N/A [1] â N/A 0xE1 (225)â ï¸ ""CapsLock"" 0x14 (20) [2] 0x14 (20) [2] 0x14 (20) 0x14 (20) 0x14 (20) 0x14 (20) [2] 0x14 (20) 0x14 (20) [3] ""ControlLeft"" 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) ""ControlRight"" 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) 0x11 (17) ""OSLeft"" 0x5B (91) 0x5B (91) 0x5B (91) 0x5B (91) 0x5B (91) 0x5B (91) 0xE0 (224)â ï¸ 0x5B (91) ""OSRight"" 0x5C (92) 0x5C (92) 0x5D (93)â ï¸ 0x5C (92) 0x5D (93)â ï¸ 0x5B (91)â ï¸ 0xE0 (224)â ï¸ 0x5B (91)â ï¸ ""ShiftLeft"" 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) ""ShiftRight"" 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16) 0x10 (16)  KeyboardEvent.code Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 [1] On Windows, pressing the AltGraph key raises both the ""ControlLeft"" and the ""AltRight"" key events. [2] When the Japanese keyboard layout is active, pressing the CapsLock key without pressing Shift raises 0xF0 (240). The key works as the Alphanumeric key whose label is ""è±æ°"". [3] When the Japanese keyboard layout is active, pressing the ""CapsLock"" key without pressing Shift raises 0x00 (0). The key works as the ""Alphanumeric"" key whose label is ""è±æ°"". keyCode values of each browser's keydown event caused by non-printable keys: KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04)  ""ContextMenu"" 0x5D (93) 0x5D (93) 0x00 (0)â ï¸ [1] 0x5D (93) 0x00 (0)â ï¸ [1] 0x5D (93) 0x5D (93) 0x5D (93) ""Enter"" 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) ""Space"" 0x20 (32) 0x20 (32) 0x20 (32) 0x20 (32) 0x20 (32) 0x20 (32) 0x20 (32) 0x20 (32) ""Tab"" 0x09 (9) 0x09 (9) 0x09 (9) 0x09 (9) 0x09 (9) 0x09 (9) 0x09 (9) 0x09 (9) ""Delete"" 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) ""End"" 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) ""Help"" â N/A â N/A 0x2D (45)â ï¸ [2] 0x2F (47)â ï¸ [3] 0x2D (45)â ï¸ [2] â N/A 0x2D (45)â ï¸ [2] 0x06 (6)â ï¸ [3] ""Home"" 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) ""Insert"" 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) ""PageDown"" 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) ""PageUp"" 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) ""ArrowDown"" 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) ""ArrowLeft"" 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) ""ArrowRight"" 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) ""ArrowUp"" 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) ""Escape"" 0x1B (27) 0x1B (27) 0x1B (27) 0x1B (27) 0x1B (27) 0x1B (27) 0x1B (27) 0x1B (27) ""PrintScreen"" 0x2C (44) [4] 0x2C (44) [4] 0x7C (124)â ï¸ [5] 0x2A (42)â ï¸ 0x7C (124)â ï¸ [5] 0x2C (44) [4] 0x2C (44) 0x2A (42)â ï¸ ""ScrollLock"" 0x91 (145) 0x91 (145) 0x7D (125)â ï¸ [5] 0x91 (145) 0x7D (125)â ï¸ [5] 0x91 (145) 0x91 (145) 0x91 (145) ""Pause"" 0x13 (19) [6] 0x13 (19) [6] 0x7E (126)â ï¸ [5] 0x13 (19) 0x7E (126)â ï¸ [5] 0x13 (19) [6] 0x13 (19) 0x13 (19)  KeyboardEvent.code Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 [1] A keypress event is fired and its keyCode and charCode are 0x10 (16) but the text isn't actually entered into the editor. [2] On Mac, the Help key is mapped to the Insert key of PC keyboards. These keyCode values are the same as the Insert key's keyCode values. [3] Tested on Fedora 20. [4] Only a keyup event is fired. [5] PC's PrintScreen, ScrollLock and Pause are mapped to Mac's F13, F14 and F15, respectively. Chrome and Safari map them to the same keyCode values as Mac's keys. [6] Pause key with Control generates 0x03 (3). keyCode values of each browser's keydown event caused by function keys: KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04)  ""F1"" 0x70 (112) 0x70 (112) 0x70 (112) 0x70 (112) 0x70 (112) 0x70 (112) 0x70 (112) 0x70 (112) ""F2"" 0x71 (113) 0x71 (113) 0x71 (113) 0x71 (113) 0x71 (113) 0x71 (113) 0x71 (113) 0x71 (113) ""F3"" 0x72 (114) 0x72 (114) 0x72 (114) 0x72 (114) 0x72 (114) 0x72 (114) 0x72 (114) 0x72 (114) ""F4"" 0x73 (115) 0x73 (115) 0x73 (115) 0x73 (115) 0x73 (115) 0x73 (115) 0x73 (115) 0x73 (115) ""F5"" 0x74 (116) 0x74 (116) 0x74 (116) 0x74 (116) 0x74 (116) 0x74 (116) 0x74 (116) 0x74 (116) ""F6"" 0x75 (117) 0x75 (117) 0x75 (117) 0x75 (117) 0x75 (117) 0x75 (117) 0x75 (117) 0x75 (117) ""F7"" 0x76 (118) 0x76 (118) 0x76 (118) 0x76 (118) 0x76 (118) 0x76 (118) 0x76 (118) 0x76 (118) ""F8"" 0x77 (119) 0x77 (119) 0x77 (119) 0x77 (119) 0x77 (119) 0x77 (119) 0x77 (119) 0x77 (119) ""F9"" 0x78 (120) 0x78 (120) 0x78 (120) 0x78 (120) 0x78 (120) 0x78 (120) 0x78 (120) 0x78 (120) ""F10"" 0x79 (121) 0x79 (121) 0x79 (121) 0x79 (121) 0x79 (121) 0x79 (121) 0x79 (121) 0x79 (121) ""F11"" 0x7A (122) 0x7A (122) 0x7A (122) 0x7A (122) 0x7A (122) 0x7A (122) 0x7A (122) 0x7A (122) ""F12"" 0x7B (123) 0x7B (123) 0x7B (123) 0x7B (123) 0x7B (123) 0x7B (123) 0x7B (123) 0x7B (123) ""F13"" 0x7C (124) 0x7C (124) 0x7C (124) 0x7C (124) [1] 0x7C (124) 0x7C (124) 0x2C (44) â ï¸ [2] 0x00 (0)â ï¸ [3] ""F14"" 0x7D (125) 0x7D (125) 0x7D (125) 0x7D (125) [1] 0x7D (125) 0x7D (125) 0x91 (145) â ï¸ [2] 0x00 (0)â ï¸ [3] ""F15"" 0x7E (126) 0x7E (126) 0x7E (126) 0x7E (126) [1] 0x7E (126) 0x7E (126) 0x13 (19) â ï¸ [2] 0x00 (0)â ï¸ [3] ""F16"" 0x7F (127) 0x7F (127) 0x7F (127) 0x7F (127) [1] 0x7F (127) 0x7F (127) 0x7F (127) 0x00 (0)â ï¸ [3] ""F17"" 0x80 (128) 0x80 (128) 0x80 (128) 0x80 (128) [1] 0x80 (128) 0x80 (128) 0x80 (128) 0x00 (0)â ï¸ [3] ""F18"" 0x81 (129) 0x81 (129) 0x81 (129) 0x81 (129) [1] 0x81 (129) 0x81 (129) 0x81 (129) 0x00 (0)â ï¸ [3] ""F19"" 0x82 (130) 0x82 (130) 0x82 (130) â N/A [4] 0x82 (130) 0x82 (130) 0x82 (130) 0x00 (0)â ï¸ [3] ""F20"" 0x83 (131) 0x83 (131) 0x83 (131) â N/A [4] 0xE5 (229)â ï¸ [5] 0x83 (131) 0x00 (0)â ï¸ â N/A [6] ""F21"" 0x84 (132) 0x84 (132) 0x00 (0)â ï¸ [7] â N/A [4] 0x00 (0)â ï¸ [7] 0x84 (132) â N/A [8] â N/A [6] ""F22"" 0x85 (133) 0x85 (133) 0x00 (0)â ï¸ [7] â N/A [4] 0x00 (0)â ï¸ [7] 0x85 (133) â N/A [8] â N/A [6] ""F23"" 0x86 (134) 0x86 (134) 0x00 (0)â ï¸ [7] â N/A [4] 0x00 (0)â ï¸ [7] 0x86 (134) â N/A [8] â N/A [6] ""F24"" 0x87 (135) 0x87 (135) 0x00 (0)â ï¸ [7] â N/A [4] 0x00 (0)â ï¸ [7] 0x87 (135) â N/A [8] 0x00 (0)â ï¸ [3]  KeyboardEvent.code Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 [1] Tested on Fedora 20. [2] On PCs, PrintScreen, ScrollLock and Pause are mapped to the Mac's F13, F14 and F15, respectively. Firefox sets for them the same keyCode values as the PC's keys. [3] Tested on Fedora 20. The keys don't cause GDK_Fxx keysyms. If the keys cause proper keysyms, these values must be same as IE. [4] Tested on Fedora 20. The keys don't cause DOM key events on Chromium. [5] The keyCode value of a keyUp event is 0x83 (131). [6] Tested on Fedora 20. The keys don't cause DOM key events on Firefox. [7] Only the keydown event is fired. [8] No DOM key events are fired on Firefox.Numpad keys  keyCode values of each browser's keydown event caused by keys in numpad in  NumLock state  KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04)  ""NumLock"" 0x90 (144) 0x90 (144) 0x0C (12)â ï¸ [1] 0x90 (144) 0x0C (12)â ï¸ [1] 0x90 (144) 0x0C (12)â ï¸ [1] 0x90 (144) ""Numpad0"" 0x60 (96) 0x60 (96) 0x60 (96) 0x60 (96) 0x60 (96) 0x60 (96) 0x60 (96) 0x60 (96) ""Numpad1"" 0x61 (97) 0x61 (97) 0x61 (97) 0x61 (97) 0x61 (97) 0x61 (97) 0x61 (97) 0x61 (97) ""Numpad2"" 0x62 (98) 0x62 (98) 0x62 (98) 0x62 (98) 0x62 (98) 0x62 (98) 0x62 (98) 0x62 (98) ""Numpad3"" 0x63 (99) 0x63 (99) 0x63 (99) 0x63 (99) 0x63 (99) 0x63 (99) 0x63 (99) 0x63 (99) ""Numpad4"" 0x64 (100) 0x64 (100) 0x64 (100) 0x64 (100) 0x64 (100) 0x64 (100) 0x64 (100) 0x64 (100) ""Numpad5"" 0x65 (101) 0x65 (101) 0x65 (101) 0x65 (101) 0x65 (101) 0x65 (101) 0x65 (101) 0x65 (101) ""Numpad6"" 0x66 (102) 0x66 (102) 0x66 (102) 0x66 (102) 0x66 (102) 0x66 (102) 0x66 (102) 0x66 (102) ""Numpad7"" 0x67 (103) 0x67 (103) 0x67 (103) 0x67 (103) 0x67 (103) 0x67 (103) 0x67 (103) 0x67 (103) ""Numpad8"" 0x68 (104) 0x68 (104) 0x68 (104) 0x68 (104) 0x68 (104) 0x68 (104) 0x68 (104) 0x68 (104) ""Numpad9"" 0x69 (105) 0x69 (105) 0x69 (105) 0x69 (105) 0x69 (105) 0x69 (105) 0x69 (105) 0x69 (105) ""NumpadAdd"" 0x6B (107) 0x6B (107) 0x6B (107) 0x6B (107) 0x6B (107) 0x6B (107) 0x6B (107) 0x6B (107) ""NumpadComma"" inputting "","" 0xC2 (194) 0xC2 (194) 0xBC (188)â ï¸ â Always inputs ""."" 0xBC (188)â ï¸ 0xC2 (194) 0x6C (108)â ï¸ â Always inputs ""."" ""NumpadComma"" inputting ""."" or empty string 0xC2 (194) 0xC2 (194) 0xBE (190)â ï¸ 0x6E (110)â ï¸ 0xBE (190)â ï¸ 0xC2 (194) 0x6C (108)â ï¸ 0x6E (110)â ï¸ ""NumpadDecimal"" inputting ""."" 0x6E (110) 0x6E (110) 0x6E (110) 0x6E (110) 0x6E (110) 0x6E (110) 0x6E (110) 0x6E (110) ""NumpadDecimal"" inputting "","" 0x6E (110) 0x6E (110) 0x6E (110) 0x6C (108)â ï¸ 0x6E (110) 0x6E (110) 0x6E (110) 0x6C (108)â ï¸ ""NumpadDivide"" 0x6F (111) 0x6F (111) 0x6F (111) 0x6F (111) 0x6F (111) 0x6F (111) 0x6F (111) 0x6F (111) ""NumpadEnter"" 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) 0x0D (13) ""NumpadEqual"" 0x0C (12) 0x0C (12) 0xBB (187)â ï¸ 0xBB (187)â ï¸ 0xBB (187)â ï¸ 0x0C (12) 0x3D (61)â ï¸ 0x3D (61)â ï¸ ""NumpadMultiply"" 0x6A (106) 0x6A (106) 0x6A (106) 0x6A (106) 0x6A (106) 0x6A (106) 0x6A (106) 0x6A (106) ""NumpadSubtract"" 0x6D (109) 0x6D (109) 0x6D (109) 0x6D (109) 0x6D (109) 0x6D (109) 0x6D (109) 0x6D (109)  KeyboardEvent.code Windows Windows Mac (10.9) Linux (Ubuntu 14.04) Mac (10.9) Windows Mac (10.9) Linux (Ubuntu 14.04) IE 11 Google Chrome 34 Chromium 34 Safari 7 Gecko 29 [1] ""NumLock"" key works as ""Clear"" key on Mac.  keyCode values of each browser's keydown event caused by keys in numpad  without NumLock state  KeyboardEvent.code IE 11 Google Chrome 34 Chromium 34 Gecko 29 Windows Windows Linux (Ubuntu 14.04) Windows Linux (Ubuntu 14.04)  ""Numpad0"" (""Insert"") 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) 0x2D (45) ""Numpad1"" (""End"") 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) 0x23 (35) ""Numpad2"" (""ArrowDown"") 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) 0x28 (40) ""Numpad3"" (""PageDown"") 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) 0x22 (34) ""Numpad4"" (""ArrowLeft"") 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) 0x25 (37) ""Numpad5"" 0x0C (12) 0x0C (12) 0x0C (12) 0x0C (12) 0x0C (12) ""Numpad6"" (""ArrowRight"") 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) 0x27 (39) ""Numpad7"" (""Home"") 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) 0x24 (36) ""Numpad8"" (""ArrowUp"") 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) 0x26 (38) ""Numpad9"" (""PageUp"") 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) 0x21 (33) ""NumpadDecimal"" (""Delete"") 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46) 0x2E (46)  KeyboardEvent.code Windows Windows Linux (Ubuntu 14.04) Windows Linux (Ubuntu 14.04) IE 11 Google Chrome 34 Chromium 34 Gecko 29  Note: Recent Mac doesn't have a NumLock key, and therefore state. That's why the unlocked state is not available. Constants for keyCode valueGecko defines a lot of keyCode values in KeyboardEvent for making the mapping table explicitly. These values are useful for add-on developers of Firefox, but not so useful in public web pages. Constant Value Description  DOM_VK_CANCEL 0x03 (3) Cancel key. DOM_VK_HELP 0x06 (6) Help key. DOM_VK_BACK_SPACE 0x08 (8) Backspace key. DOM_VK_TAB 0x09 (9) Tab key. DOM_VK_CLEAR 0x0C (12)   ""5"" key on Numpad when NumLock is unlocked. Or on Mac, clear key which   is positioned at NumLock key.   DOM_VK_RETURN 0x0D (13) Return/enter key on the main keyboard. DOM_VK_ENTER 0x0E (14)   Reserved, but not used. Deprecated (Dropped, see   [Firefox bug 969247](https://bugzil.la/969247).)   DOM_VK_SHIFT 0x10 (16) Shift key. DOM_VK_CONTROL 0x11 (17) Control key. DOM_VK_ALT 0x12 (18) Alt (Option on Mac) key. DOM_VK_PAUSE 0x13 (19) Pause key. DOM_VK_CAPS_LOCK 0x14 (20) Caps lock. DOM_VK_KANA 0x15 (21) Linux support for this keycode was added in Gecko 4.0. DOM_VK_HANGUL 0x15 (21) Linux support for this keycode was added in Gecko 4.0. DOM_VK_EISU 0x 16 (22) ""è±æ°"" key on Japanese Mac keyboard. DOM_VK_JUNJA 0x17 (23) Linux support for this keycode was added in Gecko 4.0. DOM_VK_FINAL 0x18 (24) Linux support for this keycode was added in Gecko 4.0. DOM_VK_HANJA 0x19 (25) Linux support for this keycode was added in Gecko 4.0. DOM_VK_KANJI 0x19 (25) Linux support for this keycode was added in Gecko 4.0. DOM_VK_ESCAPE 0x1B (27) Escape key. DOM_VK_CONVERT 0x1C (28) Linux support for this keycode was added in Gecko 4.0. DOM_VK_NONCONVERT 0x1D (29) Linux support for this keycode was added in Gecko 4.0. DOM_VK_ACCEPT 0x1E (30) Linux support for this keycode was added in Gecko 4.0. DOM_VK_MODECHANGE 0x1F (31) Linux support for this keycode was added in Gecko 4.0. DOM_VK_SPACE 0x20 (32) Space bar. DOM_VK_PAGE_UP 0x21 (33) Page Up key. DOM_VK_PAGE_DOWN 0x22 (34) Page Down key. DOM_VK_END 0x23 (35) End key. DOM_VK_HOME 0x24 (36) Home key. DOM_VK_LEFT 0x25 (37) Left arrow. DOM_VK_UP 0x26 (38) Up arrow. DOM_VK_RIGHT 0x27 (39) Right arrow. DOM_VK_DOWN 0x28 (40) Down arrow. DOM_VK_SELECT 0x29 (41) Linux support for this keycode was added in Gecko 4.0. DOM_VK_PRINT 0x2A (42) Linux support for this keycode was added in Gecko 4.0. DOM_VK_EXECUTE 0x2B (43) Linux support for this keycode was added in Gecko 4.0. DOM_VK_PRINTSCREEN 0x2C (44) Print Screen key. DOM_VK_INSERT 0x2D (45) Ins(ert) key. DOM_VK_DELETE 0x2E (46) Del(ete) key. DOM_VK_0 0x30 (48) ""0"" key in standard key location. DOM_VK_1 0x31 (49) ""1"" key in standard key location. DOM_VK_2 0x32 (50) ""2"" key in standard key location. DOM_VK_3 0x33 (51) ""3"" key in standard key location. DOM_VK_4 0x34 (52) ""4"" key in standard key location. DOM_VK_5 0x35 (53) ""5"" key in standard key location. DOM_VK_6 0x36 (54) ""6"" key in standard key location. DOM_VK_7 0x37 (55) ""7"" key in standard key location. DOM_VK_8 0x38 (56) ""8"" key in standard key location. DOM_VK_9 0x39 (57) ""9"" key in standard key location. DOM_VK_COLON 0x3A (58) Colon ("":"") key. DOM_VK_SEMICOLON 0x3B (59) Semicolon ("";"") key. DOM_VK_LESS_THAN 0x3C (60) Less-than (""<"") key. DOM_VK_EQUALS 0x3D (61) Equals (""="") key. DOM_VK_GREATER_THAN 0x3E (62) Greater-than ("">"") key. DOM_VK_QUESTION_MARK 0x3F (63) Question mark (""?"") key. DOM_VK_AT 0x40 (64) Atmark (""@"") key. DOM_VK_A 0x41 (65) ""A"" key. DOM_VK_B 0x42 (66) ""B"" key. DOM_VK_C 0x43 (67) ""C"" key. DOM_VK_D 0x44 (68) ""D"" key. DOM_VK_E 0x45 (69) ""E"" key. DOM_VK_F 0x46 (70) ""F"" key. DOM_VK_G 0x47 (71) ""G"" key. DOM_VK_H 0x48 (72) ""H"" key. DOM_VK_I 0x49 (73) ""I"" key. DOM_VK_J 0x4A (74) ""J"" key. DOM_VK_K 0x4B (75) ""K"" key. DOM_VK_L 0x4C (76) ""L"" key. DOM_VK_M 0x4D (77) ""M"" key. DOM_VK_N 0x4E (78) ""N"" key. DOM_VK_O 0x4F (79) ""O"" key. DOM_VK_P 0x50 (80) ""P"" key. DOM_VK_Q 0x51 (81) ""Q"" key. DOM_VK_R 0x52 (82) ""R"" key. DOM_VK_S 0x53 (83) ""S"" key. DOM_VK_T 0x54 (84) ""T"" key. DOM_VK_U 0x55 (85) ""U"" key. DOM_VK_V 0x56 (86) ""V"" key. DOM_VK_W 0x57 (87) ""W"" key. DOM_VK_X 0x58 (88) ""X"" key. DOM_VK_Y 0x59 (89) ""Y"" key. DOM_VK_Z 0x5A (90) ""Z"" key. DOM_VK_WIN 0x5B (91) Windows logo key on Windows. Or Super or Hyper key on Linux. DOM_VK_CONTEXT_MENU 0x5D (93) Opening context menu key. DOM_VK_SLEEP 0x5F (95) Linux support for this keycode was added in Gecko 4.0. DOM_VK_NUMPAD0 0x60 (96) ""0"" on the numeric keypad. DOM_VK_NUMPAD1 0x61 (97) ""1"" on the numeric keypad. DOM_VK_NUMPAD2 0x62 (98) ""2"" on the numeric keypad. DOM_VK_NUMPAD3 0x63 (99) ""3"" on the numeric keypad. DOM_VK_NUMPAD4 0x64 (100) ""4"" on the numeric keypad. DOM_VK_NUMPAD5 0x65 (101) ""5"" on the numeric keypad. DOM_VK_NUMPAD6 0x66 (102) ""6"" on the numeric keypad. DOM_VK_NUMPAD7 0x67 (103) ""7"" on the numeric keypad. DOM_VK_NUMPAD8 0x68 (104) ""8"" on the numeric keypad. DOM_VK_NUMPAD9 0x69 (105) ""9"" on the numeric keypad. DOM_VK_MULTIPLY 0x6A (106) ""*"" on the numeric keypad. DOM_VK_ADD 0x6B (107) ""+"" on the numeric keypad. DOM_VK_SEPARATOR 0x6C (108) DOM_VK_SUBTRACT 0x6D (109) ""-"" on the numeric keypad. DOM_VK_DECIMAL 0x6E (110) Decimal point on the numeric keypad. DOM_VK_DIVIDE 0x6F (111) ""/"" on the numeric keypad. DOM_VK_F1 0x70 (112) F1 key. DOM_VK_F2 0x71 (113) F2 key. DOM_VK_F3 0x72 (114) F3 key. DOM_VK_F4 0x73 (115) F4 key. DOM_VK_F5 0x74 (116) F5 key. DOM_VK_F6 0x75 (117) F6 key. DOM_VK_F7 0x76 (118) F7 key. DOM_VK_F8 0x77 (119) F8 key. DOM_VK_F9 0x78 (120) F9 key. DOM_VK_F10 0x79 (121) F10 key. DOM_VK_F11 0x7A (122) F11 key. DOM_VK_F12 0x7B (123) F12 key. DOM_VK_F13 0x7C (124) F13 key. DOM_VK_F14 0x7D (125) F14 key. DOM_VK_F15 0x7E (126) F15 key. DOM_VK_F16 0x7F (127) F16 key. DOM_VK_F17 0x80 (128) F17 key. DOM_VK_F18 0x81 (129) F18 key. DOM_VK_F19 0x82 (130) F19 key. DOM_VK_F20 0x83 (131) F20 key. DOM_VK_F21 0x84 (132) F21 key. DOM_VK_F22 0x85 (133) F22 key. DOM_VK_F23 0x86 (134) F23 key. DOM_VK_F24 0x87 (135) F24 key. DOM_VK_NUM_LOCK 0x90 (144) Num Lock key. DOM_VK_SCROLL_LOCK 0x91 (145) Scroll Lock key. DOM_VK_WIN_OEM_FJ_JISHO 0x92 (146)   An   OEM specific key on Windows.   This was used for ""Dictionary"" key on Fujitsu OASYS.   DOM_VK_WIN_OEM_FJ_MASSHOU 0x93 (147)   An   OEM specific key on Windows.   This was used for ""Unregister word"" key on Fujitsu OASYS.   DOM_VK_WIN_OEM_FJ_TOUROKU 0x94 (148)   An   OEM specific key on Windows.   This was used for ""Register word"" key on Fujitsu OASYS.   DOM_VK_WIN_OEM_FJ_LOYA 0x95 (149)   An   OEM specific key on Windows.   This was used for ""Left OYAYUBI"" key on Fujitsu OASYS.   DOM_VK_WIN_OEM_FJ_ROYA 0x96 (150)   An   OEM specific key on Windows.   This was used for ""Right OYAYUBI"" key on Fujitsu OASYS.   DOM_VK_CIRCUMFLEX 0xA0 (160) Circumflex (""^"") key. DOM_VK_EXCLAMATION 0xA1 (161) Exclamation (""!"") key. DOM_VK_DOUBLE_QUOTE 0xA3 (162) Double quote ("""""") key. DOM_VK_HASH 0xA3 (163) Hash (""#"") key. DOM_VK_DOLLAR 0xA4 (164) Dollar sign (""$"") key. DOM_VK_PERCENT 0xA5 (165) Percent (""%"") key. DOM_VK_AMPERSAND 0xA6 (166) Ampersand (""&"") key. DOM_VK_UNDERSCORE 0xA7 (167) Underscore (""_"") key. DOM_VK_OPEN_PAREN 0xA8 (168) Open parenthesis (""("") key. DOM_VK_CLOSE_PAREN 0xA9 (169) Close parenthesis ("")"") key. DOM_VK_ASTERISK 0xAA (170) Asterisk (""*"") key. DOM_VK_PLUS 0xAB (171) Plus (""+"") key. DOM_VK_PIPE 0xAC (172) Pipe (""|"") key. DOM_VK_HYPHEN_MINUS 0xAD (173) Hyphen-US/docs/Minus (""-"") key. DOM_VK_OPEN_CURLY_BRACKET 0xAE (174) Open curly bracket (""{"") key. DOM_VK_CLOSE_CURLY_BRACKET 0xAF (175) Close curly bracket (""}"") key. DOM_VK_TILDE 0xB0 (176) Tilde (""~"") key. DOM_VK_VOLUME_MUTE 0xB5 (181) Audio mute key. DOM_VK_VOLUME_DOWN 0xB6 (182) Audio volume down key DOM_VK_VOLUME_UP 0xB7 (183) Audio volume up key DOM_VK_COMMA 0xBC (188) Comma ("","") key. DOM_VK_PERIOD 0xBE (190) Period (""."") key. DOM_VK_SLASH 0xBF (191) Slash (""/"") key. DOM_VK_BACK_QUOTE 0xC0 (192) Back tick (""`"") key. DOM_VK_OPEN_BRACKET 0xDB (219) Open square bracket (""["") key. DOM_VK_BACK_SLASH 0xDC (220) Back slash (""\"") key. DOM_VK_CLOSE_BRACKET 0xDD (221) Close square bracket (""]"") key. DOM_VK_QUOTE 0xDE (222) Quote (''') key. DOM_VK_META 0xE0 (224) Meta key on Linux, Command key on Mac. DOM_VK_ALTGR 0xE1 (225) AltGr key (Level 3 Shift key or Level 5 Shift key) on Linux. DOM_VK_WIN_ICO_HELP 0xE3 (227)   An   OEM specific key on Windows.   This is (was?) used for Olivetti ICO keyboard.   DOM_VK_WIN_ICO_00 0xE4 (228)   An   OEM specific key on Windows.   This is (was?) used for Olivetti ICO keyboard.   DOM_VK_WIN_ICO_CLEAR 0xE6 (230)   An   OEM specific key on Windows.   This is (was?) used for Olivetti ICO keyboard.   DOM_VK_WIN_OEM_RESET 0xE9 (233)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_JUMP 0xEA (234)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_PA1 0xEB (235)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_PA2 0xEC (236)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_PA3 0xED (237)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_WSCTRL 0xEE (238)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_CUSEL 0xEF (239)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_ATTN 0xF0 (240)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_FINISH 0xF1 (241)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_COPY 0xF2 (242)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_AUTO 0xF3 (243)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_ENLW 0xF4 (244)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_WIN_OEM_BACKTAB 0xF5 (245)   An   OEM specific key on Windows.   This was used for Nokia/Ericsson's device.   DOM_VK_ATTN 0xF6 (246) Attn (Attention) key of IBM midrange computers, e.g., AS/400. DOM_VK_CRSEL 0xF7 (247) CrSel (Cursor Selection) key of IBM 3270 keyboard layout. DOM_VK_EXSEL 0xF8 (248) ExSel (Extend Selection) key of IBM 3270 keyboard layout. DOM_VK_EREOF 0xF9 (249) Erase EOF key of IBM 3270 keyboard layout. DOM_VK_PLAY 0xFA (250) Play key of IBM 3270 keyboard layout. DOM_VK_ZOOM 0xFB (251) Zoom key. DOM_VK_PA1 0xFD (253) PA1 key of IBM 3270 keyboard layout. DOM_VK_WIN_OEM_CLEAR 0xFE (254)   Clear key, but we're not sure the meaning difference from   DOM_VK_CLEAR.   OEM specific keys on WindowsOn Windows, some values of virtual keycode are defined (reserved) for OEM specific key. They are available for special keys on non-standard keyboard. In other words, some values are used for different meaning by two or more vendors (or hardware). Starting Gecko 21 (and older than 15), OEM specific key values are available on the keyCode attribute only on Windows. So they are not useful for usual web applications. They are useful only for intranet applications or in similar situations. See ""Manufacturer-specific Virtual-Key Codes (Windows CE 5.0)"" in MSDN for the detail.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
92,developer.mozilla.org/en-US/docs/Web/Performance,"developer.mozilla.org/en-US/docs/Web/Performance. Web performance | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb performanceArticle ActionsEnglish (US)In this articleKey performance guidesBeginner's tutorialsUsing Performance APIsOther documentationGlossary TermsSee also Animation performance and frame rateCSS and JavaScript animation performanceCritical rendering pathLazy loadingNavigation and resource timingsOptimizing startup performancePerformance Monitoring: RUM vs. synthetic monitoringPerformance budgetsPerformance fundamentalsPopulating the page: how browsers workRecommended Web Performance Timings: How long is too long?Understanding latencyUsing dns-prefetch In this articleKey performance guidesBeginner's tutorialsUsing Performance APIsOther documentationGlossary TermsSee alsoWeb performanceWeb performance is the objective measurements and the perceived user experience of load time and runtime. Web performance is how long a site takes to load, become interactive and responsive, and how smooth the content is during user interactions - is the scrolling smooth? are buttons clickable? Are pop-ups quick to load and display, and do they animate smoothly as they do so? Web performance includes both objective measurements like time to load, frames per second, and time to become interactive, and subjective experiences of how long it felt like it took the content to load. The longer it takes for a site to respond, the more users will abandon the site. It is important to minimize the loading and response times and add additional features to conceal latency by making the experience as available and interactive as possible, as soon as possible, while asynchronously loading in the longer tail parts of the experience. There are tools, APIs, and best practices that help us measure and improve web performance. We cover them in this section:Key performance guidesAnimation performance and frame rateAnimation on the web can be done via SVGAnimationElement, window.requestAnimationFrame, including canvas and WebGL_API, CSS animation, video, animated gifs and even animated PNGs and other image types. The performance cost of animating a CSS property can vary from one property to another, and animating expensive CSS properties can result in jank as the browser struggles to hit a smooth FPS.Critical rendering pathThe Critical Rendering Path is the sequence of steps the browser goes through to convert the HTML, CSS, and JavaScript into pixels on the screen. Optimizing the critical render path improves render performance. The critical rendering path includes the Document Object Model (DOM), CSS Object Model (CSSOM), render tree and layout.CSS and JavaScript animation performanceAnimations are critical for a pleasurable user experience on many applications. There are many ways to implement web animations, such as CSS transition/animation or JavaScript-based animations (using Window.requestAnimationFrame). In this article, we analyze the performance differences between CSS-based and JavaScript-based animation.Lazy loadingLazy loading is a strategy to identify resources as non-blocking (non-critical) and load these only when needed. It's a way to shorten the length of the critical rendering path, which translates into reduced page load times.Navigation and resource timingsNavigation timings are metrics measuring a browser's document navigation events. Resource timings are detailed network timing measurements regarding the loading of an application's resources. Both provide the same read-only properties, but navigation timing measures the main document's timings whereas the resource timing provides the times for all the assets or resources called in by that main document and the resources' requested resources.Optimizing startup performanceImproving your startup performance is often one of the highest value performance optimizations that can be made. How long does your app take to start up? Does it seem to lock up the device or the user's browser while the app loads? That makes users worry that your application has crashed, or that something else is wrong. Good user experience includes ensuring your app loads quickly. This article provides performance tips and suggestions for both writing new applications and porting applications to the web from other platforms.Performance budgetsA performance budget is a limit to prevent regressions. It can apply to a file, a file type, all files loaded on a page, a specific metric (e.g. Time to Interactive), a custom metric (e.g. Time to Hero Element), or a threshold over a period of time.Performance fundamentalsPerformance means efficiency. In the context of Open Web Apps, this document explains in general what performance is, how the browser platform helps improve it, and what tools and processes you can use to test and improve it.Performance Monitoring: RUM vs. synthetic monitoringSynthetic monitoring and real user monitoring (RUM) are two approaches for monitoring and providing insight into web performance. RUM and synthetic monitoring provide for different views of performance and have benefits, good use cases and shortfalls. RUM is generally best suited for understanding long-term trends whereas synthetic monitoring is very well suited to regression testing and mitigating shorter-term performance issues during development. In this article we define and compare these two performance monitoring approaches.Populating the page: how browsers workUsers want web experiences with content that is fast to load and smooth to interact with. Therefore, a developer should strive to achieve these two goals.Recommended Web Performance Timings: How long is too long?There are no clear set rules as to what constitutes a slow pace when loading pages, but there are specific guidelines for indicating content will load (1 second), idling (50ms), animating (16.7ms) and responding to user input (50 to 200ms).Understanding latencyLatency is the time it takes for a packet of data to travel from source to a destination. In terms of performance optimization, it's important to optimize to reduce causes of latency and to test site performance emulating high latency to optimize for users with lousy connections. This article explains what latency is, how it impacts performance, how to measure latency, and how to reduce it.Using dns-prefetchDNS-prefetch is an attempt to resolve domain names before resources get requested. This could be a file loaded later or link target a user tries to follow.Beginner's tutorialsThe MDN Web Performance Learning Area contains modern, up-to-date tutorials covering Performance essentials. Start here if you are a newcomer to performance: Web performance: brief overview Overview of the web performance learning path. Start your journey here. What is web performance? This article starts the module off with a good look at what performance actually is â this includes the tools, metrics, APIs, networks, and groups of people we need to consider when thinking about performance, and how we can make performance part of our web development workflow. How do users perceive performance? More important than how fast your website is in milliseconds, is how fast your users perceive your site to be. These perceptions are impacted by actual page load time, idling, responsiveness to user interaction, and the smoothness of scrolling and other animations. In this article, we discuss the various loading metrics, animation, and responsiveness metrics, along with best practices to improve user perception, if not the actual timings. Web performance basics In addition to the front end components of HTML, CSS, JavaScript, and media files, there are features that can make applications slower and features that can make applications subjectively and objectively faster. There are many APIs, developer tools, best practices, and bad practices relating to web performance. Here we'll introduce many of these features ad the basic level and provide links to deeper dives to improve performance for each topic. HTML performance features Some attributes and the source order of your markup can impact the performance or your website. By minimizing the number of DOM nodes, making sure the best order and attributes are used for including content such as styles, scripts, media, and third-party scripts, you can drastically improve the user experience. This article looks in detail at how HTML can be used to ensure maximum performance. Multimedia: images and video The lowest hanging fruit of web performance is often media optimization. Serving different media files based on each user agent's capability, size, and pixel density is possible. Additional tips like removing audio tracks from background videos can improve performance even further. In this article we discuss the impact video, audio, and image content has on performance, and the methods to ensure that impact is as minimal as possible. CSS performance features CSS may be a less important optimization focus for improved performance, but there are some CSS features that impact performance more than others. In this article we look at some CSS properties that impact performance and suggested ways of handling styles to ensure performance is not negatively impacted. JavaScript performance best practices JavaScript, when used properly, can allow for interactive and immersive web experiences â or it can significantly harm download time, render time, in-app performance, battery life, and user experience. This article outlines some JavaScript best practices that should be considered to ensure even complex content is as performant as possible. Mobile performance With web access on mobile devices being so popular, and all mobile platforms having fully-fledged web browsers, but possibly limited bandwidth, CPU and battery life, it is important to consider the performance of your web content on these platforms. This article looks at mobile-specific performance considerations. Using Performance APIs Performance API This guide describes how to use the Performance interfaces that are defined in the High-Resolution Time standard. Resource Timing API Resource loading and timing the loading of those resources, including managing the resource buffer and coping with CORS The performance timeline The Performance Timeline standard defines extensions to the Performance interface to support client-side latency measurements within applications. Together, these interfaces can be used to help identify an application's performance bottlenecks. User Timing API Create application specific timestamps using the user timing API's ""mark"" and ""measure"" entry types - that are part of the browser's performance timeline. Beacon API The Beacon interface schedules an asynchronous and non-blocking request to a web server. Intersection Observer API Learn to time element visibility with the Intersection Observer API and be asynchronously notified when elements of interest becomes visible. Other documentation Firefox Profiler Performance Features This website provides information on how to use and understand the performance features in your developer tools, including Call Tree, Flame Graph, Stack Chart, Marker Chart and Network Chart. Profiling with the built-in profiler Learn how to profile app performance with Firefox's built-in profiler. Glossary Terms Beacon Brotli compression Client hints Code splitting CSSOM Domain sharding Effective connection type First contentful paint First CPU idle First input delay First interactive First meaningful paint First paint HTTP HTTP/2 Jank Latency Lazy load Long task Lossless compression Lossy compression Main thread Minification Network throttling Packet Page load time Page prediction Parse Perceived performance Prefetch Prerender QUIC RAIL Real User Monitoring Resource Timing Round Trip Time (RTT) Server Timing Speculative parsing Speed index SSL Synthetic monitoring TCP handshake TCP slow start Time to first byte Time to interactive TLS Transmission Control Protocol (TCP) Tree shaking Web performance See alsoHTML The <picture> Element The <video> Element The <source> Element The <img> srcset attribute Responsive images Preloading content with rel=""preload"" https://w3c.github.io/preload/ CSS will-change GPU v CPU Measuring layout Font-loading best practices JavaScript DOMContentLoaded Garbage collection requestAnimationFrame APIs Performance API Navigation Timing API Media Capabilities API Network Information API PerformanceNavigationTiming Battery Status API Navigator.deviceMemory Intersection Observer Using the User Timing API High Resolution Timing API (https://w3c.github.io/hr-time/) Resource Timing API Page Visibility Cooperative Scheduling of Background Tasks API requestIdleCallback() Beacon API Resource Hints - dns-prefetch, preconnect, prefetch, and prerender FetchEvent.preloadResponse Performance Server Timing API Headers Content-encoding HTTP/2 gZip Client Hints Tools Performance in Firefox Developer Tools Additional Metrics Speed Index and Perceptual Speed Index Best Practices Using Service Workers Using Web Workers Web Workers API PWA Caching Content Delivery Networks (CDN) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 15, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
93,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save#drawing/state,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save#drawing/state. CanvasRenderingContext2D: save() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2Dsave()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save() scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: save() method The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack. The drawing stateThe drawing state that gets saved onto a stack consists of: The current transformation matrix. The current clipping region. The current dash list.  The current values of the following attributes:  strokeStyle,  fillStyle,  globalAlpha,  lineWidth,  lineCap,  lineJoin,  miterLimit,  lineDashOffset,  shadowOffsetX,  shadowOffsetY,  shadowBlur,  shadowColor,  globalCompositeOperation, font,  textAlign,  textBaseline,  direction,  imageSmoothingEnabled. Syntaxsave() ParametersNone.Return valueNone (undefined).ExamplesSaving the drawing state This example uses the save() method to save the current state and restore() to restore it later, so that you are able to draw a rect with the current state later. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Save the current state ctx.save(); ctx.fillStyle = ""green""; ctx.fillRect(10, 10, 100, 100); // Restore to the state saved by the most recent call to save() ctx.restore(); ctx.fillRect(150, 40, 100, 100); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-save-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D CanvasRenderingContext2D.restore() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
94,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/getOwnPropertyDescriptors,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/getOwnPropertyDescriptors. Object.getOwnPropertyDescriptors() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsObjectObject.getOwnPropertyDescriptors()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsObjectConstructorObject() constructorPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.assign()Object.create()Object.defineProperties()Object.defineProperty()Object.entries()Object.freeze()Object.fromEntries()Object.getOwnPropertyDescriptor()Object.getOwnPropertyDescriptors()Object.getOwnPropertyNames()Object.getOwnPropertySymbols()Object.getPrototypeOf()Object.hasOwn()Object.prototype.hasOwnProperty()Object.is()Object.isExtensible()Object.isFrozen()Object.prototype.isPrototypeOf()Object.isSealed()Object.keys()Object.preventExtensions()Object.prototype.propertyIsEnumerable()Object.seal()Object.setPrototypeOf()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()Object.values()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoObject.getOwnPropertyDescriptors() The Object.getOwnPropertyDescriptors() static method returns all own property descriptors of a given object. Try itSyntaxObject.getOwnPropertyDescriptors(obj) Parameters obj The object for which to get all own property descriptors. Return value An object containing all own property descriptors of an object. Might be an empty object, if there are no properties. Description This method permits examination of the precise description of all own properties of an object. A property in JavaScript consists of either a string-valued name or a Symbol and a property descriptor. Further information about property descriptor types and their attributes can be found in Object.defineProperty(). A property descriptor is a record with some of the following attributes: value The value associated with the property (data descriptors only). writable true if and only if the value associated with the property may be  changed (data descriptors only).  get   A function which serves as a getter for the property, or undefined if  there is no getter (accessor descriptors only).  set   A function which serves as a setter for the property, or undefined if  there is no setter (accessor descriptors only).  configurable true if and only if the type of this property descriptor may be changed  and if the property may be deleted from the corresponding object.  enumerable true if and only if this property shows up during enumeration of the  properties on the corresponding object.  ExamplesCreating a shallow copy Whereas the Object.assign() method will only copy enumerable and own properties from a source object to a target object, you are able to use this method and Object.create() for a shallow copy between two unknown objects: Object.create( Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj), ); Creating a subclass A typical way of creating a subclass is to define the subclass, set its prototype to an instance of the superclass, and then define properties on that instance. This can get awkward especially for getters and setters. Instead, you can use this code to set the prototype: function superclass() {} superclass.prototype = { // Define the superclass constructor, methods, and properties here }; function subclass() {} subclass.prototype = Object.create(superclass.prototype, { // Define the subclass constructor, methods, and properties here }); SpecificationsSpecificationECMAScript Language Specification # sec-object.getownpropertydescriptorsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Object.getOwnPropertyDescriptors in core-js Object.getOwnPropertyDescriptor() Object.defineProperty() Polyfill Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
95,developer.mozilla.org/en-US/docs/Web/API/Navigator/languages,"developer.mozilla.org/en-US/docs/Web/API/Navigator/languages. Navigator: languages property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNavigatorlanguagesArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APINavigatorInstance propertiesactiveVRDisplays Non-standard Deprecated appCodeName Deprecated appName Deprecated appVersion Deprecated buildID Non-standard clipboardconnection Experimental contacts Experimental cookieEnabledcredentialsdeviceMemory Experimental doNotTrack Deprecated geolocationglobalPrivacyControl Experimental Non-standard gpu Experimental hardwareConcurrencyhid Experimental ink Experimental keyboard Experimental languagelanguages locksmaxTouchPointsmediaCapabilitiesmediaDevicesmediaSessionmimeTypes Deprecated onLineoscpu Deprecated pdfViewerEnabledpermissionsplatform Deprecated plugins Deprecated presentationproduct Deprecated productSub Deprecated serial Experimental serviceWorkerstorageuserActivationuserAgentuserAgentData Experimental vendor Deprecated vendorSub Deprecated virtualKeyboard Experimental wakeLockwebdriverwindowControlsOverlayxr Experimental Instance methodscanShare()clearAppBadge()getAutoplayPolicy() Experimental getBattery()getGamepads()getUserMedia() Deprecated getVRDisplays() Non-standard Deprecated javaEnabled() Deprecated registerProtocolHandler()requestMediaKeySystemAccess()requestMIDIAccess()sendBeacon()setAppBadge()share()taintEnabled() Deprecated unregisterProtocolHandler()vibrate()Related pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoNavigator: languages property The Navigator.languages read-only property returns an array of strings representing the user's preferred languages. The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47). In the returned array they are ordered by preference with the most preferred language first.  The value of navigator.language is the first element of the returned array.  When its value changes, as the user's preferred languages are changed a languagechange event is fired on the Window object.  The Accept-Language HTTP header in every HTTP request from the user's browser uses the same value for the navigator.languages property except for the extra qvalues (quality values) field (e.g. en-US;q=0.8). ValueA string.Examplesnavigator.language; //""en-US"" navigator.languages; //[""en-US"", ""zh-CN"", ""ja-JP""] SpecificationsSpecificationHTML Standard # dom-navigator-languages-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also navigator.language navigator languagechange event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
96,developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable,"developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable. ProgressEvent: lengthComputable property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsProgressEventlengthComputableArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilitySee alsoXMLHttpRequestProgressEventConstructorProgressEvent()Instance propertieslengthComputable loadedtotalInheritance:EventRelated pages for XMLHttpRequestFormDataXMLHttpRequestXMLHttpRequestEventTargetXMLHttpRequestUploadIn this articleValueSpecificationsBrowser compatibilitySee alsoProgressEvent: lengthComputable property The ProgressEvent.lengthComputable read-only property is a boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value. ValueA boolean.SpecificationsSpecificationXMLHttpRequest Standard # dom-progressevent-lengthcomputableBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The ProgressEvent interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
97,developer.mozilla.org/en-US/docs/Glossary/Search/engine,"developer.mozilla.org/en-US/docs/Glossary/Search/engine. Search engine - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSearch engineArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoSearch engineA search engine is a software system that collects information from the World Wide Web and presents it to users who are looking for specific information. A search engine conducts the following processes: Web crawling: Searching websites by navigating Hyperlinks on web pages, both within a site, and from one site to another. A website owner can exclude areas of the site from being accessed by a search engine's web crawler (or spider), by defining ""robot exclusion"" information in a file named robots.txt. Indexing: Associating keywords and other information with specific web pages that have been crawled. This enables users to find relevant pages as quickly as possible. Searching: Looking for relevant web pages based on queries consisting of key words and other commands to the search engine. The search engine finds the URLs of pages that match the query, and ranks them based on their relevance. It then presents results to the user in order of the ranking. The most popular search engine is Google. Other top search engines include Yahoo!, Bing, Baidu, and AOL.See also Web search engine on Wikipedia Search engine on Webopedia How Internet search engines work on How Stuff Works Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
98,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/charCode. KeyboardEvent: charCode property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventcharCodeArticle ActionsEnglish (US)In this articleValueExamplesNotesSpecificationsBrowser compatibilityUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesNotesSpecificationsBrowser compatibilityKeyboardEvent: charCode propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The charCode read-only property of the KeyboardEvent interface returns the Unicode value of a character key pressed during a keypress event. Warning: Do not use this property, as it is deprecated. Instead, get the  Unicode value of the character using the key  property. ValueA number that represents the Unicode value of the character key that was pressed.ExamplesHTML<p>Type anything into the input box below to log a <code>charCode</code>.</p> <input type=""text"" /> <p id=""log""></p> JavaScriptconst input = document.querySelector(""input""); const log = document.querySelector(""#log""); input.addEventListener(""keypress"", (e) => { log.innerText = `Key pressed: ${String.fromCharCode(e.charCode)} charCode: ${  e.charCode }`; }); ResultNotes  In a keypress event, the Unicode value of the key pressed is stored in  either the keyCode or charCode  property, but never both. If the key pressed generates a character (e.g., 'a'),  charCode is set to the code of that character; charCode  respects the letter case (in other words, charCode takes into account  whether the  shift  key is held down). Otherwise, the code of the pressed key  is stored in keyCode.   When one or more modifier keys are pressed, there are some complex rules for  charCode. See Gecko Keypress Event  for details.  charCode is never set in the keydown and  keyup events. In these cases, keyCode is set instead.   To get the code of the key regardless of whether it was stored in  keyCode or charCode, query the which property.   Characters entered through an IME do not register through keyCode or  charCode.   For a list of the charCode values associated with particular keys, run  Example 7: Displaying Event Object Properties and view the resulting HTML table. SpecificationsSpecificationUI Events # dom-keyboardevent-charcodeBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
99,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Array/Array#array/literal/notation,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Array/Array#array/literal/notation. Array() constructor - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsArrayArray() constructorArticle ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsArrayConstructorArray() constructorPropertiesArray[@@species]Array.prototype[@@unscopables]Array: lengthMethodsArray.prototype[@@iterator]()Array.prototype.at()Array.prototype.concat()Array.prototype.copyWithin()Array.prototype.entries()Array.prototype.every()Array.prototype.fill()Array.prototype.filter()Array.prototype.find()Array.prototype.findIndex()Array.prototype.findLast()Array.prototype.findLastIndex()Array.prototype.flat()Array.prototype.flatMap()Array.prototype.forEach()Array.from()Array.fromAsync() Experimental Array.prototype.group() Experimental Array.prototype.groupToMap() Experimental Array.prototype.includes()Array.prototype.indexOf()Array.isArray()Array.prototype.join()Array.prototype.keys()Array.prototype.lastIndexOf()Array.prototype.map()Array.of()Array.prototype.pop()Array.prototype.push()Array.prototype.reduce()Array.prototype.reduceRight()Array.prototype.reverse()Array.prototype.shift()Array.prototype.slice()Array.prototype.some()Array.prototype.sort()Array.prototype.splice()Array.prototype.toLocaleString()Array.prototype.toReversed()Array.prototype.toSorted()Array.prototype.toSpliced()Array.prototype.toString()Array.prototype.unshift()Array.prototype.values()Array.prototype.with()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoArray() constructorThe Array() constructor creates Array objects.Syntaxnew Array() new Array(element0) new Array(element0, element1) new Array(element0, element1, /* â¦ ,*/ elementN) new Array(arrayLength) Array() Array(element0) Array(element0, element1) Array(element0, element1, /* â¦ ,*/ elementN) Array(arrayLength) Note: Array() can be called with or without new. Both create a new Array instance. Parameters elementN   A JavaScript array is initialized with the given elements, except in the case where  a single argument is passed to the Array constructor and that argument is  a number (see the arrayLength parameter below). Note that this special case only  applies to JavaScript arrays created with the Array constructor, not  array literals created with the bracket syntax.  arrayLength   If the only argument passed to the Array constructor is an integer  between 0 and 232 - 1 (inclusive), this returns a new JavaScript array with  its length property set to that number (Note: this  implies an array of arrayLength empty slots, not slots with actual  undefined values â see sparse arrays).  Exceptions RangeError Thrown if there's only one argument (arrayLength) that is a number, but its value is not an integer or not between 0 and 232 - 1 (inclusive). ExamplesArray literal notation Arrays can be created using the literal notation: const fruits = [""Apple"", ""Banana""]; console.log(fruits.length); // 2 console.log(fruits[0]); // ""Apple"" Array constructor with a single parameter Arrays can be created using a constructor with a single number parameter. An array is created with its length property set to that number, and the array elements are empty slots. const arrayEmpty = new Array(2); console.log(arrayEmpty.length); // 2 console.log(arrayEmpty[0]); // undefined; actually, it is an empty slot console.log(0 in arrayEmpty); // false console.log(1 in arrayEmpty); // false const arrayOfOne = new Array(""2""); // Not the number 2 but the string ""2"" console.log(arrayOfOne.length); // 1 console.log(arrayOfOne[0]); // ""2"" Array constructor with multiple parameters If more than one argument is passed to the constructor, a new Array with the given elements is created. const fruits = new Array(""Apple"", ""Banana""); console.log(fruits.length); // 2 console.log(fruits[0]); // ""Apple"" SpecificationsSpecificationECMAScript Language Specification # sec-array-constructorBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Indexed collections Array Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 17, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
100,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey. KeyboardEvent: metaKey property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventmetaKeyArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKey repeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoKeyboardEvent: metaKey property The KeyboardEvent.metaKey read-only property returning a boolean value that indicates if the Meta key was pressed (true) or not (false) when the event occurred. Some operating systems may intercept the key so it is never detected. Note: On Macintosh keyboards, this is the â Command key. Warning: At least as of Firefox 48, the â Windows key is no longer considered the  ""Meta"" key. KeyboardEvent.metaKey is false when the â Windows key is pressed. ValueA boolean value.Examples<button onclick=""ismetaKey(event)"">Click me with the meta key</button> <p id=""output""></p> function ismetaKey(e) { document.querySelector(  ""#output"" ).textContent = `metaKey pressed? ${e.metaKey}`; } ResultSpecificationsSpecificationUI Events # dom-keyboardevent-metakeyBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also KeyboardEvent Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
101,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src. HTMLMediaElement: src property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementsrcArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental src srcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: src property The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element. Note: The best way to know the URL of the media resource currently  in active use in this element is to look at the value of the  currentSrc attribute, which also takes  into account selection of a best or preferred media resource from a list provided in  an HTMLSourceElement (which represents a <source>  element). Value A string object containing the URL of a media resource to use in the element; this property reflects the value of the HTML element's src attribute. Examplesconst obj = document.createElement(""video""); console.log(obj.src); // """" SpecificationsSpecificationHTML Standard # dom-media-srcBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.src property Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
102,developer.mozilla.org/en-US/docs/Web/Security/Transport/Layer/Security,"developer.mozilla.org/en-US/docs/Web/Security/Transport/Layer/Security. Transport Layer Security - Web security | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb securityTransport Layer SecurityArticle ActionsEnglish (US)In this articleHistoryHTTP over TLSTLS 1.3Retiring old TLS versionsTLS handshake timeout valuesSee also Certificate TransparencyFeatures gated by user activationFirefox security guidelinesIFrame credentiallessInsecure passwordsMixed contentMixed contentHow to fix a website with blocked mixed contentReferer header: privacy and security concernsSame-origin policySecure contextsSecure contextsFeatures restricted to secure contextsSecuring your siteSecuring your siteHow to turn off form autocompletionSubdomain takeoversSubresource IntegrityTransport Layer SecurityTypes of attacksWeak signature algorithms In this articleHistoryHTTP over TLSTLS 1.3Retiring old TLS versionsTLS handshake timeout valuesSee alsoTransport Layer SecurityThe security of any connection using Transport Layer Security (TLS) is heavily dependent upon the cipher suites and security parameters selected. This article's goal is to help you make these decisions to ensure the confidentiality and integrity of communication between client and server. The Mozilla Operations Security (OpSec) team maintains a wiki entry with reference configurations for servers. The Transport Layer Security (TLS) protocol is the standard for enabling two networked applications or devices to exchange information privately and robustly. Applications that use TLS can choose their security parameters, which can have a substantial impact on the security and reliability of data. This article provides an overview of TLS and the kinds of decisions you need to make when securing your content.HistoryWhen HTTPS was introduced, it was based on Secure Sockets Layer (SSL) 2.0, a technology introduced by Netscape. It was updated to SSL 3.0 not long after, and as its usage expanded, it became clear that a common, standard encryption technology needed to be specified to ensure interoperability among all web browsers and servers. The Internet Engineering Task Force (IETF) specified TLS 1.0 in RFC 2246 in January 1999. The current version of TLS is 1.3 (RFC 8446). Despite the fact that the web now uses TLS for encryption, many people still refer to it as ""SSL"" out of habit. Although TLS can be used on top of any low-level transport protocol, the original goal of the protocol was to encrypt HTTP traffic. HTTP encrypted using TLS is commonly referred to as HTTPS. TLS-encrypted web traffic is by convention exchanged on port 443 by default, while unencrypted HTTP uses port 80 by default. HTTPS remains an important use case for TLS.HTTP over TLSTLS provides three primary services that help ensure the safety and security of data exchanged with it: Authentication Authentication lets each party to the communication verify that the other party is who they claim to be. Encryption Data is encrypted while being transmitted between the user agent and the server, in order to prevent it from being read and interpreted by unauthorized parties. Integrity TLS ensures that between encrypting, transmitting, and decrypting the data, no information is lost, damaged, tampered with, or falsified. A TLS connection starts with a handshake phase where a client and server agree on a shared secret and important parameters, like cipher suites, are negotiated. Once parameters and a data exchange mode where application data, such HTTP, is exchanged.Cipher suitesThe primary parameters that the TLS handshake negotiates is a cipher suite. In TLS 1.2 and earlier, the negotiated cipher suite includes a set of cryptographic algorithms that together provide the negotiation of the shared secret, the means by which a server is authenticated, and the method that will be used to encrypt data. The cipher suite in TLS 1.3 primarily governs the encryption of data, separate negotiation methods are used for key agreement and authentication. Different software might use different names for the same cipher suites. For instance, the names used in OpenSSL and GnuTLS differ from those in the TLS standards. The cipher names correspondence table on the Mozilla OpSec team's article on TLS configurations lists these names as well as information about compatibility and security levels.Configuring your serverCorrectly configuring your server is crucial. In general, you should try to limit cipher support to the newest ciphers possible which are compatible with the browsers you want to be able to connect to your site. The Mozilla OpSec guide to TLS configurations provides more information on recommended configurations. To assist you in configuring your site, Mozilla provides a helpful TLS configuration generator that will generate configuration files for the following Web servers: Apache Nginx Lighttpd HAProxy Amazon Web Services CloudFormation Elastic Load Balancer Using the configurator is a recommended way to create the configuration to meet your needs; then copy and paste it into the appropriate file on your server and restart the server to pick up the changes. The configuration file may need some adjustments to include custom settings, so be sure to review the generated configuration before using it; installing the configuration file without ensuring any references to domain names and the like are correct will result in a server that just doesn't work.TLS 1.3RFC 8446: TLS 1.3 is a major revision to TLS. TLS 1.3 includes numerous changes that improve security and performance. The goals of TLS 1.3 are: Remove unused and unsafe features of TLS 1.2. Include strong security analysis in the design. Improve privacy by encrypting more of the protocol. Reduce the time needed to complete a handshake. TLS 1.3 changes much of the protocol fundamentals, but preserves almost all of the basic capabilities of previous TLS versions. For the web, TLS 1.3 can be enabled without affecting compatibility with some rare exceptions (see below). The major changes in TLS 1.3 are: The TLS 1.3 handshake completes in one round trip in most cases, reducing handshake latency. A server can enable a 0-RTT (zero round trip time) handshake. Clients that reconnect to the server can send requests immediately, eliminating the latency of the TLS handshake entirely. Though the performance gains from 0-RTT can be significant, they come with some risk of replay attack, so some care is needed before enabling this feature. TLS 1.3 supports forward-secure modes only, unless the connection is resumed or it uses a pre-shared key. TLS 1.3 defines a new set of cipher suites that are exclusive to TLS 1.3. These cipher suites all use modern Authenticated Encryption with Associated Data (AEAD) algorithms. The TLS 1.3 handshake is encrypted, except for the messages that are necessary to establish a shared secret. In particular, this means that server and client certificates are encrypted. Note however that the server identity (the server_name or SNI extension) that a client sends to the server is not encrypted. Numerous mechanisms have been disabled: renegotiation, generic data compression, Digital Signature Algorithm (DSA) certificates, static RSA key exchange, and key exchange with custom Diffie-Hellman (DH) groups. Implementations of draft versions of TLS 1.3 are available. TLS 1.3 is enabled in some browsers, including the 0-RTT mode. Web servers that enable TLS 1.3 might need to adjust configuration to allow TLS 1.3 to operate successfully. TLS 1.3 adds just one significant new use case. The 0-RTT handshake can provide significant performance gains for latency sensitive applications, like the web. Enabling 0-RTT requires additional steps, both to ensure successful deployment and to manage the risks of replay attacks. The removal of renegotiation in TLS 1.3 might affect some web servers that rely on client authentication using certificates. Some web servers use renegotiation to either ensure that client certificates are encrypted, or to request client certificates only when certain resources are requested. For the privacy of client certificates, the encryption of the TLS 1.3 handshake ensures that client certificates are encrypted; however this might require some software changes. Reactive client authentication using certificates is supported by TLS 1.3 but not widely implemented. Alternative mechanisms are in the process of being developed, which will also support HTTP/2.Retiring old TLS versionsTo help with working towards a more modern, more secure web, all major browsers began removing support for TLS 1.0 and 1.1 in early 2020. You'll need to make sure your web server supports TLS 1.2 or 1.3 going forward. From version 74 onwards, Firefox will return a Secure Connection Failed error when connecting to servers using the older TLS versions (Firefox bug 1606734).TLS handshake timeout valuesIf the TLS handshake starts to become slow or unresponsive for some reason, the user's experience can be affected significantly. To mitigate this problem, modern browsers have implemented handshake timeouts: Since version 58, Firefox implements a TLS handshake timeout with a default value of 30 seconds. The timeout value can be varied by editing the network.http.tls-handshake-timeout pref in about:config. See also The Mozilla SSL Configuration Generator and Cipherlist.eu can help you generate configuration files for your server to secure your site. The Mozilla Operations Security (OpSec) team maintains a wiki page with reference TLS configurations. Mozilla Observatory, SSL Labs, and Cipherscan can help you test a site to see how secure its TLS configuration is. Secure Contexts Strict-Transport-Security HTTP header Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 26, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
103,developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported/static,"developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported/static. MediaSource: isTypeSupported() static method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsMediaSourceisTypeSupported()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoMedia Source Extensions APIMediaSourceConstructorMediaSource()Static propertiescanConstructInDedicatedWorker Experimental Instance propertiesactiveSourceBuffersdurationhandle Experimental readyStatesourceBuffersStatic methodsisTypeSupported() Instance methodsaddSourceBuffer()clearLiveSeekableRange()endOfStream()removeSourceBuffer()setLiveSeekableRange()Inheritance:EventTargetRelated pages for Media Source ExtensionsHTMLVideoElement.getVideoPlaybackQuality()MediaSourceHandleSourceBufferSourceBufferListTextTrack.sourceBufferURL.createObjectURL()VideoPlaybackQualityVideoTrack.sourceBufferIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoMediaSource: isTypeSupported() static methodThe MediaSource.isTypeSupported() static method returns a boolean value which is true if the given MIME type and (optional) codec are likely to be supported by the current user agent. That is, if it can successfully create SourceBuffer objects for that media type. If the returned value is false, then the user agent is certain that it cannot access media of the specified format. SyntaxMediaSource.isTypeSupported(type) Parameters type A string specifying the MIME type of the media and (optionally) a codecs parameter containing a comma-separated list of the supported codecs. Return valueA value of false if the media of the given type will not play. A value of true is returned if the browser can probably play media of the specified type. This is not a guarantee, and your code must be prepared for the possibility that the media will not play correctly if at all.  All web APIs that work with media files use a ""no/maybe/probably"" approach (or, in this case, ""no or probably"") when determining if a media type can be used. This is because media files are complex, intricate constructs with far too many subtle variations to be absolutely certain of anything until you actually use the contents of the media. ExamplesThe following snippet is from an example written by Nick Desaulniers (view the full demo live, or download the source for further investigation). The function getMediaSource(), which is not defined here, returns a MediaSource. const assetURL = ""frag_bunny.mp4""; // Need to be specific for Blink regarding codecs // ./mp4info frag_bunny.mp4 | grep Codec const mimeCodec = 'video/mp4; codecs=""avc1.42E01E, mp4a.40.2""'; let mediaSource; if (""MediaSource"" in window && MediaSource.isTypeSupported(mimeCodec)) { mediaSource = getMediaSource(); console.log(mediaSource.readyState); // closed video.src = URL.createObjectURL(mediaSource); mediaSource.addEventListener(""sourceopen"", sourceOpen); } else { console.error(""Unsupported MIME type or codec: "", mimeCodec); } function sourceOpen() { console.log(this.readyState); // open const sourceBuffer = mediaSource.addSourceBuffer(mimeCodec); fetchAB(assetURL, (buf) => {  sourceBuffer.addEventListener(""updateend"", () => {  mediaSource.endOfStream();  video.play();  console.log(mediaSource.readyState); // ended  });  sourceBuffer.appendBuffer(buf); }); } SpecificationsSpecificationMedia Source Extensionsâ¢ # dom-mediasource-istypesupportedBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Media Source Extensions API Guide to media types and formats on the web Codecs in common media types SourceBuffer SourceBufferList Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 28, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
104,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector. DocumentFragment: querySelector() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentquerySelector()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChildlastElementChildInstance methodsappend()getElementById()prepend()querySelector() querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: querySelector() method The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.  If the selector matches an ID and this ID is erroneously used several times in the document, it returns the first matching element.  If the selectors specified in parameter are invalid a DOMException with a SYNTAX_ERR value is raised. SyntaxquerySelector(selectors) Parameters selectors   A string containing one or more CSS selectors separated by  commas.  Return value An Element object representing the first element in the document that matches the specified set of CSS selectors, or null is returned if there are no matches. ExamplesBasic example In this basic example, the first element in the DocumentFragment with the class ""myclass"" is returned: const el = documentfragment.querySelector("".myclass""); CSS syntax and the method's argument The string argument pass to querySelector must follow the CSS syntax. To match ID or selectors that do not follow the CSS syntax (by using semicolon or space inappropriately for example), it's mandatory to escape the wrong character with a double back slash: <div id=""foo\bar""></div> <div id=""foo:bar""></div> <script> document.querySelector(""#foo\bar""); // Does not match anything document.querySelector(""#foo\\\\bar""); // Match the first div document.querySelector(""#foo:bar""); // Does not match anything document.querySelector(""#foo\\:bar""); // Match the second div </script> SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-queryselectorâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DocumentFragment interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
105,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#description,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#description. var - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStatements and declarationsvarArticle ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsovar The var statement declares a function-scoped or globally-scoped variable, optionally initializing it to a value. Try itSyntaxvar name1; var name1 = value1; var name1 = value1, name2 = value2; var name1, name2 = value2; var name1 = value1, name2, /* â¦, */ nameN = valueN; nameN Variable name. It can be any legal identifier. valueN Optional   Initial value of the variable. It can be any legal expression. Default value is  undefined.   Alternatively, the Destructuring Assignment syntax can also be used to declare variables. var { bar } = foo; // where foo = { bar:10, baz:12 }; /* This creates a variable with the name 'bar', which has a value of 10 */ Description var declarations, wherever they occur, are processed before any code is executed. This is called hoisting and is discussed further below.  The scope of a variable declared with var is its current execution context and closures thereof, which is either the enclosing function and functions declared within it, or, for variables declared outside any function, global. Duplicate variable declarations using var will not trigger an error, even in strict mode, and the variable will not lose its value, unless another assignment is performed. function foo() { var x = 1; function bar() {  var y = 2;  console.log(x); // 1 (function `bar` closes over `x`)  console.log(y); // 2 (`y` is in scope) } bar(); console.log(x); // 1 (`x` is in scope) console.log(y); // ReferenceError, `y` is scoped to `bar` } foo();  Variables declared using var are created before any code is executed in a process known as hoisting. Their initial value is undefined. console.log(x); // undefined (note: not ReferenceError) console.log(""still going...""); // still going... var x = 1; console.log(x); // 1 console.log(""still going...""); // still going...  In the global context, a variable declared using var is added as a non-configurable property of the global object. This means its property descriptor cannot be changed and it cannot be deleted using delete. The corresponding name is also added to a list on the internal [[VarNames]] slot on the global environment record (which forms part of the global lexical environment). The list of names in [[VarNames]] enables the runtime to distinguish between global variables and straightforward properties on the global object.  The property created on the global object for global variables, is set to be non-configurable because the identifier is to be treated as a variable, rather than a straightforward property of the global object. JavaScript has automatic memory management, and it would make no sense to be able to use the delete operator on a global variable. ""use strict""; var x = 1; Object.hasOwn(globalThis, ""x""); // true delete globalThis.x; // TypeError in strict mode. Fails silently otherwise. delete x; // SyntaxError in strict mode. Fails silently otherwise.  Note that in both NodeJS CommonJS modules and native ECMAScript modules, top-level variable declarations are scoped to the module, and are not, therefore added as properties to the global object. Unqualified identifier assignments The global object sits at the top of the scope chain. When attempting to resolve a name to a value, the scope chain is searched. This means that properties on the global object are conveniently visible from every scope, without having to qualify the names with globalThis. or window. or global.. Because the global object has a String property (Object.hasOwn(globalThis, 'String')), you can use the following code: function foo() { String(""s""); // Note the function `String` is implicitly visible }  So the global object will ultimately be searched for unqualified identifiers. You don't have to type globalThis.String, you can just type the unqualified String. The corollary, in non-strict mode, is that assignment to unqualified identifiers will, if there is no variable of the same name declared in the scope chain, assume you want to create a property with that name on the global object. foo = ""f""; // In non-strict mode, assumes you want to create a property named `foo` on the global object Object.hasOwn(globalThis, ""foo""); // true In strict mode, assignment to an unqualified identifier in strict mode will result in a ReferenceError, to avoid the accidental creation of properties on the global object. Note that the implication of the above, is that, contrary to popular misinformation, JavaScript does not have implicit or undeclared variables, it merely has a syntax that looks like it does. var hoisting Because var declarations are processed before any code is executed, declaring a variable anywhere in the code is equivalent to declaring it at the top. This also means that a variable can appear to be used before it's declared. This behavior is called hoisting, as it appears that the variable declaration is moved to the top of the function or global code. bla = 2; var bla; This is implicitly understood as: var bla; bla = 2;  For that reason, it is recommended to always declare variables at the top of their scope (the top of global code and the top of function code) so it's clear which variables are function scoped (local) and which are resolved on the scope chain.  It's important to point out that only a variable's declaration is hoisted, not its initialization. The initialization happens only when the assignment statement is reached. Until then the variable remains undefined (but declared): function do_something() { console.log(bar); // undefined var bar = 111; console.log(bar); // 111 } This is implicitly understood as: function do_something() { var bar; console.log(bar); // undefined bar = 111; console.log(bar); // 111 } ExamplesDeclaring and initializing two variablesvar a = 0, b = 0; Assigning two variables with single string valuevar a = ""A""; var b = a; This is equivalent to: var a, b = a = 'A'; Be mindful of the order: var x = y, y = ""A""; console.log(x + y); // undefinedA  Here, x and y are declared before any code is executed, but the assignments occur later. At the time x = y is evaluated, y exists so no ReferenceError is thrown and its value is undefined. So, x is assigned the undefined value. Then, y is assigned the value 'A'. Consequently, after the first line, x === undefined && y === 'A', hence the result. Initialization of several variablesvar x = 0; function f() { var x = y = 1; // Declares x locally; declares y globally. } f(); console.log(x, y); // 0 1 // In non-strict mode: // x is the global one as expected; // y is leaked outside of the function, though! The same example as above but with a strict mode: ""use strict""; var x = 0; function f() { var x = y = 1; // Throws a ReferenceError in strict mode. } f(); console.log(x, y); Implicit globals and outer function scope Variables that appear to be implicit globals may be references to variables in an outer function scope: var x = 0; // Declares x within file scope, then assigns it a value of 0. console.log(typeof z); // ""undefined"", since z doesn't exist yet function a() { var y = 2; // Declares y within scope of function a, then assigns it a value of 2. console.log(x, y); // 0 2 function b() {  x = 3; // Assigns 3 to existing file scoped x.  y = 4; // Assigns 4 to existing outer y.  z = 5; // Creates a new global variable z, and assigns it a value of 5.  // (Throws a ReferenceError in strict mode.) } b(); // Creates z as a global variable. console.log(x, y, z); // 3 4 5 } a(); // Also calls b. console.log(x, z); // 3 5 console.log(typeof y); // ""undefined"", as y is local to function a SpecificationsSpecificationECMAScript Language Specification # sec-variable-statementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also let const Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 14, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
106,developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia/and/embedding/Video/and/audio/content/Test/your/skills:/Multimedia/and/embedding,"developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia/and/embedding/Video/and/audio/content/Test/your/skills:/Multimedia/and/embedding. Test your skills: Multimedia and embedding - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesHTMLMultimedia and embeddingVideo and audio contentTest your skills: Multimedia and embeddingArticle ActionsEnglish (US)In this articleTask 1Task 2Task 3Assessment or further helpComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleTask 1Task 2Task 3Assessment or further helpTest your skills: Multimedia and embeddingThe aim of this skill test is to assess whether you understand how to embed video and audio content in HTML, also using object, iframe and other embedding technologies. Note: You can try out solutions in the interactive editors below. However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. If you get stuck, then ask us for help â see the Assessment or further help section at the bottom of this page. Task 1In this task, we want you to embed a simple audio file onto the page. You need to: Add the path to the audio file to an appropriate attribute to embed it on the page. The audio is called audio.mp3, and it is in a folder inside the current folder called media. Add an attribute to make browsers display some default controls. Add some appropriate fallback text for browsers that don't support <audio>. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Task 2In this task, we want you to mark up a slightly more complex video player, with multiple sources, subtitles, and other features besides. You need to: Add an attribute to make browsers display some default controls. Add some appropriate fallback text for browsers that don't support <video>. Add multiple sources, containing the paths to the video files. The files are called video.mp4 and video.webm, and are in a folder inside the current folder called media. Let the browser know in advance what video formats the sources point to, so it can make an informed choice of which one to download ahead of time. Give the <video> a width and height equal to its intrinsic size (320 by 240 pixels). Make the video muted by default. Display the text tracks contained in the media folder, in a file called subtitles_en.vtt, when the video is playing. You must explicitly set the type as subtitles, and the subtitle language to English. Make sure the readers can identify the subtitle language when they use the default controls. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Task 3In this task, we want you to: Embed a PDF into the page. The PDF is called mypdf.pdf, and is contained in the media folder. Go to a sharing site like YouTube or Google Maps, and embed a video or other media item into the page. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Assessment or further helpYou can practice these examples in the Interactive Editors mentioned above. If you would like your work assessed or are stuck and want to ask for help: Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. You can write the code yourself or use the starting point files linked to in the above sections. Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. Your post should include:  A descriptive title such as ""Assessment wanted for multimedia and embedding skill test 1"". Details of what you have already tried and what you would like us to do; for example, tell us if you're stuck and need help or want an assessment. A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). This is a good practice to get into â it's very hard to help someone with a coding problem if you can't see their code. A link to the actual task or assessment page, so we can find the question you want help with. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 3, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
107,developer.mozilla.org/en-US/docs/Web/Guide/Performance,"developer.mozilla.org/en-US/docs/Web/Guide/Performance. Optimization and performance - Developer guides | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesDeveloper guidesOptimization and performanceArticle ActionsEnglish (US)In this articleSee alsoAjaxAudio and Video DeliveryAudio and video manipulationCSS HoudiniGraphics on the WebGuide to Web APIsIntroduction to Web developmentMobile Web DevelopmentOptimization and performanceParsing and serializing XMLPrintingThe Web Open Font Format (WOFF)User input and controlsWriting forward-compatible websitesIn this articleSee alsoOptimization and performanceWhen building modern Web apps and sites, it's important to make your content perform well. That is, to make it work quickly and efficiently. This lets it work effectively both for users of powerful desktop systems and for handheld devices with less power. There are several tools available to check the performance of a website or blog. The most notable tools are listed below. Google PageSpeed Insights Lighthouse WebPageTest Browser developer tools The above resources also include web performance best practices. Making web performance a priority by considering web performance throughout the development process is important in ensuring users get the best user experience possible.See also Fast load times on web.dev Web performance Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 24, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
108,developer.mozilla.org/en-US/docs/Web/API/Node/lastChild,"developer.mozilla.org/en-US/docs/Web/API/Node/lastChild. Node: lastChild property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodelastChildArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChild nextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoNode: lastChild property The read-only lastChild property of the Node interface returns the last child of the node, or null if there are no child nodes. Note: This property returns any type of node that is the last child of this one.  It may be a Text or a Comment node.  If you want to get the last Element that is a child of another element,  consider using Element.lastElementChild. ValueA Node that is the last child of the node, or null is there are no child nodes.Exampleconst tr = document.getElementById(""row1""); const corner_td = tr.lastChild; SpecificationsSpecificationDOM Standard # ref-for-dom-node-lastchildâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.firstChild Element.lastElementChild Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
109,developer.mozilla.org/en-US/docs/Glossary/JavaScript,"developer.mozilla.org/en-US/docs/Glossary/JavaScript. JavaScript - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsJavaScriptArticle ActionsEnglish (US)In this articleOrigins and HistorySee alsoIn this articleOrigins and HistorySee alsoJavaScriptJavaScript (or ""JS"") is a programming language used most often for dynamic client-side scripts on webpages, but it is also often used on the server-side, using a runtime such as Node.js. JavaScript should not be confused with the Java programming language. Although ""Java"" and ""JavaScript"" are trademarks (or registered trademarks) of Oracle in the U.S. and other countries, the two programming languages are significantly different in their syntax, semantics, and use cases. JavaScript is primarily used in the browser, enabling developers to manipulate webpage content through the DOM, manipulate data with AJAX and IndexedDB, draw graphics with canvas, interact with the device running the browser through various APIs, and more. JavaScript is one of the world's most commonly-used languages, owing to the recent growth and performance improvement of APIs available in browsers.Origins and HistoryConceived as a server-side language by Brendan Eich (then employed by the Netscape Corporation), JavaScript soon came to Netscape Navigator 2.0 in September 1995. JavaScript enjoyed immediate success and Internet Explorer 3.0 introduced JavaScript support under the name JScript in August 1996. In November 1996, Netscape began working with Ecma International to make JavaScript an industry standard. Since then, the standardized JavaScript is called ECMAScript and specified under ECMA-262, whose latest (twelfth, ES2021) edition is available as of June 2021. Recently, JavaScript's popularity has expanded even further through the successful Node.js platformâthe most popular cross-platform JavaScript runtime environment outside the browser. Node.js - built using Chrome's V8 JavaScript Engine - allows developers to use JavaScript as a scripting language to automate things on a computer and build fully functional HTTP and WebSockets servers.See also JavaScript on Wikipedia The JavaScript Guide on MDN The ""javascripting"" workshop on NodeSchool The JavaScript course on codecademy.com The latest ECMAScript standard The JavaScript reference on MDN The Eloquent JavaScript book Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
110,developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET,"developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET. GET - HTTP | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTTPHTTP request methodsGETArticle ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilitySee also HTTP Guides Resources and URIs Identifying resources on the Web Data URLs Introduction to MIME types Common MIME types Choosing between www and non-www URLs  HTTP guide Basics of HTTP Overview of HTTP Evolution of HTTP HTTP Messages A typical HTTP session Connection management in HTTP/1.x Protocol upgrade mechanism  HTTP security Content Security Policy (CSP) HTTP Strict Transport Security (HSTS) Cookie security X-Content-Type-Options X-Frame-Options X-XSS-Protection Mozilla web security guidelines Mozilla Observatory HTTP access control (CORS) HTTP authentication HTTP caching HTTP compression HTTP conditional requests HTTP content negotiation HTTP cookies HTTP range requests HTTP redirects HTTP specifications Permissions Policy References HTTP headers AcceptAccept-CHAccept-CH-Lifetime Non-standard Deprecated Accept-CharsetAccept-EncodingAccept-LanguageAccept-PatchAccept-PostAccept-RangesAccess-Control-Allow-CredentialsAccess-Control-Allow-HeadersAccess-Control-Allow-MethodsAccess-Control-Allow-OriginAccess-Control-Expose-HeadersAccess-Control-Max-AgeAccess-Control-Request-HeadersAccess-Control-Request-MethodAgeAllowAlt-SvcAuthorizationCache-ControlClear-Site-DataConnectionContent-DispositionContent-DPR Non-standard Deprecated Content-EncodingContent-LanguageContent-LengthContent-LocationContent-RangeContent-Security-PolicyContent-Security-Policy-Report-OnlyContent-TypeCookieCritical-CH Experimental Cross-Origin-Embedder-PolicyCross-Origin-Opener-PolicyCross-Origin-Resource-PolicyDateDevice-Memory Experimental Digest Deprecated DNT Deprecated Downlink Experimental DPR Non-standard Deprecated Early-Data Experimental ECT Experimental ETagExpectExpect-CTExpiresForwardedFromHostIf-MatchIf-Modified-SinceIf-None-MatchIf-RangeIf-Unmodified-SinceKeep-AliveLarge-Allocation Non-standard Deprecated Last-ModifiedLinkLocationMax-ForwardsNEL Experimental OriginPermissions-PolicyPragma Deprecated Proxy-AuthenticateProxy-AuthorizationRangeRefererReferrer-PolicyRetry-AfterRTT Experimental Save-Data Experimental Sec-CH-Prefers-Reduced-Motion Experimental Sec-CH-UA Experimental Sec-CH-UA-Arch Experimental Sec-CH-UA-Bitness Experimental Sec-CH-UA-Full-Version Deprecated Sec-CH-UA-Full-Version-List Experimental Sec-CH-UA-Mobile Experimental Sec-CH-UA-Model Experimental Sec-CH-UA-Platform Experimental Sec-CH-UA-Platform-Version Experimental Sec-Fetch-DestSec-Fetch-ModeSec-Fetch-SiteSec-Fetch-UserSec-GPC Experimental Sec-WebSocket-AcceptServerServer-TimingService-Worker-Navigation-PreloadSet-CookieSourceMapStrict-Transport-SecurityTETiming-Allow-OriginTk Deprecated TrailerTransfer-EncodingUpgradeUpgrade-Insecure-RequestsUser-AgentVaryViaViewport-Width Non-standard Deprecated Want-Digest Deprecated Warning Deprecated Width Non-standard Deprecated WWW-AuthenticateX-Content-Type-OptionsX-DNS-Prefetch-Control Non-standard X-Forwarded-For Non-standard X-Forwarded-Host Non-standard X-Forwarded-Proto Non-standard X-Frame-OptionsX-XSS-Protection Non-standard  HTTP request methods CONNECTDELETEGETHEADOPTIONSPATCHPOSTPUTTRACE  HTTP response status codes 100 Continue101 Switching Protocols102 Processing103 Early Hints Experimental 200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content207 Multi-Status208 Already Reported226 IM Used300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified307 Temporary Redirect308 Permanent Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Timeout409 Conflict410 Gone411 Length Required412 Precondition Failed413 Content Too Large414 URI Too Long415 Unsupported Media Type416 Range Not Satisfiable417 Expectation Failed418 I'm a teapot421 Misdirected Request422 Unprocessable Content423 Locked424 Failed Dependency425 Too Early426 Upgrade Required428 Precondition Required429 Too Many Requests431 Request Header Fields Too Large451 Unavailable For Legal Reasons500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Timeout505 HTTP Version Not Supported506 Variant Also Negotiates507 Insufficient Storage508 Loop Detected510 Not Extended511 Network Authentication Required  CSP directives CSP source valuesCSP: base-uriCSP: block-all-mixed-content Deprecated CSP: child-srcCSP: connect-srcCSP: default-srcCSP: font-srcCSP: form-actionCSP: frame-ancestorsCSP: frame-srcCSP: img-srcCSP: manifest-srcCSP: media-srcCSP: object-srcCSP: plugin-types Non-standard Deprecated CSP: prefetch-src Non-standard Deprecated CSP: referrer Non-standard Deprecated CSP: report-toCSP: report-uri Deprecated CSP: require-trusted-types-for Experimental CSP: sandboxCSP: script-srcCSP: script-src-attrCSP: script-src-elemCSP: style-srcCSP: style-src-attrCSP: style-src-elemCSP: trusted-types Experimental CSP: upgrade-insecure-requestsCSP: worker-src  CORS errors Reason: CORS disabledReason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'Reason: CORS header 'Access-Control-Allow-Origin' missingReason: CORS header 'Origin' cannot be addedReason: CORS preflight channel did not succeedReason: CORS request did not succeedReason: CORS request external redirect not allowedReason: CORS request not HTTPReason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channelReason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed  Permissions-Policy directives Permissions-Policy: accelerometer Experimental Permissions-Policy: ambient-light-sensor Experimental Permissions-Policy: autoplay Experimental Permissions-Policy: battery Experimental Permissions-Policy: cameraPermissions-Policy: display-capturePermissions-Policy: document-domain Experimental Permissions-Policy: encrypted-media Experimental Permissions-Policy: execution-while-not-rendered Experimental Permissions-Policy: execution-while-out-of-viewport Experimental Permissions-Policy: fullscreenPermissions-Policy: gamepad Experimental Permissions-Policy: geolocationPermissions-Policy: gyroscope Experimental Permissions-Policy: hid Experimental Permissions-Policy: identity-credentials-get Experimental Permissions-Policy: idle-detection Experimental Permissions-Policy: local-fonts Experimental Permissions-Policy: magnetometer Experimental Permissions-Policy: microphonePermissions-Policy: midi Experimental Permissions-Policy: payment Experimental Permissions-Policy: picture-in-picture Experimental Permissions-Policy: publickey-credentials-create Experimental Permissions-Policy: publickey-credentials-get Experimental Permissions-Policy: screen-wake-lock Experimental Permissions-Policy: serial Experimental Permissions-Policy: speaker-selection Experimental Permissions-Policy: storage-access Experimental Permissions-Policy: usb Experimental Permissions-Policy: web-sharePermissions-Policy: xr-spatial-tracking Experimental  In this articleSyntaxSpecificationsBrowser compatibilitySee alsoGETThe HTTP GET method requests a representation of the specified resource. Requests using GET should only be used to request data (they shouldn't include data). Note: Sending body/payload in a GET request may cause some existing implementations to reject the request â while not prohibited by the specification, the semantics are undefined. It is better to just avoid sending payloads in GET requests.  Request has body No Successful response has body Yes Safe Yes Idempotent Yes Cacheable Yes Allowed in HTML forms Yes SyntaxGET /index.html SpecificationsSpecificationHTTP Semantics # GETBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTTP Headers Range POST Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
111,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location. KeyboardEvent: location property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventlocationArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated location metaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoKeyboardEvent: location property The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device. Possible values are: Constant Value Description  DOM_KEY_LOCATION_STANDARD 0   The key has only one version, or can't be distinguished between the left   and right versions of the key, and was not pressed on the numeric keypad   or a key that is considered to be part of the keypad.   DOM_KEY_LOCATION_LEFT 1   The key was the left-hand version of the key; for example, the left-hand   Control key was pressed on a standard 101 key US keyboard.   This value is only used for keys that have more than one possible   location on the keyboard.   DOM_KEY_LOCATION_RIGHT 2   The key was the right-hand version of the key; for example, the   right-hand Control key is pressed on a standard 101 key US   keyboard. This value is only used for keys that have more than one   possible location on the keyboard.   DOM_KEY_LOCATION_NUMPAD 3    The key was on the numeric keypad, or has a virtual key code that   corresponds to the numeric keypad.   Note: When NumLock is locked, Firefox    always returns DOM_KEY_LOCATION_NUMPAD for the keys on    the numeric pad. Otherwise, when NumLock is unlocked and    the keyboard actually has a numeric keypad, Firefox always returns    DOM_KEY_LOCATION_NUMPAD too. On the other hand, if the    keyboard doesn't have a keypad, such as on a notebook computer, some    keys become Numpad only when NumLock is locked. When such keys fires    key events, the location attribute value depends on the key. That    is, it must not be DOM_KEY_LOCATION_NUMPAD.    Note: NumLock key's key events indicate    DOM_KEY_LOCATION_STANDARD both on Firefox and Internet    Explorer.     DOM_KEY_LOCATION_MOBILE Non-standard Deprecated 4    The key was on a mobile device; this can be on either a physical   keypad or a virtual keyboard.    DOM_KEY_LOCATION_JOYSTICK Non-standard Deprecated 5    The key was a button on a game controller or a joystick on a mobile   device.    ValueA number.Examplesfunction keyEvent(event) { console.log(`Location of key pressed: ${event.location}`); } SpecificationsSpecificationUI Events # dom-keyboardevent-locationBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also KeyboardEvent Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
112,developer.mozilla.org/en-US/docs/Web/API/DocumentType/replaceWith,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/replaceWith. DocumentType: replaceWith() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTypereplaceWith()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentTypeInstance propertiesnamepublicIdsystemIdInstance methodsafter()before()remove()replaceWith() Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentType: replaceWith() methodThe DocumentType.replaceWith() method replaces the document type with a set of given nodes.SyntaxreplaceWith(node1) replaceWith(node1, node2) replaceWith(node1, node2, /* â¦ ,*/ nodeN) Parameters node1, â¦, nodeN A set of nodes to replace the DocumentType with. Return valueNone (undefined).Exceptions HierarchyRequestError DOMException Thrown when the node cannot be inserted at the specified point in the hierarchy. ExamplesUsing replaceWith()let svg_dt = document.implementation.createDocumentType( ""svg:svg"", ""-//W3C//DTD SVG 1.1//EN"", ""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"" ); document.doctype.replaceWith(svg_dt); SpecificationsSpecificationDOM Standard # ref-for-dom-childnode-replacewithâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.replaceWith() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
113,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay. HTMLMediaElement: autoplay property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementautoplayArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplay bufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: autoplay property The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.  A media element whose source is a MediaStream and whose autoplay property is true will begin playback when it becomes active (that is, when MediaStream.active becomes true). Note: Sites which automatically play audio (or videos with an audio  track) can be an unpleasant experience for users, so it should be avoided when  possible. If you must offer autoplay functionality, you should make it opt-in  (requiring a user to specifically enable it). However, autoplay can be useful when  creating media elements whose source will be set at a later time, under user control.  For a much more in-depth look at autoplay, autoplay blocking, and how to respond when autoplay is blocked by the user's browser, see our article Autoplay guide for media and Web Audio APIs. Value A boolean value which is true if the media element will begin playback as soon as enough content has loaded to allow it to do so without interruption. Note: Some browsers offer users the ability to override  autoplay in order to prevent disruptive audio or video from playing  without permission or in the background. Do not rely on autoplay actually  starting playback and instead use play  event. Examples<video id=""video"" controls> <source  src=""https://player.vimeo.com/external/250688977.sd.mp4?s=d14b1f1a971dde13c79d6e436b88a6a928dfe26b&profile_id=165"" /> </video> // Disable autoplay (recommended) // false is the default value document.querySelector(""#video"").autoplay = false; SpecificationsSpecificationHTML Standard # dom-media-autoplayBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.autoplay property <audio>, <video> Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
114,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical/grammar#string/literals,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical/grammar#string/literals. Lexical grammar - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceLexical grammarArticle ActionsEnglish (US)In this articleFormat-control charactersWhite spaceLine terminatorsCommentsIdentifiersKeywordsLiteralsAutomatic semicolon insertionSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleFormat-control charactersWhite spaceLine terminatorsCommentsIdentifiersKeywordsLiteralsAutomatic semicolon insertionSpecificationsBrowser compatibilitySee alsoLexical grammarThis page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters â in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step â they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.Format-control charactersFormat-control characters have no visual representation but are used to control the interpretation of the text. Code point Name Abbreviation Description  U+200C Zero width non-joiner <ZWNJ> Placed between characters to prevent being connected into ligatures in certain languages (Wikipedia). U+200D Zero width joiner <ZWJ> Placed between characters that would not normally be connected in order to cause the characters to be rendered using their connected form in certain languages (Wikipedia). U+FEFF Byte order mark <BOM> Used at the start of the script to mark it as Unicode and the text's byte order (Wikipedia). In JavaScript source text, <ZWNJ> and <ZWJ> are treated as identifier parts, while <BOM> (also called a zero-width no-break space <ZWNBSP> when not at the start of text) is treated as white space.White spaceWhite space characters improve the readability of source text and separate tokens from each other. These characters are usually unnecessary for the functionality of the code. Minification tools are often used to remove whitespace in order to reduce the amount of data that needs to be transferred. Code point Name Abbreviation Description Escape sequence  U+0009 Character tabulation <TAB> Horizontal tabulation \t U+000B Line tabulation <VT> Vertical tabulation \v U+000C Form feed <FF> Page breaking control character (Wikipedia). \f U+0020 Space <SP> Normal space U+00A0 No-break space <NBSP> Normal space, but no point at which a line may break U+FEFF Zero-width no-break space <ZWNBSP> When not at the start of a script, the BOM marker is a normal whitespace character. Others Other Unicode space characters <USP> Characters in the ""Space_Separator"" general category  Note: Of those characters with the ""White_Space"" property but are not in the ""Space_Separator"" general category, U+0009, U+000B, and U+000C are still treated as white space in JavaScript; U+0085 NEXT LINE has no special role; others become the set of line terminators. Note: Changes to the Unicode standard used by the JavaScript engine may affect programs' behavior. For example, ES2016 upgraded the reference Unicode standard from 5.1 to 8.0.0, which caused U+180E MONGOLIAN VOWEL SEPARATOR to be moved from the ""Space_Separator"" category to the ""Format (Cf)"" category, and made it a non-whitespace. Subsequently, the result of ""\u180E"".trim().length changed from 0 to 1. Line terminatorsIn addition to white space characters, line terminator characters are used to improve the readability of the source text. However, in some cases, line terminators can influence the execution of JavaScript code as there are a few places where they are forbidden. Line terminators also affect the process of automatic semicolon insertion. Outside the context of lexical grammar, white space and line terminators are often conflated. For example, String.prototype.trim() removes all white space and line terminators from the beginning and end of a string. The \s character class escape in regular expressions matches all white space and line terminators. Only the following Unicode code points are treated as line terminators in ECMAScript, other line breaking characters are treated as white space (for example, Next Line, NEL, U+0085 is considered as white space). Code point Name Abbreviation Description Escape sequence  U+000A Line Feed <LF> New line character in UNIX systems.  U+000D Carriage Return <CR> New line character in Commodore and early Mac systems. \r U+2028 Line Separator <LS> Wikipedia U+2029 Paragraph Separator <PS> Wikipedia CommentsComments are used to add hints, notes, suggestions, or warnings to JavaScript code. This can make it easier to read and understand. They can also be used to disable code to prevent it from being executed; this can be a valuable debugging tool. JavaScript has two long-standing ways to add comments to code: line comments and block comments. In addition, there's a special hashbang comment syntax.Line commentsThe first way is the // comment; this makes all text following it on the same line into a comment. For example: function comment() { // This is a one line JavaScript comment console.log(""Hello world!""); } comment(); Block commentsThe second way is the /* */ style, which is much more flexible. For example, you can use it on a single line: function comment() { /* This is a one line JavaScript comment */ console.log(""Hello world!""); } comment(); You can also make multiple-line comments, like this: function comment() { /* This comment spans multiple lines. Notice  that we don't need to end the comment until we're done. */ console.log(""Hello world!""); } comment(); You can also use it in the middle of a line, if you wish, although this can make your code harder to read so it should be used with caution: function comment(x) { console.log(""Hello "" + x /* insert the value of x */ + "" !""); } comment(""world""); In addition, you can use it to disable code to prevent it from running, by wrapping code in a comment, like this: function comment() { /* console.log(""Hello world!""); */ } comment(); In this case, the console.log() call is never issued, since it's inside a comment. Any number of lines of code can be disabled this way. Block comments that contain at least one line terminator behave like line terminators in automatic semicolon insertion.Hashbang commentsThere's a special third comment syntax, the hashbang comment. A hashbang comment behaves exactly like a single line-only (//) comment, except that it begins with #! and is only valid at the absolute start of a script or module. Note also that no whitespace of any kind is permitted before the #!. The comment consists of all the characters after #! up to the end of the first line; only one such comment is permitted. Hashbang comments in JavaScript resemble shebangs in Unix which provide the path to a specific JavaScript interpreter that you want to use to execute the script. Before the hashbang comment became standardized, it had already been de-facto implemented in non-browser hosts like Node.js, where it was stripped from the source text before being passed to the engine. An example is as follows: #!/usr/bin/env node console.log(""Hello world""); The JavaScript interpreter will treat it as a normal comment â it only has semantic meaning to the shell if the script is directly run in a shell. Warning: If you want scripts to be runnable directly in a shell environment, encode them in UTF-8 without a BOM. Although a BOM will not cause any problems for code running in a browser â because it's stripped during UTF-8 decoding, before the source text is analyzed â a Unix/Linux shell will not recognize the hashbang if it's preceded by a BOM character. You must only use the #! comment style to specify a JavaScript interpreter. In all other cases just use a // comment (or multiline comment).IdentifiersAn identifier is used to link a value with a name. Identifiers can be used in various places: const decl = 1; // Variable declaration (may also be `let` or `var`) function fn() {} // Function declaration const obj = { key: ""value"" }; // Object keys // Class declaration class C { #priv = ""value""; // Private property } lbl: console.log(1); // Label In JavaScript, identifiers are commonly made of alphanumeric characters, underscores (_), and dollar signs ($). Identifiers are not allowed to start with numbers. However, JavaScript identifiers are not only limited to ASCII â many Unicode code points are allowed as well. Namely, any character in the ID_Start category can start an identifier, while any character in the ID_Continue category can appear after the first character. Note: If, for some reason, you need to parse some JavaScript source yourself, do not assume all identifiers follow the pattern /[A-Za-z_$][\w$]*/ (i.e. ASCII-only)! The range of identifiers can be described by the regex /[$_\p{ID_Start}][$\u200c\u200d\p{ID_Continue}]*/u (excluding unicode escape sequences). In addition, JavaScript allows using Unicode escape sequences in the form of \u0000 or \u{000000} in identifiers, which encode the same string value as the actual Unicode characters. For example, ä½ å¥½ and \u4f60\u597d are the same identifiers: const ä½ å¥½ = ""Hello""; console.log(\u4f60\u597d); // Hello Not all places accept the full range of identifiers. Certain syntaxes, such as function declarations, function expressions, and variable declarations require using identifiers names that are not reserved words. function import() {} // Illegal: import is a reserved word. Most notably, private properties and object properties allow reserved words. const obj = { import: ""value"" }; // Legal despite `import` being reserved class C { #import = ""value""; } KeywordsKeywords are tokens that look like identifiers but have special meanings in JavaScript. For example, the keyword async before a function declaration indicates that the function is asynchronous. Some keywords are reserved, meaning that they cannot be used as an identifier for variable declarations, function declarations, etc. They are often called reserved words. A list of these reserved words is provided below. Not all keywords are reserved â for example, async can be used as an identifier anywhere. Some keywords are only contextually reserved â for example, await is only reserved within the body of an async function, and let is only reserved in strict mode code, or const and let declarations. Identifiers are always compared by string value, so escape sequences are interpreted. For example, this is still a syntax error: const els\u{65} = 1; // `els\u{65}` encodes the same identifier as `else` Reserved wordsThese keywords cannot be used as identifiers for variables, functions, classes, etc. anywhere in JavaScript source. break case catch class const continue debugger default delete do else export extends false finally for function if import in instanceof new null return super switch this throw true try typeof var void while with The following are only reserved when they are found in strict mode code: let (also reserved in const, let, and class declarations) static yield (also reserved in generator function bodies) The following are only reserved when they are found in module code or async function bodies: await Future reserved wordsThe following are reserved as future keywords by the ECMAScript specification. They have no special functionality at present, but they might at some future time, so they cannot be used as identifiers. These are always reserved: enum The following are only reserved when they are found in strict mode code: implements interface package private protected public Future reserved words in older standards The following are reserved as future keywords by older ECMAScript specifications (ECMAScript 1 till 3). abstract boolean byte char double final float goto int long native short synchronized throws transient volatile Identifiers with special meaningsA few identifiers have a special meaning in some contexts without being reserved words of any kind. They include: arguments (not a keyword, but cannot be declared as identifier in strict mode) as (import * as ns from ""mod"") async eval (not a keyword, but cannot be declared as identifier in strict mode) from (import x from ""mod"") get of set Literals Note: This section discusses literals that are atomic tokens. Object literals and array literals are expressions that consist of a series of tokens. Null literalSee also null for more information. null Boolean literalSee also boolean type for more information. true false Numeric literalsThe Number and BigInt types use numeric literals. Decimal 1234567890 42 Decimal literals can start with a zero (0) followed by another decimal digit, but if all digits after the leading 0 are smaller than 8, the number is interpreted as an octal number. This is considered a legacy syntax, and number literals prefixed with 0, whether interpreted as octal or decimal, cause a syntax error in strict mode â so, use the 0o prefix instead. 0888 // 888 parsed as decimal 0777 // parsed as octal, 511 in decimal Exponential The decimal exponential literal is specified by the following format: beN; where b is a base number (integer or floating), followed by an E or e character (which serves as separator or exponent indicator) and N, which is exponent or power number â a signed integer. 0e-5 // 0 0e+5 // 0 5e1 // 50 175e-2 // 1.75 1e3 // 1000 1e-3 // 0.001 1E3 // 1000 Binary Binary number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""B"" (0b or 0B). Any character after the 0b that is not 0 or 1 will terminate the literal sequence. 0b10000000000000000000000000000000 // 2147483648 0b01111111100000000000000000000000 // 2139095040 0B00000000011111111111111111111111 // 8388607 Octal Octal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""O"" (0o or 0O). Any character after the 0o that is outside the range (01234567) will terminate the literal sequence. 0O755 // 493 0o644 // 420 Hexadecimal Hexadecimal number syntax uses a leading zero followed by a lowercase or uppercase Latin letter ""X"" (0x or 0X). Any character after the 0x that is outside the range (0123456789ABCDEF) will terminate the literal sequence. 0xFFFFFFFFFFFFFFFFF // 295147905179352830000 0x123456789ABCDEF // 81985529216486900 0XA     // 10 BigInt literal The BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary precision. BigInt literals are created by appending n to the end of an integer. 123456789123456789n  // 123456789123456789 0o777777777777n   // 68719476735 0x123456789ABCDEFn  // 81985529216486895 0b11101001010101010101n // 955733 BigInt literals cannot start with 0 to avoid confusion with legacy octal literals. 0755n; // SyntaxError: invalid BigInt syntax For octal BigInt numbers, always use zero followed by the letter ""o"" (uppercase or lowercase): 0o755n; For more information about BigInt, see also JavaScript data structures. Numeric separators To improve readability for numeric literals, underscores (_, U+005F) can be used as separators: 1_000_000_000_000 1_050.95 0b1010_0001_1000_0101 0o2_2_5_6 0xA0_B0_C0 1_000_000_000_000_000_000_000n Note these limitations: // More than one underscore in a row is not allowed 100__000; // SyntaxError // Not allowed at the end of numeric literals 100_; // SyntaxError // Can not be used after leading 0 0_1; // SyntaxError String literalsA string literal is zero or more Unicode code points enclosed in single or double quotes. Unicode code points may also be represented by an escape sequence. All code points may appear literally in a string literal except for these code points: U+005C \ (backslash) U+000D <CR> U+000A <LF> The same kind of quote that begins the string literal Any code points may appear in the form of an escape sequence. String literals evaluate to ECMAScript String values. When generating these String values Unicode code points are UTF-16 encoded. 'foo' ""bar"" The following subsections describe various escape sequences (\ followed by one or more characters) available in string literals. Any escape sequence not listed below becomes an ""identity escape"" that becomes the code point itself. For example, \z is the same as z. There's a deprecated octal escape sequence syntax described in the Deprecated and obsolete features page. Many of these escape sequences are also valid in regular expressions â see Character escape. Escape sequences Special characters can be encoded using escape sequences: Escape sequence Unicode code point  \0 null character (U+0000 NULL) \' single quote (U+0027 APOSTROPHE) \"" double quote (U+0022 QUOTATION MARK) \\ backslash (U+005C REVERSE SOLIDUS)  newline (U+000A LINE FEED; LF) \r carriage return (U+000D CARRIAGE RETURN; CR) \v vertical tab (U+000B LINE TABULATION) \t tab (U+0009 CHARACTER TABULATION) \b backspace (U+0008 BACKSPACE) \f form feed (U+000C FORM FEED) \ followed by a line terminator empty string The last escape sequence, \ followed by a line terminator, is useful for splitting a string literal across multiple lines without changing its meaning. const longString = ""This is a very long string which needs \ to wrap across multiple lines because \ otherwise my code is unreadable.""; Make sure there is no space or any other character after the backslash (except for a line break), otherwise it will not work. If the next line is indented, the extra spaces will also be present in the string's value. You can also use the + operator to append multiple strings together, like this: const longString = ""This is a very long string which needs "" + ""to wrap across multiple lines because "" + ""otherwise my code is unreadable.""; Both of the above methods result in identical strings. Hexadecimal escape sequences Hexadecimal escape sequences consist of \x followed by exactly two hexadecimal digits representing a code unit or code point in the range 0x0000 to 0x00FF. ""\xA9""; // ""Â©"" Unicode escape sequences A Unicode escape sequence consists of exactly four hexadecimal digits following \u. It represents a code unit in the UTF-16 encoding. For code points U+0000 to U+FFFF, the code unit is equal to the code point. Code points U+10000 to U+10FFFF require two escape sequences representing the two code units (a surrogate pair) used to encode the character; the surrogate pair is distinct from the code point. See also String.fromCharCode() and String.prototype.charCodeAt(). ""\u00A9""; // ""Â©"" (U+A9) Unicode code point escapes A Unicode code point escape consists of \u{, followed by a code point in hexadecimal base, followed by }. The value of the hexadecimal digits must be in the range 0 and 0x10FFFF inclusive. Code points in the range U+10000 to U+10FFFF do not need to be represented as a surrogate pair. See also String.fromCodePoint() and String.prototype.codePointAt(). ""\u{2F804}""; // CJK COMPATIBILITY IDEOGRAPH-2F804 (U+2F804) // the same character represented as a surrogate pair ""\uD87E\uDC04""; Regular expression literalsRegular expression literals are enclosed by two forward slashes (/). The lexer consumes all characters up to the next unescaped forward slash or the end of the line, unless the forward slash appears within a character class ([]). Some characters (namely, those that are identifier parts) can appear after the closing slash, denoting flags. The lexical grammar is very lenient: not all regular expression literals that get identified as one token are valid regular expressions. See also RegExp for more information. /ab+c/g /[/]/ A regular expression literal cannot start with two forward slashes (//), because that would be a line comment. To specify an empty regular expression, use /(?:)/.Template literalsOne template literal consists of several tokens: `xxx${ (template head), }xxx${ (template middle), and }xxx` (template tail) are individual tokens, while any expression may come between them. See also template literals for more information. `string text` `string text line 1 string text line 2` `string text ${expression} string text` tag`string text ${expression} string text` Automatic semicolon insertionSome JavaScript statements' syntax definitions require semicolons (;) at the end. They include: var, let, const Expression statements do...while continue, break, return, throw debugger Class field declarations (public or private) import, export However, to make the language more approachable and convenient, JavaScript is able to automatically insert semicolons when consuming the token stream, so that some invalid token sequences can be ""fixed"" to valid syntax. This step happens after the program text has been parsed to tokens according to the lexical grammar. There are three cases when semicolons are automatically inserted: 1. When a token not allowed by the grammar is encountered, and it's separated from the previous token by at least one line terminator (including a block comment that includes at least one line terminator), or the token is ""}"", then a semicolon is inserted before the token. { 1 2 } 3 // is transformed by ASI into: { 1 ;2 ;} 3; // Which is valid grammar encoding three statements, // each consisting of a number literal The ending "")"" of do...while is taken care of as a special case by this rule as well. do { // ... } while (condition) /* ; */ // ASI here const a = 1 However, semicolons are not inserted if the semicolon would then become the separator in the for statement's head. for ( let a = 1 // No ASI here a < 10 // No ASI here a++ ) {} Semicolons are also never inserted as empty statements. For example, in the code below, if a semicolon is inserted after "")"", then the code would be valid, with an empty statement as the if body and the const declaration being a separate statement. However, because automatically inserted semicolons cannot become empty statements, this causes a declaration to become the body of the if statement, which is not valid. if (Math.random() > 0.5) const x = 1 // SyntaxError: Unexpected token 'const' 2. When the end of the input stream of tokens is reached, and the parser is unable to parse the single input stream as a complete program, a semicolon is inserted at the end. const a = 1 /* ; */ // ASI here This rule is a complement to the previous rule, specifically for the case where there's no ""offending token"" but the end of input stream. 3. When the grammar forbids line terminators in some place but a line terminator is found, a semicolon is inserted. These places include: expr <here> ++, expr <here> -- continue <here> lbl break <here> lbl return <here> expr throw <here> expr yield <here> expr yield <here> * expr (param) <here> => {} async <here> function, async <here> prop(), async <here> function*, async <here> *prop(), async <here> (param) <here> => {} Here ++ is not treated as a postfix operator applying to variable b, because a line terminator occurs between b and ++. a = b ++c // is transformed by ASI into a = b; ++c; Here, the return statement returns undefined, and the a + b becomes an unreachable statement. return a + b // is transformed by ASI into return; a + b; Note that ASI would only be triggered if a line break separates tokens that would otherwise produce invalid syntax. If the next token can be parsed as part of a valid structure, semicolons would not be inserted. For example: const a = 1 (1).toString() const b = 1 [1, 2, 3].forEach(console.log) Because () can be seen as a function call, it would usually not trigger ASI. Similarly, [] may be a member access. The code above is equivalent to: const a = 1(1).toString(); const b = 1[1, 2, 3].forEach(console.log); This happens to be valid syntax. 1[1, 2, 3] is a property accessor with a comma-joined expression. Therefore, you would get errors like ""1 is not a function"" and ""Cannot read properties of undefined (reading 'forEach')"" when running the code. Within classes, class fields and generator methods can be a pitfall as well. class A { a = 1 *gen() {} } It is seen as: class A { a = 1 * gen() {} } And therefore will be a syntax error around {. There are the following rules-of-thumb for dealing with ASI, if you want to enforce semicolon-less style: Write postfix ++ and -- on the same line as their operands.  const a = b ++ console.log(a) // ReferenceError: Invalid left-hand side expression in prefix operation const a = b++ console.log(a) The expressions after return, throw, or yield should be on the same line as the keyword.  function foo() { return  1 + 1 // Returns undefined; 1 + 1 is ignored } function foo() { return 1 + 1 } function foo() { return (  1 + 1 ) } Similarly, the label identifier after break or continue should be on the same line as the keyword.  outerBlock: { innerBlock: {  break  outerBlock // SyntaxError: Illegal break statement } } outerBlock: { innerBlock: {  break outerBlock } } The => of an arrow function should be on the same line as the end of its parameters.  const foo = (a, b) => a + b const foo = (a, b) => a + b The async of async functions, methods, etc. cannot be directly followed by a line terminator.  async function foo() {} async function foo() {} If a line starts with one of (, [, `, +, -, / (as in regex literals), prefix it with a semicolon, or end the previous line with a semicolon.  // The () may be merged with the previous line as a function call (() => { // ... })() // The [ may be merged with the previous line as a property access [1, 2, 3].forEach(console.log) // The ` may be merged with the previous line as a tagged template literal `string text ${data}`.match(pattern).forEach(console.log) // The + may be merged with the previous line as a binary + expression +a.toString() // The - may be merged with the previous line as a binary - expression -a.toString() // The / may be merged with the previous line as a division expression /pattern/.exec(str).forEach(console.log) ;(() => { // ... })() ;[1, 2, 3].forEach(console.log) ;`string text ${data}`.match(pattern).forEach(console.log) ;+a.toString() ;-a.toString() ;/pattern/.exec(str).forEach(console.log) Class fields should preferably always be ended with semicolons â in addition to the previous rule (which includes a field declaration followed by a computed property, since the latter starts with [), semicolons are also required between a field declaration and a generator method.  class A { a = 1 [b] = 2 *gen() {} // Seen as a = 1[b] = 2 * gen() {} } class A { a = 1; [b] = 2; *gen() {} } SpecificationsSpecificationECMAScript Language Specification Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Grammar and types Micro-feature from ES6, now in Firefox Aurora and Nightly: binary and octal numbers by Jeff Walden (August 12, 2013) JavaScript character escape sequences by Mathias Bynens (December 21, 2011) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 16, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
115,developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#declarations,"developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar/and/types#declarations. Grammar and types - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptGuideGrammar and typesArticle ActionsEnglish (US)In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore information JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleBasicsCommentsDeclarationsData structures and typesLiteralsMore informationGrammar and types Â« Previous Next Â» This chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.BasicsJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python. JavaScript is case-sensitive and uses the Unicode character set. For example, the word FrÃ¼h (which means ""early"" in German) could be used as a variable name. const FrÃ¼h = ""foobar""; But, the variable frÃ¼h is not the same as FrÃ¼h because JavaScript is case sensitive. In JavaScript, instructions are called statements and are separated by semicolons (;). A semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they must be separated by semicolons. Note: ECMAScript also has rules for automatic insertion of semicolons (ASI) to end statements. (For more information, see the detailed reference about JavaScript's lexical grammar.) It is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code. The source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments, or whitespace. (Spaces, tabs, and newline characters are considered whitespace.)CommentsThe syntax of comments is the same as in C++ and in many other languages: // a one line comment /* this is a longer, * multi-line comment */ You can't nest block comments. This often happens when you accidentally include a */ sequence in your comment, which will terminate the comment. /* You can't, however, /* nest comments */ SyntaxError */ In this case, you need to break up the */ pattern. For example, by inserting a backslash: /* You can /* nest comments *\/ by escaping slashes */ Comments behave like whitespace, and are discarded during script execution. Note: You might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this: #!/usr/bin/env node. This is called hashbang comment syntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See Hashbang comments for more details. DeclarationsJavaScript has three kinds of variable declarations. var Declares a variable, optionally initializing it to a value. let Declares a block-scoped, local variable, optionally initializing it to a value. const Declares a block-scoped, read-only named constant. VariablesYou use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules. A JavaScript identifier usually starts with a letter, underscore (_), or dollar sign ($). Subsequent characters can also be digits (0 â 9). Because JavaScript is case sensitive, letters include the characters A through Z (uppercase) as well as a through z (lowercase). You can use most of ISO 8859-1 or Unicode letters such as Ã¥ and Ã¼ in identifiers. (For more details, see this blog post or the lexical grammar reference.) You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, $credit, and _name.Declaring variablesYou can declare a variable in two ways: With the keyword var. For example, var x = 42. This syntax can be used to declare both local and global variables, depending on the execution context. With the keyword const or let. For example, let y = 13. This syntax can be used to declare a block-scope local variable. (See Variable scope below.) You can declare variables to unpack values using the destructuring assignment syntax. For example, const { bar } = foo. This will create a variable named bar and assign to it the value corresponding to the key of the same name from our object foo. Variables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an undeclared global variable. This is an error in strict mode and should be avoided altogether.Declaration and initializationIn a statement like let x = 42, the let x part is called a declaration, and the = 42 part is called an initializer. The declaration allows the variable to be accessed later in code without throwing a ReferenceError, while the initializer assigns a value to the variable. In var and let declarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value undefined. let x; console.log(x); // logs ""undefined"" In essence, let x = 42 is equivalent to let x; x = 42. const declarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with undefined is likely a programmer mistake. const x; // SyntaxError: Missing initializer in const declaration Variable scopeA variable may belong to one of the following scopes: Global scope: The default scope for all code running in script mode. Module scope: The scope for code running in module mode. Function scope: The scope created with a function. In addition, variables declared with let or const can belong to an additional scope: Block scope: The scope created with a pair of curly braces (a block). When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function. let and const declarations can also be scoped to the block statement that they are declared in. if (Math.random() > 0.5) { const y = 5; } console.log(y); // ReferenceError: y is not defined However, variables created with var are not block-scoped, but only local to the function (or global scope) that the block resides within. For example, the following code will log 5, because the scope of x is the global context (or the function context if the code is part of a function). The scope of x is not limited to the immediate if statement block. if (true) { var x = 5; } console.log(x); // x is 5 Variable hoistingvar-declared variables are hoisted, meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see var declarations as being ""lifted"" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always undefined, because only its declaration is hoisted, but not its initialization. console.log(x === undefined); // true var x = 3; (function () { console.log(x); // undefined var x = ""local value""; })(); The above examples will be interpreted the same as: var x; console.log(x === undefined); // true x = 3; (function () { var x; console.log(x); // undefined x = ""local value""; })(); Because of hoisting, all var statements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code. Whether let and const are hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a ReferenceError, because the variable is in a ""temporal dead zone"" from the start of the block until the declaration is processed. console.log(x); // ReferenceError const x = 3; console.log(y); // ReferenceError let y = 3; Unlike var declarations, which only hoist the declaration but not its value, function declarations are hoisted entirely â you can safely call the function anywhere in its scope. See the hoisting glossary entry for more discussion.Global variablesGlobal variables are in fact properties of the global object. In web pages, the global object is window, so you can set and access global variables using the window.variable syntax. In all environments, you can use the globalThis variable (which itself is a global variable) to access global variables. Consequently, you can access global variables declared in one window or frame from another window or frame by specifying the window or frame name. For example, if a variable called phoneNumber is declared in a document, you can refer to this variable from an iframe as parent.phoneNumber.ConstantsYou can create a read-only, named constant with the const keyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign ($), and can contain alphabetic, numeric, or underscore characters. const PI = 3.14; A constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for let block-scope variables. You cannot declare a constant with the same name as a function or variable in the same scope. For example: // THIS WILL CAUSE AN ERROR function f() {} const f = 5; // THIS WILL CAUSE AN ERROR TOO function f() { const g = 5; var g; //statements } However, const only prevents re-assignments, but doesn't prevent mutations. The properties of objects assigned to constants are not protected, so the following statement is executed without problems. const MY_OBJECT = { key: ""value"" }; MY_OBJECT.key = ""otherValue""; Also, the contents of an array are not protected, so the following statement is executed without problems. const MY_ARRAY = [""HTML"", ""CSS""]; MY_ARRAY.push(""JAVASCRIPT""); console.log(MY_ARRAY); // ['HTML', 'CSS', 'JAVASCRIPT']; Data structures and typesData typesThe latest ECMAScript standard defines eight data types: Seven data types that are primitives:  Boolean. true and false. null. A special keyword denoting a null value. (Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.) undefined. A top-level property whose value is not defined. Number. An integer or floating point number. For example: 42 or 3.14159. BigInt. An integer with arbitrary precision. For example: 9007199254740992n. String. A sequence of characters that represent a text value. For example: ""Howdy"". Symbol. A data type whose instances are unique and immutable. and Object Although these data types are relatively few, they enable you to perform useful operations with your applications. Functions are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.Data type conversionJavaScript is a dynamically typed language. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution. So, for example, you could define a variable as follows: let answer = 42; And later, you could assign the same variable a string value, for example: answer = ""Thanks for all the fish!""; Because JavaScript is dynamically typed, this assignment does not cause an error message.Numbers and the '+' operatorIn expressions involving numeric and string values with the + operator, JavaScript converts numeric values to strings. For example, consider the following statements: x = ""The answer is "" + 42; // ""The answer is 42"" y = 42 + "" is the answer""; // ""42 is the answer"" z = ""37"" + 7; // ""377"" With all other operators, JavaScript does not convert numeric values to strings. For example: ""37"" - 7; // 30 ""37"" * 7; // 259 Converting strings to numbersIn the case that a value representing a number is in memory as a string, there are methods for conversion. parseInt() parseFloat() parseInt only returns whole numbers, so its use is diminished for decimals. Note: Additionally, a best practice for parseInt is to always include the radix parameter. The radix parameter is used to specify which numerical system is to be used. parseInt(""101"", 2); // 5 An alternative method of retrieving a number from a string is with the + (unary plus) operator: ""1.1"" + ""1.1"" // '1.11.1' (+""1.1"") + (+""1.1""); // 2.2 // Note: the parentheses are added for clarity, not required. LiteralsLiterals represent values in JavaScript. These are fixed valuesânot variablesâthat you literally provide in your script. This section describes the following types of literals: Array literals Boolean literals Numeric literals Object literals RegExp literals String literals Array literalsAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets ([]). When you create an array using an array literal, it is initialized with the specified values as its elements, and its length is set to the number of arguments specified. The following example creates the coffees array with three elements and a length of three: const coffees = [""French Roast"", ""Colombian"", ""Kona""]; If an array is created using a literal in a top-level script, JavaScript interprets the array each time it evaluates the expression containing the array literal. In addition, a literal used in a function is created each time the function is called. Note: Array literals create Array objects. See Array and Indexed collections for details on Array objects. Extra commas in array literals If you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the fish array: const fish = [""Lion"", , ""Angel""]; When you log this array, you will see: console.log(fish); // [ 'Lion', <1 empty item>, 'Angel' ] Note that the second item is ""empty"", which is not exactly the same as the actual undefined value. When using array-traversing methods like Array.prototype.map, empty slots are skipped. However, index-accessing fish[1] still returns undefined. If you include a trailing comma at the end of the list of elements, the comma is ignored. In the following example, the length of the array is three. There is no myList[3]. All other commas in the list indicate a new element. const myList = [""home"", , ""school""]; In the following example, the length of the array is four, and myList[0] and myList[2] are missing. const myList = [, ""home"", , ""school""]; In the following example, the length of the array is four, and myList[1] and myList[3] are missing. Only the last comma is ignored. const myList = [""home"", , ""school"", ,]; Note: Trailing commas help keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line. const myList = [ ""home"", ""school"", + ""hospital"", ]; Understanding the behavior of extra commas is important to understanding JavaScript as a language. However, when writing your own code, you should explicitly declare the missing elements as undefined, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability. const myList = [""home"", /* empty */, ""school"", /* empty */, ]; Boolean literalsThe Boolean type has two literal values: true and false. Note: Do not confuse the primitive Boolean values true and false with the true and false values of the Boolean object. The Boolean object is a wrapper around the primitive Boolean data type. See Boolean for more information. Numeric literalsJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10. Note that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like -123.4 are fine, being interpreted as a unary - operator applied to the numeric literal 123.4. Integer literals Integer and BigInt literals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2). A decimal integer literal is a sequence of digits without a leading 0 (zero). A leading 0 (zero) on an integer literal, or a leading 0o (or 0O) indicates it is in octal. Octal integer literals can include only the digits 0 â 7. A leading 0x (or 0X) indicates a hexadecimal integer literal. Hexadecimal integers can include digits (0 â 9) and the letters a â f and A â F. (The case of a character does not change its value. Therefore: 0xa = 0xA = 10 and 0xf = 0xF = 15.) A leading 0b (or 0B) indicates a binary integer literal. Binary integer literals can only include the digits 0 and 1. A trailing n suffix on an integer literal indicates a BigInt literal. The integer literal can use any of the above bases. Note that leading-zero octal syntax like 0123n is not allowed, but 0o123n is fine. Some examples of integer literals are: 0, 117, 123456789123456789n    (decimal, base 10) 015, 0001, 0o777777777777n    (octal, base 8) 0x1123, 0x00111, 0x123456789ABCDEFn  (hexadecimal, ""hex"" or base 16) 0b11, 0b0011, 0b11101001010101010101n (binary, base 2) For more information, see Numeric literals in the Lexical grammar reference. Floating-point literals A floating-point literal can have the following parts: An unsigned decimal integer, A decimal point (.), A fraction (another decimal number), An exponent. The exponent part is an e or E followed by an integer, which can be signed (preceded by + or -). A floating-point literal must have at least one digit, and either a decimal point or e (or E). More succinctly, the syntax is: [digits].[digits][(E|e)[(+|-)]digits] For example: 3.1415926 .123456789 3.1E+12 .1e-23 Object literalsAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Warning: Do not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the { will be interpreted as the beginning of a block. The following is an example of an object literal. The first element of the car object defines a property, myCar, and assigns to it a new string, ""Saturn""; the second element, the getCar property, is immediately assigned the result of invoking the function (carTypes(""Honda"")); the third element, the special property, uses an existing variable (sales). const sales = ""Toyota""; function carTypes(name) { return name === ""Honda"" ? name : `Sorry, we don't sell ${name}.`; } const car = { myCar: ""Saturn"", getCar: carTypes(""Honda""), special: sales }; console.log(car.myCar); // Saturn console.log(car.getCar); // Honda console.log(car.special); // Toyota Additionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options. const car = { manyCars: { a: ""Saab"", b: ""Jeep"" }, 7: ""Mazda"" }; console.log(car.manyCars.b); // Jeep console.log(car[7]); // Mazda Object property names can be any string, including the empty string. If the property name would not be a valid JavaScript identifier or number, it must be enclosed in quotes. Property names that are not valid identifiers cannot be accessed as a dot (.) property. const unusualPropertyNames = { '': 'An empty string', '!': 'Bang!' } console.log(unusualPropertyNames.''); // SyntaxError: Unexpected string console.log(unusualPropertyNames.!); // SyntaxError: Unexpected token ! Instead, they must be accessed with the bracket notation ([]). console.log(unusualPropertyNames[""""]); // An empty string console.log(unusualPropertyNames[""!""]); // Bang! Enhanced Object literals Object literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for foo: foo assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences. const obj = { // __proto__ __proto__: theProtoObj, // Shorthand for 'handler: handler' handler, // Methods toString() {  // Super calls  return ""d "" + super.toString(); }, // Computed (dynamic) property names [""prop_"" + (() => 42)()]: 42, }; RegExp literalsA regex literal (which is defined in detail later) is a pattern enclosed between slashes. The following is an example of a regex literal. const re = /ab+c/; String literalsA string literal is zero or more characters enclosed in double ("") or single (') quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks). The following are examples of string literals: 'foo' ""bar"" '1234' 'one line another line' ""Joyo's cat"" You should use string literals unless you specifically need to use a String object. See String for details on String objects. You can call any of the String object's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the length property with a string literal: // Will print the number of symbols in the string including whitespace. console.log(""Joyo's cat"".length); // In this case, 10. Template literals are also available. Template literals are enclosed by the back-tick (`) (grave accent) character instead of double or single quotes. Template literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.) // Basic literal string creation `In JavaScript ' ' is a line-feed.` // Multiline strings `In JavaScript, template strings can run over multiple lines, but double and single quoted strings cannot.` // String interpolation const name = 'Lev', time = 'today'; `Hello ${name}, how are you ${time}?` Tagged templates are a compact syntax for specifying a template literal along with a call to a ""tag"" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal â as in the following example, where the template tag function is named print. The print function will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky [object Object]. const formatArg = (arg) => { if (Array.isArray(arg)) {  // Print a bulleted list  return arg.map((part) => `- ${part}`).join("" ""); } if (arg.toString === Object.prototype.toString) {  // This object will be serialized to ""[object Object]"".  // Let's print something nicer.  return JSON.stringify(arg); } return arg; }; const print = (segments, ...args) => { // For any well-formed template literal, there will always be N args and // (N+1) string segments. let message = segments[0]; segments.slice(1).forEach((segment, index) => {  message += formatArg(args[index]) + segment; }); console.log(message); }; const todos = [ ""Learn JavaScript"", ""Learn Web APIs"", ""Set up my website"", ""Profit!"", ]; const progress = { javascript: 20, html: 50, css: 10 }; print`I need to do: ${todos} My current progress is: ${progress} `; // I need to do: // - Learn JavaScript // - Learn Web APIs // - Set up my website // - Profit! // My current progress is: {""javascript"":20,""html"":50,""css"":10} Since tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call: print([""I need to do: "", "" My current progress is: "", "" ""], todos, progress); This may be reminiscent of the console.log-style interpolation: console.log(""I need to do: %o My current progress is: %o "", todos, progress); You can see how the tagged template reads more naturally than a traditional ""formatter"" function, where the variables and the template itself have to be declared separately. Using special characters in strings In addition to ordinary characters, you can also include special characters in strings, as shown in the following example. ""one line another line""; The following table lists the special characters that you can use in JavaScript strings. Character Meaning  \0 Null Byte \b Backspace \f Form Feed  New Line \r Carriage Return \t Tab \v Vertical tab \' Apostrophe or single quote \"" Double quote \\ Backslash character \XXX The character with the Latin-1 encoding specified by up to three octal digits XXX between 0 and 377. For example, \251 is the octal sequence for the copyright symbol. \xXX The character with the Latin-1 encoding specified by the two hexadecimal digits XX between 00 and FF. For example, \xA9 is the hexadecimal sequence for the copyright symbol. \uXXXX The Unicode character specified by the four hexadecimal digits XXXX. For example, \u00A9 is the Unicode sequence for the copyright symbol. See Unicode escape sequences. \u{XXXXX} Unicode code point escapes. For example, \u{2F804} is the same as the simple Unicode escapes \uD87E\uDC04. Escaping characters For characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided. You can insert a quotation mark inside a string by preceding it with a backslash. This is known as escaping the quotation mark. For example: const quote = ""He read \""The Cremation of Sam McGee\"" by R.W. Service.""; console.log(quote); The result of this would be: He read ""The Cremation of Sam McGee"" by R.W. Service. To include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path c:\temp to a string, use the following: const home = ""c:\\temp""; You can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string. const str = ""this string \ is broken \ across multiple \ lines.""; console.log(str); // this string is broken across multiple lines. More informationThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide: Control flow and error handling Loops and iteration Functions Expressions and operators In the next chapter, we will have a look at control flow constructs and error handling. Â« Previous Next Â» Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
116,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:role,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:role. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
117,developer.mozilla.org/en-US/docs/Glossary/Crawler,"developer.mozilla.org/en-US/docs/Glossary/Crawler. Crawler - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsCrawlerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoCrawlerA web crawler is a program, often called a bot or robot, which systematically browses the Web to collect data from webpages. Typically search engines (e.g. Google, Bing, etc.) use crawlers to build indexes.See also Web crawler on Wikipedia Search engine (Glossary) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
118,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps. CanvasRenderingContext2D: fontVariantCaps property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DfontVariantCapsIn this articleValueExamplesSpecificationsBrowser compatibilityCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleValueExamplesSpecificationsBrowser compatibilityCanvasRenderingContext2D: fontVariantCaps propertyExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The CanvasRenderingContext2D.fontVariantCaps property of the Canvas API specifies an alternative capitalization of the rendered text. This corresponds to the CSS font-variant-caps property.ValueThe font alternative capitalization value, which is one of: normal (default) Deactivates of the use of alternate glyphs. small-caps   Enables display of small capitals (OpenType feature: smcp).  Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.  all-small-caps Enables display of small capitals for both upper and lowercase letters (OpenType features: c2sc, smcp). petite-caps Enables display of petite capitals (OpenType feature: pcap). all-petite-caps Enables display of petite capitals for both upper and lowercase letters (OpenType features: c2pc, pcap). unicase Enables display of mixture of small capitals for uppercase letters with normal lowercase letters (OpenType feature: unic). titling-caps   Enables display of titling capitals (OpenType feature: titl).  Uppercase letter glyphs are often designed for use with lowercase letters.  When used in all uppercase titling sequences they can appear too strong.  Titling capitals are designed specifically for this situation.  The property can be used to get or set the font capitalization value. Note that there are accessibility concerns with some of these, which are outlined in the corresponding font-variant-caps topic.Examples In this example we display the text ""Hello World"" using each of the supported values of the fontVariantCaps property. The value is also displayed for each case by reading the property. HTML<canvas id=""canvas"" width=""700"" height=""220""></canvas> JavaScriptconst canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.font = ""20px serif""; // Default (normal) ctx.fillText(`Hello world (default: ${ctx.fontVariantCaps})`, 5, 20); // Capitalization: small-caps ctx.fontVariantCaps = ""small-caps""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 50); // Capitalization: all-small-caps ctx.fontVariantCaps = ""all-small-caps""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 80); // Capitalization: petite-caps ctx.fontVariantCaps = ""petite-caps""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 110); // Capitalization: all-petite-caps ctx.fontVariantCaps = ""all-petite-caps""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 140); // Capitalization: unicase ctx.fontVariantCaps = ""unicase""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 170); // Capitalization: titling-caps ctx.fontVariantCaps = ""titling-caps""; ctx.fillText(`Hello world (${ctx.fontVariantCaps})`, 5, 200); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-fontvariantcapsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
119,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth. CanvasRenderingContext2D: lineWidth property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DlineWidthArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidth miterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: lineWidth property The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines. Note: Lines can be drawn with the  stroke(),  strokeRect(),  and strokeText() methods. ValueA number specifying the line width, in coordinate space units. Zero, negative, Infinity, and NaN values are ignored. This value is 1.0 by default.ExamplesChanging line widthThis example draws a line and a rectangle, using a line width of 15 units. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.lineWidth = 15; ctx.beginPath(); ctx.moveTo(20, 20); ctx.lineTo(130, 130); ctx.rect(40, 40, 70, 70); ctx.stroke(); ResultMore examplesFor more examples and explanation about this property, see Applying styles and color in the Canvas Tutorial.SpecificationsSpecificationHTML Standard # dom-context-2d-linewidth-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this property: CanvasRenderingContext2D CanvasRenderingContext2D.lineCap CanvasRenderingContext2D.lineJoin Applying styles and color Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
120,developer.mozilla.org/en-US/docs/Glossary/OOP,"developer.mozilla.org/en-US/docs/Glossary/OOP. OOP - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsOOPArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoOOPOOP (Object-Oriented Programming) is an approach in programming in which data is encapsulated within objects and the object itself is operated on, rather than its component parts. JavaScript is heavily object-oriented. It follows a prototype-based model, but it also offers a class syntax to enable typical OOP paradigms.See also Object-oriented programming on Wikipedia Introduction to object-oriented JavaScript Inheritance and the prototype chain Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
121,developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript,"developer.mozilla.org/en-US/docs/Glossary/Property/JavaScript. Property (JavaScript) - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsPropertyProperty (JavaScript)Article ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoProperty (JavaScript)A JavaScript property is a member of an object that associates a key with a value. A JavaScript object is a data structure that stores a collection of properties. A property consists of the following parts: A name (also called a key), which is either a string or a symbol. A value, which can be any JavaScript value. A property that has a function as its value may also be called a method. Some attributes, which specify how the property can be read and written. A property may have the configurable, enumerable, and writable attributes. Accessor properties do not have an actual ""value"". The value is represented indirectly through a pair of functions, one (the getter) invoked when reading the value and one (the setter) invoked when setting the value. However, accessor properties behave like regular data properties on the surface, because the getter and setter functions are invoked automatically and are typically transparent to JavaScript code. The property's value (including the getter and setter) and its attributes are stored in a data record called the property descriptor. Many methods, such as Object.getOwnPropertyDescriptor() and Object.defineProperty(), work with property descriptors. The term property itself does not correspond to any JavaScript value â it's an abstract concept. For example, in the following code: const obj = { a: 1, b() {}, }; The object obj has two properties. The first one has ""a"" as the key and 1 as the value. The second one has ""b"" as the key and a function as the value (using the method syntax). The ""a"" â 1, ""b"" â function associations are the properties of the object. In the context of classes, properties can be divided into instance properties, which are owned by each instance, and static properties, which are owned by the class and hold data common to all instances. In the context of inheritance, properties can also be divided into own properties, which are owned by the object itself, and inherited properties, which are owned by objects in the prototype chain of the object. For more information about reading and writing properties, see working with objects.See also Property (programming) on Wikipedia Introduction to object-oriented JavaScript Object properties Enumerability and ownership of properties Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
122,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/format,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/format. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
123,developer.mozilla.org/en-US/docs/Web/API/Attr/prefix,"developer.mozilla.org/en-US/docs/Web/API/Attr/prefix. Attr: prefix property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrprefixArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelAttrInstance propertieslocalNamenamenamespaceURIownerElementprefix specified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoAttr: prefix propertyThe read-only prefix property of the Attr returns the namespace prefix of the attribute, or null if no prefix is specified. The prefix is always in lower case, whatever case is used at the attribute creation. Note: Only XML supports namespaces. HTML does not. That means that the prefix of an attribute of an HTML element will always be null. Also, only the xml (for the xml:lang attribute), xlink (for the xlink:href, xlink:show, xlink:target and xlink:title attributes) and xpath namespaces are supported, and only on SVG and MathML elements.ValueA string containing the prefix of the namespace the attribute belongs too. If none, it returns null.ExampleHTML<svg xml:lang=""en-US"" class=""struct"" height=""1"" width=""1"">Click me</svg> <label xml:lang=""en-US"" class=""struct""></label> <p> <button>Show value for &lt;svg&gt;</button> <button>Show value for &lt;label&gt;</button> </p> <p> Prefix of the attribute <code>xml:lang</code>: <output id=""result"">None.</output> </p> JavaScriptconst elements = document.querySelectorAll("".struct""); const buttons = document.querySelectorAll(""button""); const outputEl = document.querySelector(""#result""); let i = 0; for (const button of buttons) { const element = elements[i]; button.addEventListener(""click"", () => {  const attribute = element.attributes[0];  outputEl.value = attribute.prefix; }); i++; } SpecificationsSpecificationDOM Standard # dom-attr-prefixBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The properties Attr.name, returning the qualified name of the attribute, and Attr.localName, its local name. The Element.prefix() property, returning the namespace prefix of an Element. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
124,developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument,"developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument. DOMImplementation: createDocument() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDOMImplementationcreateDocument()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDOMImplementationInstance methodscreateDocument() createDocumentType()createHTMLDocument()hasFeature() Deprecated Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDOMImplementation: createDocument() method The DOMImplementation.createDocument() method creates and returns an XMLDocument. SyntaxcreateDocument(namespaceURI, qualifiedNameStr) createDocument(namespaceURI, qualifiedNameStr, documentType) Parameters namespaceURI   A string containing the namespace URI of the document to be  created, or null if the document doesn't belong to one.  qualifiedNameStr   A string containing the qualified name, that is an optional  prefix and colon plus the local root element name, of the document to be created.  documentType Optional   Is the DocumentType of the document to be created. It defaults to  null.  Return valueNone (undefined).Examplesconst doc = document.implementation.createDocument( ""http://www.w3.org/1999/xhtml"", ""html"", null ); const body = document.createElementNS(""http://www.w3.org/1999/xhtml"", ""body""); body.setAttribute(""id"", ""abc""); doc.documentElement.appendChild(body); alert(doc.getElementById(""abc"")); // [object HTMLBodyElement] SpecificationsSpecificationDOM Standard # ref-for-dom-domimplementation-createdocumentâ¡Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOMImplementation interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
125,developer.mozilla.org/en-US/docs/Web/Performance/Critical/rendering/path,"developer.mozilla.org/en-US/docs/Web/Performance/Critical/rendering/path. Critical rendering path - Web performance | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb performanceCritical rendering pathArticle ActionsEnglish (US)In this articleUnderstanding CRPOptimizing for CRP Animation performance and frame rateCSS and JavaScript animation performanceCritical rendering pathLazy loadingNavigation and resource timingsOptimizing startup performancePerformance Monitoring: RUM vs. synthetic monitoringPerformance budgetsPerformance fundamentalsPopulating the page: how browsers workRecommended Web Performance Timings: How long is too long?Understanding latencyUsing dns-prefetch In this articleUnderstanding CRPOptimizing for CRPCritical rendering path The Critical Rendering Path is the sequence of steps the browser goes through to convert the HTML, CSS, and JavaScript into pixels on the screen. Optimizing the critical render path improves render performance. The critical rendering path includes the Document Object Model (DOM), CSS Object Model (CSSOM), render tree and layout. The document object model is created as the HTML is parsed. The HTML may request JavaScript, which may, in turn, alter the DOM. The HTML includes or makes requests for styles, which in turn builds the CSS object model. The browser engine combines the two to create the Render Tree. Layout determines the size and location of everything on the page. Once layout is determined, pixels are painted to the screen. Optimizing the critical rendering path improves the time to first render. Understanding and optimizing the critical rendering path is important to ensure reflows and repaints can happen at 60 frames per second, to ensure performant user interactions, and to avoid jank.Understanding CRPWeb performance includes the server requests and responses, loading, scripting, rendering, layout, and the painting of the pixels to the screen. A request for a web page or app starts with an HTML request. The server returns the HTML - response headers and data. The browser then begins parsing the HTML, converting the received bytes to the DOM tree. The browser initiates requests every time it finds links to external resources, be it stylesheets, scripts, or embedded image references. Some requests are blocking, which means the parsing of the rest of the HTML is halted until the imported asset is handled. The browser continues to parse the HTML making requests and building the DOM, until it gets to the end, at which point it constructs the CSS object model. With the DOM and CSSOM complete, the browser builds the render tree, computing the styles for all the visible content. After the render tree is complete, layout occurs, defining the location and size of all the render tree elements. Once complete, the page is rendered, or 'painted' on the screen.Document Object ModelDOM construction is incremental. The HTML response turns into tokens which turns into nodes which turn into the DOM Tree. A single DOM node starts with a startTag token and ends with an endTag token. Nodes contain all relevant information about the HTML element. The information is described using tokens. Nodes are connected into a DOM tree based on token hierarchy. If another set of startTag and endTag tokens come between a set of startTag and endTags, you have a node inside a node, which is how we define the hierarchy of the DOM tree. The greater the number of nodes, the longer the following events in the critical rendering path will take. Measure! A few extra nodes won't make a big difference, but keep in mind that adding many extra nodes will impact performance.CSS Object ModelThe DOM contains all the content of the page. The CSSOM contains all the information on how to style the DOM. CSSOM is similar to the DOM, but different. While the DOM construction is incremental, CSSOM is not. CSS is render blocking: the browser blocks page rendering until it receives and processes all the CSS. CSS is render blocking because rules can be overwritten, so the content can't be rendered until the CSSOM is complete. CSS has its own set of rules for identifying valid tokens. Remember the C in CSS stands for 'Cascade'. CSS rules cascade down. As the parser converts tokens to nodes, descendant nodes will inherit some of the styles of the parent. The incremental processing features don't apply to CSS like they do with HTML, because subsequent rules may override previous ones. The CSS object model gets built as the CSS is parsed, but can't be used to build the render tree until it is completely parsed because styles that are going to be overwritten with later parsing should not be rendered to the screen. In terms of selector performance, less specific selectors are faster than more specific ones. For example, .foo {} is faster than .bar .foo {} because when the browser finds .foo, in the second scenario, it has to walk up the DOM to check if .foo has an ancestor .bar. The more specific tag requires more work from the browser, but this penalty is not likely worth optimizing around. If you measure the time it takes to parse CSS, you'll be amazed at how fast browsers truly are. The more specific rule is more expensive because it has to traverse more nodes in the DOM tree - but that extra expense is generally minimal. Measure first. Optimize as needed. Specificity is likely not your lowest hanging fruit. When it comes to CSS, selector performance optimization improvements will only be in microseconds. There are other ways to optimize CSS, such as minification, and separating deferred CSS into non-blocking requests by using media queries.Render TreeThe render tree captures both the content and the styles: the DOM and CSSOM trees are combined into the render tree. To construct the render tree, the browser checks every node, starting from root of the DOM tree, and determines which CSS rules are attached. The render tree only captures visible content. The head section (generally) doesn't contain any visible information, and is therefore not included in the render tree. If there's a display: none; set on an element, neither it, nor any of its descendants, are in the render tree.LayoutOnce the render tree is built, layout becomes possible. Layout is dependent on the size of screen. The layout step determines where and how the elements are positioned on the page, determining the width and height of each element, and where they are in relation to each other. What is the width of an element? Block level elements, by definition, have a default width of 100% of the width of their parent. An element with a width of 50%, will be half of the width of its parent. Unless otherwise defined, the body has a width of 100%, meaning it will be 100% of the width of the viewport. This width of the device impacts layout. The viewport meta tag defines the width of the layout viewport, impacting the layout. Without it, the browser uses the default viewport width, which on by-default full screen browsers is generally 960px. On by-default full screen browsers, like your phone's browser, by setting <meta name=""viewport"" content=""width=device-width"">, the width will be the width of the device instead of the default viewport width. The device-width changes when a user rotates their phone between landscape and portrait mode. Layout happens every time a device is rotated or browser is otherwise resized. Layout performance is impacted by the DOM â the greater the number of nodes, the longer layout takes. Layout can become a bottleneck, leading to jank if required during scrolling or other animations. While a 20ms delay on load or orientation change may be fine, it will lead to jank on animation or scroll. Any time the render tree is modified, such as by added nodes, altered content, or updated box model styles on a node, layout occurs. To reduce the frequency and duration of layout events, batch updates and avoid animating box model properties.PaintThe last step is painting the pixels to the screen. Once the render tree is created and layout occurs, the pixels can be painted to the screen. On load, the entire screen is painted. After that, only impacted areas of the screen will be repainted, as browsers are optimized to repaint the minimum area required. Paint time depends on what kind of updates are being applied to the render tree. While painting is a very fast process, and therefore likely not the most impactful place to focus on in improving performance, it is important to remember to allow for both layout and re-paint times when measuring how long an animation frame may take. The styles applied to each node increase the paint time, but removing style that increases the paint by 0.001ms may not give you the biggest bang for your optimization buck. Remember to measure first. Then you can determine whether it should be an optimization priority.Optimizing for CRPImprove page load speed by prioritizing which resources get loaded, controlling the order in which they are loaded, and reducing the file sizes of those resources. Performance tips include 1) minimizing the number of critical resources by deferring non-critical ones' download, marking them as async, or eliminating them altogether, 2) optimizing the number of requests required along with the file size of each request, and 3) optimizing the order in which critical resources are loaded by prioritizing the downloading of critical assets, thereby shortening the critical path length.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 24, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
126,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata/event,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata/event. HTMLMediaElement: loadeddata event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementloadeddataArticle ActionsEnglish (US)In this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()Eventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddata loadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetIn this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilityRelated EventsSee alsoHTMLMediaElement: loadeddata eventThe loadeddata event is fired when the frame at the current playback position of the media has finished loading; often the first frame. Note: This event will not fire in mobile/tablet devices if data-saver is on in browser settings. SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""loadeddata"", (event) => {}); onloadeddata = (event) => {}; Event typeA generic Event.ExamplesThese examples add an event listener for the HTMLMediaElement's loadeddata event, then post a message when that event handler has reacted to the event firing. Using addEventListener(): const video = document.querySelector(""video""); video.addEventListener(""loadeddata"", (event) => { console.log(  ""Yay! The readyState just increased to "" +  ""HAVE_CURRENT_DATA or greater for the first time."" ); }); Using the onloadeddata event handler property: const video = document.querySelector(""video""); video.onloadeddata = (event) => { console.log(  ""Yay! The readyState just increased to "" +  ""HAVE_CURRENT_DATA or greater for the first time."" ); }; SpecificationsSpecificationHTML Standard # event-media-loadeddataHTML Standard # handler-onloadeddataBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Related Events The HTMLMediaElement playing event The HTMLMediaElement waiting event The HTMLMediaElement seeking event The HTMLMediaElement seeked event The HTMLMediaElement ended event The HTMLMediaElement loadedmetadata event The HTMLMediaElement loadeddata event The HTMLMediaElement canplay event The HTMLMediaElement canplaythrough event The HTMLMediaElement durationchange event The HTMLMediaElement timeupdate event The HTMLMediaElement play event The HTMLMediaElement pause event The HTMLMediaElement ratechange event The HTMLMediaElement volumechange event The HTMLMediaElement suspend event The HTMLMediaElement emptied event The HTMLMediaElement stalled event See also HTMLAudioElement HTMLVideoElement <audio> <video> Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
127,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted. HTMLMediaElement: muted property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementmutedArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloopmediaGroup Non-standard Deprecated mediaKeysmuted networkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: muted property The HTMLMediaElement.muted property indicates whether the media element is muted. Value A boolean value. true means muted and false means not muted. Examplesconst obj = document.createElement(""video""); console.log(obj.muted); // false SpecificationsSpecificationHTML Standard # dom-media-muted-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.muted property HTMLMediaElement.defaultMuted HTMLMediaElement.volume Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
128,developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL/static,"developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL/static. URL: createObjectURL() static method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsURLcreateObjectURL()Article ActionsEnglish (US)In this articleSyntaxExamplesUsage notesSpecificationsBrowser compatibilitySee alsoURL APIURLConstructorURL()Instance propertieshashhosthostnamehreforiginpasswordpathnameportprotocolsearchsearchParamsusernameStatic methodscreateObjectURL() revokeObjectURL()Instance methodstoJSON()toString()Related pages for URL APIURLSearchParamsIn this articleSyntaxExamplesUsage notesSpecificationsBrowser compatibilitySee alsoURL: createObjectURL() static method The URL.createObjectURL() static method creates a string containing a URL representing the object given in the parameter.  The URL lifetime is tied to the document in the window on which it was created. The new object URL represents the specified File object or Blob object. To release an object URL, call revokeObjectURL(). Note: This feature is available in Web Workers Note: This feature is not available in Service Workers due to its  potential to create memory leaks. SyntaxURL.createObjectURL(object) Parameters object   A File, Blob, or MediaSource object to  create an object URL for.  Return value A string containing an object URL that can be used to reference the contents of the specified source object. ExamplesSee Using object URLs to display images.Usage notesMemory management Each time you call createObjectURL(), a new object URL is created, even if you've already created one for the same object. Each of these must be released by calling URL.revokeObjectURL() when you no longer need them.  Browsers will release object URLs automatically when the document is unloaded; however, for optimal performance and memory usage, if there are safe times when you can explicitly unload them, you should do so. Using object URLs for media streams In older versions of the Media Source specification, attaching a stream to a <video> element required creating an object URL for the MediaStream. This is no longer necessary, and browsers are removing support for doing this. Warning: If you still have code that relies on  createObjectURL() to attach streams to media  elements, you need to update your code to set srcObject to the MediaStream directly. SpecificationsSpecificationFile API # dfn-createObjectURLBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Using files from web applications Using object URLs to display images URL.revokeObjectURL() HTMLMediaElement.srcObject FileReader.readAsDataURL() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 28, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
129,developer.mozilla.org/en-US/docs/Web/SVG/Tutorial,"developer.mozilla.org/en-US/docs/Web/SVG/Tutorial. SVG Tutorial - SVG: Scalable Vector Graphics | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesSVG: Scalable Vector GraphicsSVG TutorialArticle ActionsEnglish (US)In this articleIntroducing SVG from ScratchScripting SVG with JavaScriptSVG filters tutorialAnimations with SMIL in SVGCreating fonts in SVG SVG Tutorials Introducing SVG from scratch Introduction Getting started Positions Basic shapes Paths Fills and Strokes Gradients in SVG Patterns Texts Basic transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG image element Tools for SVG SVG and CSS Reference Elements <a><animate><animateMotion><animateTransform><circle><clipPath><cursor> Deprecated <defs><desc><ellipse><feBlend><feColorMatrix><feComponentTransfer><feComposite><feConvolveMatrix><feDiffuseLighting><feDisplacementMap><feDistantLight><feDropShadow><feFlood><feFuncA><feFuncB><feFuncG><feFuncR><feGaussianBlur><feImage><feMerge><feMergeNode><feMorphology><feOffset><fePointLight><feSpecularLighting><feSpotLight><feTile><feTurbulence><filter><font-face-format> Deprecated <font-face-name> Deprecated <font-face-src> Deprecated <font-face-uri> Deprecated <font-face> Deprecated <font> Deprecated <foreignObject><g><glyph> Deprecated <glyphRef> Deprecated <hkern> Deprecated <image><line><linearGradient><marker><mask><metadata><missing-glyph> Deprecated <mpath><path><pattern><polygon><polyline><radialGradient><rect><script><set><stop><style><svg><switch><symbol><text><textPath><title> â the SVG accessible name element<tref> Deprecated <tspan><use><view><vkern> Deprecated  Attributes accent-height Deprecated accumulateadditivealignment-baselinealphabetic Deprecated amplitudearabic-form Deprecated ascent Deprecated attributeNameattributeType Deprecated azimuthbaseFrequencybaseline-shiftbaseProfile Deprecated bbox Deprecated beginbiasbycalcModecap-height Deprecated classclip Deprecated clip-pathclip-ruleclipPathUnitscolorcolor-interpolationcolor-interpolation-filterscolor-profile Deprecated contentScriptType Deprecated contentStyleType Deprecated cursorcxcyddata-*descent Deprecated diffuseConstantdirectiondisplaydivisordominant-baselinedurdxdyedgeModeelevationenable-background Deprecated endexponentfillfill-opacityfill-rulefilterfilterRes Deprecated filterUnitsflood-colorflood-opacityfont-familyfont-sizefont-size-adjustfont-stretchfont-stylefont-variantfont-weightfrfromfxfyg1 Deprecated g2 Deprecated glyph-name Deprecated glyph-orientation-horizontal Deprecated glyph-orientation-vertical Deprecated gradientTransformgradientUnitshanging Deprecated heighthoriz-adv-x Deprecated horiz-origin-x Deprecated horiz-origin-y Deprecated hrefidideographic Deprecated image-renderinginin2interceptk Deprecated k1k2k3k4kernelMatrixkernelUnitLengthkerning Deprecated keyPointskeySplineskeyTimeslanglengthAdjustletter-spacinglighting-colorlimitingConeAnglemarker-endmarker-midmarker-startmarkerHeightmarkerUnitsmarkerWidthmaskmaskContentUnitsmaskUnitsmathematical Deprecated maxmediamethod Experimental minmodename Deprecated numOctavesonclickopacityoperatororderorientorientation Deprecated originoverflowoverline-positionoverline-thicknesspaint-orderpanose-1 Deprecated pathpathLengthpatternContentUnitspatternTransformpatternUnitspointer-eventspointspointsAtXpointsAtYpointsAtZpreserveAlphapreserveAspectRatioprimitiveUnitsrradiusrefXrefYrepeatCountrepeatDurrequiredFeatures Deprecated restartresultrotate Experimental rxryscaleseedshape-renderingside Experimental slope Deprecated spacingspecularConstantspecularExponentspreadMethodstartOffsetstdDeviationstemh Deprecated stemv Deprecated stitchTilesstop-colorstop-opacitystrikethrough-positionstrikethrough-thicknessstring Deprecated strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthstylesurfaceScaleSVG attribute: crossoriginSVG Conditional Processing AttributesSVG Core AttributesSVG Event AttributesSVG Presentation AttributesSVG Styling AttributessystemLanguagetabindextableValuestargettargetXtargetYtext-anchortext-decorationtext-renderingtextLengthtotransformtransform-origintypeu1 Deprecated u2 Deprecated underline-positionunderline-thicknessunicode Deprecated unicode-bidiunicode-range Deprecated units-per-em Deprecated v-alphabetic Deprecated v-hanging Deprecated v-ideographic Deprecated v-mathematical Deprecated valuesvector-effectversion Deprecated vert-adv-y Deprecated vert-origin-x Deprecated vert-origin-y Deprecated viewBoxviewTarget Deprecated visibilitywidthwidths Deprecated word-spacingwriting-modexx-height Deprecated x1x2xChannelSelectorxlink:arcrole Deprecated xlink:href Deprecated xlink:show Deprecated xlink:title Deprecated xlink:type Deprecated xml:base Deprecated xml:lang Deprecated xml:space Deprecated yy1y2yChannelSelectorzzoomAndPan Deprecated Guides Applying SVG effects to HTML content Content type Namespaces crash course SVG animation with SMIL SVG as an Image In this articleIntroducing SVG from ScratchScripting SVG with JavaScriptSVG filters tutorialAnimations with SMIL in SVGCreating fonts in SVGSVG TutorialScalable Vector Graphics, SVG, is a W3C XML dialect to mark up graphics. This tutorial aims to explain the internals of SVG and is packed with technical details. If you just want to draw beautiful images, you might find more useful resources at Inkscape's documentation page. Another good introduction to SVG is provided by the W3C's SVG Primer.Introducing SVG from Scratch Introduction Getting Started Positions Basic Shapes Paths Fills and Strokes Gradients Patterns Texts Basic Transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG Image tag Tools for SVG SVG and CSS The following topics are more advanced and hence should get their own tutorials.Scripting SVG with JavaScriptTBDSVG filters tutorialTBDAnimations with SMIL in SVGTBDCreating fonts in SVGTBDFound a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
130,developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value,"developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value. Set-Cookie - HTTP | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTTPHTTP headersSet-CookieArticle ActionsEnglish (US)In this articleSyntaxAttributesExamplesSpecificationsBrowser compatibilitySee also HTTP Guides Resources and URIs Identifying resources on the Web Data URLs Introduction to MIME types Common MIME types Choosing between www and non-www URLs  HTTP guide Basics of HTTP Overview of HTTP Evolution of HTTP HTTP Messages A typical HTTP session Connection management in HTTP/1.x Protocol upgrade mechanism  HTTP security Content Security Policy (CSP) HTTP Strict Transport Security (HSTS) Cookie security X-Content-Type-Options X-Frame-Options X-XSS-Protection Mozilla web security guidelines Mozilla Observatory HTTP access control (CORS) HTTP authentication HTTP caching HTTP compression HTTP conditional requests HTTP content negotiation HTTP cookies HTTP range requests HTTP redirects HTTP specifications Permissions Policy References HTTP headers AcceptAccept-CHAccept-CH-Lifetime Non-standard Deprecated Accept-CharsetAccept-EncodingAccept-LanguageAccept-PatchAccept-PostAccept-RangesAccess-Control-Allow-CredentialsAccess-Control-Allow-HeadersAccess-Control-Allow-MethodsAccess-Control-Allow-OriginAccess-Control-Expose-HeadersAccess-Control-Max-AgeAccess-Control-Request-HeadersAccess-Control-Request-MethodAgeAllowAlt-SvcAuthorizationCache-ControlClear-Site-DataConnectionContent-DispositionContent-DPR Non-standard Deprecated Content-EncodingContent-LanguageContent-LengthContent-LocationContent-RangeContent-Security-PolicyContent-Security-Policy-Report-OnlyContent-TypeCookieCritical-CH Experimental Cross-Origin-Embedder-PolicyCross-Origin-Opener-PolicyCross-Origin-Resource-PolicyDateDevice-Memory Experimental Digest Deprecated DNT Deprecated Downlink Experimental DPR Non-standard Deprecated Early-Data Experimental ECT Experimental ETagExpectExpect-CTExpiresForwardedFromHostIf-MatchIf-Modified-SinceIf-None-MatchIf-RangeIf-Unmodified-SinceKeep-AliveLarge-Allocation Non-standard Deprecated Last-ModifiedLinkLocationMax-ForwardsNEL Experimental OriginPermissions-PolicyPragma Deprecated Proxy-AuthenticateProxy-AuthorizationRangeRefererReferrer-PolicyRetry-AfterRTT Experimental Save-Data Experimental Sec-CH-Prefers-Reduced-Motion Experimental Sec-CH-UA Experimental Sec-CH-UA-Arch Experimental Sec-CH-UA-Bitness Experimental Sec-CH-UA-Full-Version Deprecated Sec-CH-UA-Full-Version-List Experimental Sec-CH-UA-Mobile Experimental Sec-CH-UA-Model Experimental Sec-CH-UA-Platform Experimental Sec-CH-UA-Platform-Version Experimental Sec-Fetch-DestSec-Fetch-ModeSec-Fetch-SiteSec-Fetch-UserSec-GPC Experimental Sec-WebSocket-AcceptServerServer-TimingService-Worker-Navigation-PreloadSet-CookieSourceMapStrict-Transport-SecurityTETiming-Allow-OriginTk Deprecated TrailerTransfer-EncodingUpgradeUpgrade-Insecure-RequestsUser-AgentVaryViaViewport-Width Non-standard Deprecated Want-Digest Deprecated Warning Deprecated Width Non-standard Deprecated WWW-AuthenticateX-Content-Type-OptionsX-DNS-Prefetch-Control Non-standard X-Forwarded-For Non-standard X-Forwarded-Host Non-standard X-Forwarded-Proto Non-standard X-Frame-OptionsX-XSS-Protection Non-standard  HTTP request methods CONNECTDELETEGETHEADOPTIONSPATCHPOSTPUTTRACE  HTTP response status codes 100 Continue101 Switching Protocols102 Processing103 Early Hints Experimental 200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content207 Multi-Status208 Already Reported226 IM Used300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified307 Temporary Redirect308 Permanent Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Timeout409 Conflict410 Gone411 Length Required412 Precondition Failed413 Content Too Large414 URI Too Long415 Unsupported Media Type416 Range Not Satisfiable417 Expectation Failed418 I'm a teapot421 Misdirected Request422 Unprocessable Content423 Locked424 Failed Dependency425 Too Early426 Upgrade Required428 Precondition Required429 Too Many Requests431 Request Header Fields Too Large451 Unavailable For Legal Reasons500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Timeout505 HTTP Version Not Supported506 Variant Also Negotiates507 Insufficient Storage508 Loop Detected510 Not Extended511 Network Authentication Required  CSP directives CSP source valuesCSP: base-uriCSP: block-all-mixed-content Deprecated CSP: child-srcCSP: connect-srcCSP: default-srcCSP: font-srcCSP: form-actionCSP: frame-ancestorsCSP: frame-srcCSP: img-srcCSP: manifest-srcCSP: media-srcCSP: object-srcCSP: plugin-types Non-standard Deprecated CSP: prefetch-src Non-standard Deprecated CSP: referrer Non-standard Deprecated CSP: report-toCSP: report-uri Deprecated CSP: require-trusted-types-for Experimental CSP: sandboxCSP: script-srcCSP: script-src-attrCSP: script-src-elemCSP: style-srcCSP: style-src-attrCSP: style-src-elemCSP: trusted-types Experimental CSP: upgrade-insecure-requestsCSP: worker-src  CORS errors Reason: CORS disabledReason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'Reason: CORS header 'Access-Control-Allow-Origin' missingReason: CORS header 'Origin' cannot be addedReason: CORS preflight channel did not succeedReason: CORS request did not succeedReason: CORS request external redirect not allowedReason: CORS request not HTTPReason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channelReason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed  Permissions-Policy directives Permissions-Policy: accelerometer Experimental Permissions-Policy: ambient-light-sensor Experimental Permissions-Policy: autoplay Experimental Permissions-Policy: battery Experimental Permissions-Policy: cameraPermissions-Policy: display-capturePermissions-Policy: document-domain Experimental Permissions-Policy: encrypted-media Experimental Permissions-Policy: execution-while-not-rendered Experimental Permissions-Policy: execution-while-out-of-viewport Experimental Permissions-Policy: fullscreenPermissions-Policy: gamepad Experimental Permissions-Policy: geolocationPermissions-Policy: gyroscope Experimental Permissions-Policy: hid Experimental Permissions-Policy: identity-credentials-get Experimental Permissions-Policy: idle-detection Experimental Permissions-Policy: local-fonts Experimental Permissions-Policy: magnetometer Experimental Permissions-Policy: microphonePermissions-Policy: midi Experimental Permissions-Policy: payment Experimental Permissions-Policy: picture-in-picture Experimental Permissions-Policy: publickey-credentials-create Experimental Permissions-Policy: publickey-credentials-get Experimental Permissions-Policy: screen-wake-lock Experimental Permissions-Policy: serial Experimental Permissions-Policy: speaker-selection Experimental Permissions-Policy: storage-access Experimental Permissions-Policy: usb Experimental Permissions-Policy: web-sharePermissions-Policy: xr-spatial-tracking Experimental  In this articleSyntaxAttributesExamplesSpecificationsBrowser compatibilitySee alsoSet-Cookie The Set-Cookie HTTP response header is used to send a cookie from the server to the user agent, so that the user agent can send it back to the server later. To send multiple cookies, multiple Set-Cookie headers should be sent in the same response. Warning: Browsers block frontend JavaScript code from accessing the Set-Cookie header, as required by the Fetch spec, which defines Set-Cookie as a forbidden response-header name that must be filtered out from any response exposed to frontend code. For more information, see the guide on Using HTTP cookies. Header type Response header Forbidden header name no Forbidden response header name yes SyntaxSet-Cookie: <cookie-name>=<cookie-value> Set-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value> Set-Cookie: <cookie-name>=<cookie-value>; Expires=<date> Set-Cookie: <cookie-name>=<cookie-value>; HttpOnly Set-Cookie: <cookie-name>=<cookie-value>; Max-Age=<number> Set-Cookie: <cookie-name>=<cookie-value>; Partitioned Set-Cookie: <cookie-name>=<cookie-value>; Path=<path-value> Set-Cookie: <cookie-name>=<cookie-value>; Secure Set-Cookie: <cookie-name>=<cookie-value>; SameSite=Strict Set-Cookie: <cookie-name>=<cookie-value>; SameSite=Lax Set-Cookie: <cookie-name>=<cookie-value>; SameSite=None; Secure // Multiple attributes are also possible, for example: Set-Cookie: <cookie-name>=<cookie-value>; Domain=<domain-value>; Secure; HttpOnly Attributes <cookie-name>=<cookie-value>   Defines the cookie name and its value.  A cookie definition begins with a name-value pair.  A <cookie-name> can contain any US-ASCII characters except for: control characters (ASCII characters 0 up to 31 and ASCII character 127) or separator characters (space, tab and the characters: ( ) < > @ , ; : \ "" / [ ] ? = { }) A <cookie-value> can optionally be wrapped in double quotes and include any US-ASCII character excluding control characters (ASCII characters 0 up to 31 and ASCII character 127), Whitespace, double quotes, commas, semicolons, and backslashes. Encoding: Many implementations perform URL encoding on cookie values.  However, this is not required by the RFC specification.  The URL encoding does help to satisfy the requirements of the characters allowed for <cookie-value>.  Note: Some <cookie-name> have a specific semantic: __Secure- prefix: Cookies with names starting with __Secure- (dash is part of the prefix)   must be set with the secure flag from a secure page (HTTPS).  __Host- prefix: Cookies with names starting with __Host- must be set with the secure flag, must be from a secure page (HTTPS), must not have a domain specified (and therefore, are not sent to subdomains), and the path must be /. Domain=<domain-value> Optional Defines the host to which the cookie will be sent. Only the current domain can be set as the value, or a domain of a higher order, unless it is a public suffix. Setting the domain will make the cookie available to it, as well as to all its subdomains. If omitted, this attribute defaults to the host of the current document URL, not including subdomains. Contrary to earlier specifications, leading dots in domain names (.example.com) are ignored. Multiple host/domain values are not allowed, but if a domain is specified, then subdomains are always included. Expires=<date> Optional   Indicates the maximum lifetime of the cookie as an HTTP-date timestamp.  See Date for the required formatting.    If unspecified, the cookie becomes a session cookie.  A session finishes when the client shuts down, after which  the session cookie is removed.  Warning: Many web browsers have a session restore feature that will save all tabs and restore them the next time the browser is used. Session cookies will also be restored, as if the browser was never closed. When an Expires date is set, the deadline is relative to the client the cookie is being set on, not the server. HttpOnly Optional   Forbids JavaScript from accessing the cookie, for example, through the Document.cookie property.  Note that a cookie that has been created with HttpOnly will still be sent with JavaScript-initiated requests, for example, when calling XMLHttpRequest.send() or fetch().  This mitigates attacks against cross-site scripting (XSS).  Max-Age=<number> Optional Indicates the number of seconds until the cookie expires. A zero or negative number will expire the cookie immediately. If both Expires and Max-Age are set, Max-Age has precedence. Partitioned Optional Experimental Indicates that the cookie should be stored using partitioned storage. See Cookies Having Independent Partitioned State (CHIPS) for more details. Path=<path-value> Optional Indicates the path that must exist in the requested URL for the browser to send the Cookie header. The forward slash (/) character is interpreted as a directory separator, and subdirectories are matched as well. For example, for Path=/docs, the request paths /docs, /docs/, /docs/Web/, and /docs/Web/HTTP will all match. the request paths /, /docsets, /fr/docs will not match. SameSite=<samesite-value> Optional   Controls whether or not a cookie is sent with cross-site requests,  providing some protection against cross-site request forgery attacks (CSRF).  The possible attribute values are: Strict    Means that the browser sends the cookie only for same-site requests, that is, requests originating from the same site that set the cookie.   If a request originates from a different domain or scheme (even with the same domain), no cookies with the SameSite=Strict attribute are sent.   Lax    Means that the cookie is not sent on cross-site requests, such as on requests to load images or frames, but is sent when a user is navigating to the origin site from an external site (for example, when following a link).   This is the default behavior if the SameSite attribute is not specified.   None    means that the browser sends the cookie with both cross-site and same-site requests.   The Secure attribute must also be set when setting this value, like so SameSite=None; Secure. If Secure is missing an error will be logged:   Cookie ""myCookie"" rejected because it has the ""SameSite=None"" attribute but is missing the ""secure"" attribute. This Set-Cookie was blocked because it had the ""SameSite=None"" attribute but did not have the ""Secure"" attribute, which is required in order to use ""SameSite=None"". Note: A Secure cookie is only sent to the server with an encrypted request over the HTTPS protocol. Note that insecure sites (http:) can't set cookies with the Secure directive, and therefore can't use SameSite=None.  Secure Optional Indicates that the cookie is sent to the server only when a request is made with the https: scheme (except on localhost), and therefore, is more resistant to man-in-the-middle attacks. Note: Do not assume that Secure prevents all access to sensitive information in cookies (session keys, login details, etc.). Cookies with this attribute can still be read/modified either with access to the client's hard disk or from JavaScript if the HttpOnly cookie attribute is not set. Insecure sites (http:) cannot set cookies with the Secure attribute (since Chrome 52 and Firefox 52). For Firefox, the https: requirements are ignored when the Secure attribute is set by localhost (since Firefox 75). ExamplesSession cookieSession cookies are removed when the client shuts down. Cookies are session cookies if they do not specify the Expires or Max-Age attribute. Set-Cookie: sessionId=38afes7a8 Permanent cookiePermanent cookies are removed at a specific date (Expires) or after a specific length of time (Max-Age) and not when the client is closed. Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT Set-Cookie: id=a3fWa; Max-Age=2592000 Invalid domainsA cookie for a domain that does not include the server that set it should be rejected by the user agent. The following cookie will be rejected if set by a server hosted on originalcompany.com: Set-Cookie: qwerty=219ffwef9w0f; Domain=somecompany.co.uk A cookie for a subdomain of the serving domain will be rejected. The following cookie will be rejected if set by a server hosted on example.com: Set-Cookie: sessionId=e8bb43229de9; Domain=foo.example.com Cookie prefixesCookie names prefixed with __Secure- or __Host- can be used only if they are set with the secure attribute from a secure (HTTPS) origin. In addition, cookies with the __Host- prefix must have a path of / (meaning any path at the host) and must not have a Domain attribute. Warning: For clients that don't implement cookie prefixes, you cannot count on these additional assurances, and prefixed cookies will always be accepted. // Both accepted when from a secure origin (HTTPS) Set-Cookie: __Secure-ID=123; Secure; Domain=example.com Set-Cookie: __Host-ID=123; Secure; Path=/ // Rejected due to missing Secure attribute Set-Cookie: __Secure-id=1 // Rejected due to the missing Path=/ attribute Set-Cookie: __Host-id=1; Secure // Rejected due to setting a Domain Set-Cookie: __Host-id=1; Secure; Path=/; Domain=example.com Partitioned cookieSet-Cookie: __Host-example=34d8g; SameSite=None; Secure; Path=/; Partitioned; Note: Partitioned cookies must be set with Secure and Path=/. In addition, it is recommended to use the __Host prefix when setting partitioned cookies to make them bound to the hostname and not the registrable domain. SpecificationsSpecificationHTTP State Management Mechanism # sane-set-cookieBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Compatibility notes Starting with Chrome 52 and Firefox 52, insecure sites (http:) can't set cookies with the Secure attribute anymore. See also HTTP cookies Cookie Document.cookie Samesite cookies explained (web.dev blog) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
131,developer.mozilla.org/en-US/docs/Web/API/Node/contains,"developer.mozilla.org/en-US/docs/Web/API/Node/contains. Node: contains() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodecontains()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains() getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: contains() method The contains() method of the Node interface returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on. Note: A node is contained inside itself. Syntaxcontains(otherNode) Parameters otherNode The Node to test with. Note: otherNode is not optional, but can be set to null. Return value A boolean value that is true if otherNode is contained in the node, false if not.  If the otherNode parameter is null, contains() always returns false. Example This function checks to see if an element is in the page's body. As contains is inclusive and determining if the body contains itself isn't the intention of isInPage this case explicitly returns false. function isInPage(node) { return node === document.body ? false : document.body.contains(node); } SpecificationsSpecificationDOM Standard # ref-for-dom-node-containsâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.compareDocumentPosition Node.hasChildNodes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
132,developer.mozilla.org/en-US/docs/Web/API/Text/splitText,"developer.mozilla.org/en-US/docs/Web/API/Text/splitText. Text: splitText() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsTextsplitText()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelTextConstructorText()Instance propertiesassignedSlotwholeTextInstance methodssplitText() Inheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoText: splitText() method The splitText() method of the Text interface breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.  After the split, the current node contains all the content up to the specified offset point, and a newly created node of the same type contains the remaining text. The newly created node is returned to the caller. If the original node had a parent, the new node is inserted as the next sibling of the original node. If the offset is equal to the length of the original node, the newly created node has no data.  Separated text nodes can be concatenated using the Node.normalize() method. SyntaxnewNode = textNode.splitText(offset) Parameters offset The index immediately before which to break the text node. Return value Returns the newly created Text node that contains the text after the specified offset point. Exceptions IndexSizeError DOMException   Thrown if the specified offset is negative or is greater  than the number of 16-bit units in the node's text.  NoModificationAllowedError DOMException Thrown if the node is read-only. Example In this example, the text of a <p> is split into two text nodes, and a <u> is inserted between them. <p>foobar</p> const p = document.querySelector(""p""); // Get contents of <p> as a text node const foobar = p.firstChild; // Split 'foobar' into two text nodes, 'foo' and 'bar', // and save 'bar' as a const const bar = foobar.splitText(3); // Create a <u> element containing ' new content ' const u = document.createElement(""u""); u.appendChild(document.createTextNode("" new content "")); // Add <u> before 'bar' p.insertBefore(u, bar); // The result is: <p>foo<u> new content </u>bar</p> SpecificationsSpecificationDOM Standard # ref-for-dom-text-splittextâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The Text interface it belongs to. The opposite method: Node.normalize. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
133,developer.mozilla.org/en-US/docs/Web/API/Canvas/API/Tutorial/Compositing,"developer.mozilla.org/en-US/docs/Web/API/Canvas/API/Tutorial/Compositing. Compositing and clipping - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvas APICanvas tutorialCompositing and clippingArticle ActionsEnglish (US)In this articleglobalCompositeOperationClipping pathsCanvas APIGuidesManipulating video using canvasTutorialCanvas tutorialBasic usage of canvasDrawing shapes with canvasApplying styles and colorsDrawing textUsing imagesTransformationsCompositing and clippingBasic animationsAdvanced animationsPixel manipulation with canvasOptimizing canvasFinaleInterfacesCanvasGradientCanvasPatternCanvasRenderingContext2DHTMLCanvasElementImageBitmapImageBitmapRenderingContextImageDataOffscreenCanvasPath2DTextMetricsMethodscreateImageBitmapIn this articleglobalCompositeOperationClipping pathsCompositing and clipping Â« Previous Next Â» In all of our previous examples, shapes were always drawn one on top of the other. This is more than adequate for most situations, but it limits the order in which composite shapes are built. We can, however, change this behavior by setting the globalCompositeOperation property. In addition, the clip property allows us to hide unwanted parts of shapes.globalCompositeOperationWe can not only draw new shapes behind existing shapes but we can also use it to mask off certain areas, clear sections from the canvas (not limited to rectangles like the clearRect() method does) and more. globalCompositeOperation = type This sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the twelve compositing operations to use. See compositing examples for the code of the following examples.Clipping pathsA clipping path is like a normal canvas shape but it acts as a mask to hide unwanted parts of shapes. This is visualized in the image below. The red star shape is our clipping path. Everything that falls outside of this path won't get drawn on the canvas. If we compare clipping paths to the globalCompositeOperation property we've seen above, we see two compositing modes that achieve more or less the same effect in source-in and source-atop. The most important differences between the two are that clipping paths are never actually drawn to the canvas and the clipping path is never affected by adding new shapes. This makes clipping paths ideal for drawing multiple shapes in a restricted area. In the chapter about drawing shapes I only mentioned the stroke() and fill() methods, but there's a third method we can use with paths, called clip(). clip() Turns the path currently being built into the current clipping path. You use clip() instead of closePath() to close a path and turn it into a clipping path instead of stroking or filling the path. By default the <canvas> element has a clipping path that's the exact same size as the canvas itself. In other words, no clipping occurs.A clip exampleIn this example, we'll use a circular clipping path to restrict the drawing of a set of random stars to a particular region. function draw() { const ctx = document.getElementById(""canvas"").getContext(""2d""); ctx.fillRect(0, 0, 150, 150); ctx.translate(75, 75); // Create a circular clipping path ctx.beginPath(); ctx.arc(0, 0, 60, 0, Math.PI * 2, true); ctx.clip(); // draw background const lingrad = ctx.createLinearGradient(0, -75, 0, 75); lingrad.addColorStop(0, ""#232256""); lingrad.addColorStop(1, ""#143778""); ctx.fillStyle = lingrad; ctx.fillRect(-75, -75, 150, 150); // draw stars for (let j = 1; j < 50; j++) {  ctx.save();  ctx.fillStyle = ""#fff"";  ctx.translate(  75 - Math.floor(Math.random() * 150),  75 - Math.floor(Math.random() * 150)  );  drawStar(ctx, Math.floor(Math.random() * 4) + 2);  ctx.restore(); } } function drawStar(ctx, r) { ctx.save(); ctx.beginPath(); ctx.moveTo(r, 0); for (let i = 0; i < 9; i++) {  ctx.rotate(Math.PI / 5);  if (i % 2 === 0) {  ctx.lineTo((r / 0.525731) * 0.200811, 0);  } else {  ctx.lineTo(r, 0);  } } ctx.closePath(); ctx.fill(); ctx.restore(); } <canvas id=""canvas"" width=""150"" height=""150""></canvas> draw(); In the first few lines of code, we draw a black rectangle the size of the canvas as a backdrop, then translate the origin to the center. Next, we create the circular clipping path by drawing an arc and calling clip(). Clipping paths are also part of the canvas save state. If we wanted to keep the original clipping path we could have saved the canvas state before creating the new one. Everything that's drawn after creating the clipping path will only appear inside that path. You can see this clearly in the linear gradient that's drawn next. After this a set of 50 randomly positioned and scaled stars is drawn, using the custom drawStar() function. Again the stars only appear inside the defined clipping path.ScreenshotLive sample Â« Previous Next Â» Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
134,developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes,"developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes. Node: hasChildNodes() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodehasChildNodes()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes() insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: hasChildNodes() method The hasChildNodes() method of the Node interface returns a boolean value indicating whether the given Node has child nodes or not. SyntaxhasChildNodes() ParametersNone.Return value A boolean value that is true if the node has child nodes, and false otherwise. Examplelet foo = document.getElementById(""foo""); if (foo.hasChildNodes()) { // Do something with 'foo.childNodes' } SpecificationsSpecificationDOM Standard # ref-for-dom-node-haschildnodesâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.childNodes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
135,developer.mozilla.org/en-US/docs/Web/API/Node/normalize,"developer.mozilla.org/en-US/docs/Web/API/Node/normalize. Node: normalize() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodenormalize()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize() removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: normalize() method The normalize() method of the Node interface puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes. Syntaxnormalize() ParametersNone.Return valueNone.Example<output id=""result""></output> const wrapper = document.createElement(""div""); wrapper.appendChild(document.createTextNode(""Part 1 "")); wrapper.appendChild(document.createTextNode(""Part 2 "")); let node = wrapper.firstChild; let result = ""Before normalization:<br/>""; while (node) { result += ` ${node.nodeName}: ${node.nodeValue}<br/>`; node = node.nextSibling; } wrapper.normalize(); node = wrapper.firstChild; result += ""<br/><br/>After normalization:<br/>""; while (node) { result += ` ${node.nodeName}: ${node.nodeValue}<br/>`; node = node.nextSibling; } const output = document.getElementById(""result""); output.innerHTML = result; SpecificationsSpecificationDOM Standard # ref-for-dom-node-normalizeâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Text.splitText(), its opposite. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
136,developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site,"developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Site. Sec-Fetch-Site - HTTP | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTTPHTTP headersSec-Fetch-SiteArticle ActionsEnglish (US)In this articleSyntaxDirectivesExamplesSpecificationsBrowser compatibilitySee also HTTP Guides Resources and URIs Identifying resources on the Web Data URLs Introduction to MIME types Common MIME types Choosing between www and non-www URLs  HTTP guide Basics of HTTP Overview of HTTP Evolution of HTTP HTTP Messages A typical HTTP session Connection management in HTTP/1.x Protocol upgrade mechanism  HTTP security Content Security Policy (CSP) HTTP Strict Transport Security (HSTS) Cookie security X-Content-Type-Options X-Frame-Options X-XSS-Protection Mozilla web security guidelines Mozilla Observatory HTTP access control (CORS) HTTP authentication HTTP caching HTTP compression HTTP conditional requests HTTP content negotiation HTTP cookies HTTP range requests HTTP redirects HTTP specifications Permissions Policy References HTTP headers AcceptAccept-CHAccept-CH-Lifetime Non-standard Deprecated Accept-CharsetAccept-EncodingAccept-LanguageAccept-PatchAccept-PostAccept-RangesAccess-Control-Allow-CredentialsAccess-Control-Allow-HeadersAccess-Control-Allow-MethodsAccess-Control-Allow-OriginAccess-Control-Expose-HeadersAccess-Control-Max-AgeAccess-Control-Request-HeadersAccess-Control-Request-MethodAgeAllowAlt-SvcAuthorizationCache-ControlClear-Site-DataConnectionContent-DispositionContent-DPR Non-standard Deprecated Content-EncodingContent-LanguageContent-LengthContent-LocationContent-RangeContent-Security-PolicyContent-Security-Policy-Report-OnlyContent-TypeCookieCritical-CH Experimental Cross-Origin-Embedder-PolicyCross-Origin-Opener-PolicyCross-Origin-Resource-PolicyDateDevice-Memory Experimental Digest Deprecated DNT Deprecated Downlink Experimental DPR Non-standard Deprecated Early-Data Experimental ECT Experimental ETagExpectExpect-CTExpiresForwardedFromHostIf-MatchIf-Modified-SinceIf-None-MatchIf-RangeIf-Unmodified-SinceKeep-AliveLarge-Allocation Non-standard Deprecated Last-ModifiedLinkLocationMax-ForwardsNEL Experimental OriginPermissions-PolicyPragma Deprecated Proxy-AuthenticateProxy-AuthorizationRangeRefererReferrer-PolicyRetry-AfterRTT Experimental Save-Data Experimental Sec-CH-Prefers-Reduced-Motion Experimental Sec-CH-UA Experimental Sec-CH-UA-Arch Experimental Sec-CH-UA-Bitness Experimental Sec-CH-UA-Full-Version Deprecated Sec-CH-UA-Full-Version-List Experimental Sec-CH-UA-Mobile Experimental Sec-CH-UA-Model Experimental Sec-CH-UA-Platform Experimental Sec-CH-UA-Platform-Version Experimental Sec-Fetch-DestSec-Fetch-ModeSec-Fetch-SiteSec-Fetch-UserSec-GPC Experimental Sec-WebSocket-AcceptServerServer-TimingService-Worker-Navigation-PreloadSet-CookieSourceMapStrict-Transport-SecurityTETiming-Allow-OriginTk Deprecated TrailerTransfer-EncodingUpgradeUpgrade-Insecure-RequestsUser-AgentVaryViaViewport-Width Non-standard Deprecated Want-Digest Deprecated Warning Deprecated Width Non-standard Deprecated WWW-AuthenticateX-Content-Type-OptionsX-DNS-Prefetch-Control Non-standard X-Forwarded-For Non-standard X-Forwarded-Host Non-standard X-Forwarded-Proto Non-standard X-Frame-OptionsX-XSS-Protection Non-standard  HTTP request methods CONNECTDELETEGETHEADOPTIONSPATCHPOSTPUTTRACE  HTTP response status codes 100 Continue101 Switching Protocols102 Processing103 Early Hints Experimental 200 OK201 Created202 Accepted203 Non-Authoritative Information204 No Content205 Reset Content206 Partial Content207 Multi-Status208 Already Reported226 IM Used300 Multiple Choices301 Moved Permanently302 Found303 See Other304 Not Modified307 Temporary Redirect308 Permanent Redirect400 Bad Request401 Unauthorized402 Payment Required403 Forbidden404 Not Found405 Method Not Allowed406 Not Acceptable407 Proxy Authentication Required408 Request Timeout409 Conflict410 Gone411 Length Required412 Precondition Failed413 Content Too Large414 URI Too Long415 Unsupported Media Type416 Range Not Satisfiable417 Expectation Failed418 I'm a teapot421 Misdirected Request422 Unprocessable Content423 Locked424 Failed Dependency425 Too Early426 Upgrade Required428 Precondition Required429 Too Many Requests431 Request Header Fields Too Large451 Unavailable For Legal Reasons500 Internal Server Error501 Not Implemented502 Bad Gateway503 Service Unavailable504 Gateway Timeout505 HTTP Version Not Supported506 Variant Also Negotiates507 Insufficient Storage508 Loop Detected510 Not Extended511 Network Authentication Required  CSP directives CSP source valuesCSP: base-uriCSP: block-all-mixed-content Deprecated CSP: child-srcCSP: connect-srcCSP: default-srcCSP: font-srcCSP: form-actionCSP: frame-ancestorsCSP: frame-srcCSP: img-srcCSP: manifest-srcCSP: media-srcCSP: object-srcCSP: plugin-types Non-standard Deprecated CSP: prefetch-src Non-standard Deprecated CSP: referrer Non-standard Deprecated CSP: report-toCSP: report-uri Deprecated CSP: require-trusted-types-for Experimental CSP: sandboxCSP: script-srcCSP: script-src-attrCSP: script-src-elemCSP: style-srcCSP: style-src-attrCSP: style-src-elemCSP: trusted-types Experimental CSP: upgrade-insecure-requestsCSP: worker-src  CORS errors Reason: CORS disabledReason: CORS header 'Access-Control-Allow-Origin' does not match 'xyz'Reason: CORS header 'Access-Control-Allow-Origin' missingReason: CORS header 'Origin' cannot be addedReason: CORS preflight channel did not succeedReason: CORS request did not succeedReason: CORS request external redirect not allowedReason: CORS request not HTTPReason: Credential is not supported if the CORS header 'Access-Control-Allow-Origin' is '*'Reason: Did not find method in CORS header 'Access-Control-Allow-Methods'Reason: expected 'true' in CORS header 'Access-Control-Allow-Credentials'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Headers'Reason: invalid token 'xyz' in CORS header 'Access-Control-Allow-Methods'Reason: missing token 'xyz' in CORS header 'Access-Control-Allow-Headers' from CORS preflight channelReason: Multiple CORS header 'Access-Control-Allow-Origin' not allowed  Permissions-Policy directives Permissions-Policy: accelerometer Experimental Permissions-Policy: ambient-light-sensor Experimental Permissions-Policy: autoplay Experimental Permissions-Policy: battery Experimental Permissions-Policy: cameraPermissions-Policy: display-capturePermissions-Policy: document-domain Experimental Permissions-Policy: encrypted-media Experimental Permissions-Policy: execution-while-not-rendered Experimental Permissions-Policy: execution-while-out-of-viewport Experimental Permissions-Policy: fullscreenPermissions-Policy: gamepad Experimental Permissions-Policy: geolocationPermissions-Policy: gyroscope Experimental Permissions-Policy: hid Experimental Permissions-Policy: identity-credentials-get Experimental Permissions-Policy: idle-detection Experimental Permissions-Policy: local-fonts Experimental Permissions-Policy: magnetometer Experimental Permissions-Policy: microphonePermissions-Policy: midi Experimental Permissions-Policy: payment Experimental Permissions-Policy: picture-in-picture Experimental Permissions-Policy: publickey-credentials-create Experimental Permissions-Policy: publickey-credentials-get Experimental Permissions-Policy: screen-wake-lock Experimental Permissions-Policy: serial Experimental Permissions-Policy: speaker-selection Experimental Permissions-Policy: storage-access Experimental Permissions-Policy: usb Experimental Permissions-Policy: web-sharePermissions-Policy: xr-spatial-tracking Experimental  In this articleSyntaxDirectivesExamplesSpecificationsBrowser compatibilitySee alsoSec-Fetch-SiteThe Sec-Fetch-Site fetch metadata request header indicates the relationship between a request initiator's origin and the origin of the requested resource. In other words, this header tells a server whether a request for a resource is coming from the same origin, the same site, a different site, or is a ""user initiated"" request. The server can then use this information to decide if the request should be allowed. Same-origin requests would usually be allowed by default, but what happens for requests from other origins may further depend on what resource is being requested, or information in other Fetch metadata request headers. By default, requests that are not accepted should be rejected with a 403 response code. Header type Fetch Metadata Request Header Forbidden header name yes (prefix Sec-) CORS-safelisted request header no SyntaxSec-Fetch-Site: cross-site Sec-Fetch-Site: same-origin Sec-Fetch-Site: same-site Sec-Fetch-Site: none Directives cross-site The request initiator and the server hosting the resource have a different site (i.e. a request by ""potentially-evil.com"" for a resource at ""example.com""). same-origin The request initiator and the server hosting the resource have the same origin (same scheme, host and port). same-site The request initiator and the server hosting the resource have the same scheme, domain and/or subdomain, but not necessarily the same port. none This request is a user-originated operation. For example: entering a URL into the address bar, opening a bookmark, or dragging-and-dropping a file into the browser window. Examples A fetch request to https://mysite.example/foo.json originating from a web page on https://mysite.example (with the same port) is a same-origin request. The browser will generate the Sec-Fetch-Site: same-origin header as shown below, and the server will typically allow the request: GET /foo.json Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: same-origin A fetch request to the same URL from another site, for example potentially-evil.com, causes the browser to generate a different header (e.g. Sec-Fetch-Site: cross-site), which the server can choose to accept or reject: GET /foo.json Sec-Fetch-Dest: empty Sec-Fetch-Mode: cors Sec-Fetch-Site: cross-site SpecificationsSpecificationFetch Metadata Request Headers # sec-fetch-site-headerBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Related headers  Sec-Fetch-Mode Sec-Fetch-User Sec-Fetch-Dest Protect your resources from web attacks with Fetch Metadata (web.dev) Fetch Metadata Request Headers playground (secmetadata.appspot.com) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
137,developer.mozilla.org/en-US/docs/Web/API/Navigator/ink,"developer.mozilla.org/en-US/docs/Web/API/Navigator/ink. Navigator: ink property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNavigatorinkIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoInk APINavigatorInstance propertiesactiveVRDisplays Non-standard Deprecated appCodeName Deprecated appName Deprecated appVersion Deprecated buildID Non-standard clipboardconnection Experimental contacts Experimental cookieEnabledcredentialsdeviceMemory Experimental doNotTrack Deprecated geolocationglobalPrivacyControl Experimental Non-standard gpu Experimental hardwareConcurrencyhid Experimental ink Experimental keyboard Experimental languagelanguageslocksmaxTouchPointsmediaCapabilitiesmediaDevicesmediaSessionmimeTypes Deprecated onLineoscpu Deprecated pdfViewerEnabledpermissionsplatform Deprecated plugins Deprecated presentationproduct Deprecated productSub Deprecated serial Experimental serviceWorkerstorageuserActivationuserAgentuserAgentData Experimental vendor Deprecated vendorSub Deprecated virtualKeyboard Experimental wakeLockwebdriverwindowControlsOverlayxr Experimental Instance methodscanShare()clearAppBadge()getAutoplayPolicy() Experimental getBattery()getGamepads()getUserMedia() Deprecated getVRDisplays() Non-standard Deprecated javaEnabled() Deprecated registerProtocolHandler()requestMediaKeySystemAccess()requestMIDIAccess()sendBeacon()setAppBadge()share()taintEnabled() Deprecated unregisterProtocolHandler()vibrate()Related pages for Ink APIInkInkPresenterNavigator.inkIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoNavigator: ink propertyExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The ink read-only property of the Navigator interface returns an Ink object for the current document, providing access to Ink API functionality.ValueAn Ink object.Exampleasync function inkInit() { const ink = navigator.ink; let presenter = await ink.requestPresenter({ presentationArea: canvas }); //... } SpecificationsSpecificationInk API # navigator-interface-extensionsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Enhancing Inking on the Web Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
138,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/toString,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/toString. Number.prototype.toString() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsNumberNumber.prototype.toString()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsNumberConstructorNumber() constructorPropertiesNumber.EPSILONNumber.MAX_SAFE_INTEGERNumber.MAX_VALUENumber.MIN_SAFE_INTEGERNumber.MIN_VALUENumber.NaNNumber.NEGATIVE_INFINITYNumber.POSITIVE_INFINITYMethodsNumber.isFinite()Number.isInteger()Number.isNaN()Number.isSafeInteger()Number.parseFloat()Number.parseInt()Number.prototype.toExponential()Number.prototype.toFixed()Number.prototype.toLocaleString()Number.prototype.toPrecision()Number.prototype.toString()Number.prototype.valueOf()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoNumber.prototype.toString()The toString() method returns a string representing the specified number value.Try itSyntaxtoString() toString(radix) Parameters radix Optional An integer in the range 2 through 36 specifying the base to use for representing the number value. Defaults to 10. Return valueA string representing the specified number value.Exceptions RangeError Thrown if radix is less than 2 or greater than 36. Description The Number object overrides the toString method of Object; it does not inherit Object.prototype.toString(). For Number values, the toString method returns a string representation of the value in the specified radix. For radixes above 10, the letters of the alphabet indicate digits greater than 9. For example, for hexadecimal numbers (base 16) a through f are used. If the specified number value is negative, the sign is preserved. This is the case even if the radix is 2; the string returned is the positive binary representation of the number value preceded by a - sign, not the two's complement of the number value. Both 0 and -0 have ""0"" as their string representation. Infinity returns ""Infinity"" and NaN returns ""NaN"". If the number is not a whole number, the decimal point . is used to separate the decimal places. Scientific notation is used if the radix is 10 and the number's magnitude (ignoring sign) is greater than or equal to 1021 or less than 10-6. In this case, the returned string always explicitly specifies the sign of the exponent. console.log((10 ** 21.5).toString()); // ""3.1622776601683794e+21"" console.log((10 ** 21.5).toString(8)); // ""526665530627250154000000"" The toString() method requires its this value to be a Number primitive or wrapper object. It throws a TypeError for other this values without attempting to coerce them to number values. Because Number doesn't have a [@@toPrimitive]() method, JavaScript calls the toString() method automatically when a Number object is used in a context expecting a string, such as in a template literal. However, Number primitive values do not consult the toString() method to be coerced to strings â rather, they are directly converted using the same algorithm as the initial toString() implementation. Number.prototype.toString = () => ""Overridden""; console.log(`${1}`); // ""1"" console.log(`${new Number(1)}`); // ""Overridden"" ExamplesUsing toString()const count = 10; console.log(count.toString()); // ""10"" console.log((17).toString()); // ""17"" console.log((17.2).toString()); // ""17.2"" const x = 6; console.log(x.toString(2)); // ""110"" console.log((254).toString(16)); // ""fe"" console.log((-10).toString(2)); // ""-1010"" console.log((-0xff).toString(2)); // ""-11111111"" Converting radix of number stringsIf you have a string representing a number in a non-decimal radix, you can use parseInt() and toString() to convert it to a different radix. const hex = ""CAFEBABE""; const bin = parseInt(hex, 16).toString(2); // ""11001010111111101011101010111110"" Beware of loss of precision: if the original number string is too large (larger than Number.MAX_SAFE_INTEGER, for example), you should use a BigInt instead. However, the BigInt constructor only has support for strings representing number literals (i.e. strings starting with 0b, 0o, 0x). In case your original radix is not one of binary, octal, decimal, or hexadecimal, you may need to hand-write your radix converter, or use a library.SpecificationsSpecificationECMAScript Language Specification # sec-number.prototype.tostringBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Number.prototype.toFixed() Number.prototype.toExponential() Number.prototype.toPrecision() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
139,developer.mozilla.org/en-US/docs/Web/Security/Insecure/passwords,"developer.mozilla.org/en-US/docs/Web/Security/Insecure/passwords. Insecure passwords - Web security | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb securityInsecure passwordsArticle ActionsEnglish (US)In this articleNote on password reuseSee also Certificate TransparencyFeatures gated by user activationFirefox security guidelinesIFrame credentiallessInsecure passwordsMixed contentMixed contentHow to fix a website with blocked mixed contentReferer header: privacy and security concernsSame-origin policySecure contextsSecure contextsFeatures restricted to secure contextsSecuring your siteSecuring your siteHow to turn off form autocompletionSubdomain takeoversSubresource IntegrityTransport Layer SecurityTypes of attacksWeak signature algorithms In this articleNote on password reuseSee alsoInsecure passwordsServing login forms over HTTP is especially dangerous because of the wide variety of attacks that can be used against them to extract a user's password. Network eavesdroppers could steal a user's password by sniffing the network, or by modifying the served page in transit. The HTTPS protocol is designed to protect user data from eavesdropping (confidentiality) and from modification (integrity) on the network. Websites that handle user data should use HTTPS to protect their users from attackers. If a website uses HTTP instead of HTTPS, it is trivial to steal user information (such as their login credentials). This was famously demonstrated by Firesheep. To fix this issue, install and configure an SSL/TLS certificate onto your server. There are various vendors offering free and paid certificates. If you are using a cloud platform, it may have its own ways of enabling HTTPS.Note on password reuseSometimes websites require username and passwords but don't actually store data that is very sensitive. For example, a news site may save which news articles a user wants to go back to and read, but not save any other data about a user. Web developers of the news site may be less motivated to secure their site and their user credentials. Unfortunately, password reuse is a big problem. Users use the same password across multiple sites (news websites, social networks, email providers, banks). Hence, even if access to the username and password to your site doesn't seem like a huge risk to you, it is a great risk to users who have used the same username and password to log in to their bank accounts. Attackers are getting smarter; they steal username/password pairs from one site and then try reusing them on more lucrative sites.See also No More Passwords over HTTP, Please! â detailed blog post with more information, and FAQ. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 25, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
140,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/prepend,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/prepend. DocumentFragment: prepend() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentprepend()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChildlastElementChildInstance methodsappend()getElementById()prepend() querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: prepend() method The DocumentFragment.prepend() method inserts a set of Node objects or string objects before the first child of the document fragment. String objects are inserted as equivalent Text nodes. This method prepends a child to a DocumentFragment. To prepend to an arbitrary element in the tree, see Element.prepend().Syntaxprepend(param1) prepend(param1, param2) prepend(param1, param2, /* â¦ ,*/ paramN) Parameters param1, â¦, paramN A set of Node or string objects to insert. Return valueNone (undefined).Exceptions HierarchyRequestError DOMException Thrown when the node cannot be inserted at the specified point in the hierarchy. ExamplesPrepending an element to a document fragmentlet fragment = new DocumentFragment(); let div = document.createElement(""div""); let p = document.createElement(""p""); fragment.append(p); fragment.prepend(div); fragment.children; // HTMLCollection [<div>, <p>] SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-prependâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also DocumentFragment.append() Element.prepend() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
141,developer.mozilla.org/en-US/docs/Glossary/General/header,"developer.mozilla.org/en-US/docs/Glossary/General/header. General header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsGeneral headerArticle ActionsEnglish (US)General headerGeneral header is an outdated term used to refer to an HTTP header that can be used in both request and response messages, but which doesn't apply to the content itself (a header that applied to the content was called an entity header). Depending on the context they are used in, general headers might either be response or request headers (e.g. Cache-Control). Note: Current versions of the HTTP/1.1 specification do not specifically categorize headers as ""general headers"". These are now simply referred to as response or request headers depending on context. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
142,developer.mozilla.org/en-US/docs/Glossary/Object,"developer.mozilla.org/en-US/docs/Glossary/Object. Object - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsObjectArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoObjectIn JavaScript, objects can be seen as a collection of properties. With the object literal syntax, a limited set of properties are initialized; then properties can be added and removed. Property values can be values of any type, including other objects, which enables building complex data structures. Properties are identified using key values. A key value is either a String value or a Symbol value. There are two types of object properties: The data property and the accessor property. Note: It's important to recognize it's accessor property â not accessor method. We can give a JavaScript object class-like accessors by using a function as a value â but that doesn't make the object a class. See also Detailed explanation of JavaScript objects in the JavaScript data types and data structures article Object in the JavaScript reference Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
143,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/formnovalidate,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/formnovalidate. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
144,developer.mozilla.org/en-US/docs/Glossary/Simple/header,"developer.mozilla.org/en-US/docs/Glossary/Simple/header. Simple header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSimple headerArticle ActionsEnglish (US)Simple headerOld term for CORS-safelisted request header.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
145,developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements#specifications,"developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements#specifications. Pseudo-elements - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSPseudo-elementsArticle ActionsEnglish (US)In this articleSyntaxAlphabetical indexSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleSyntaxAlphabetical indexSpecificationsBrowser compatibilitySee alsoPseudo-elementsA CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). For example, ::first-line can be used to change the font of the first line of a paragraph. /* The first line of every <p> element. */ p::first-line { color: blue; text-transform: uppercase; } Note: In contrast to pseudo-elements, pseudo-classes can be used to style an element based on its state. Syntaxselector::pseudo-element { property: value; } You can use only one pseudo-element in a selector. It must appear after the simple selectors in the statement. Note: As a rule, double colons (::) should be used instead of a single colon (:). This distinguishes pseudo-classes from pseudo-elements. However, since this distinction was not present in older versions of the W3C spec, most browsers support both syntaxes for the original pseudo-elements. Alphabetical indexPseudo-elements defined by a set of CSS specifications include the following: A ::after B ::backdrop ::before C ::cue ::cue-region F ::first-letter ::first-line ::file-selector-button G ::grammar-error Experimental M ::marker P ::part() ::placeholder S ::selection ::slotted() ::spelling-error Experimental T ::target-text Experimental SpecificationsSpecificationCascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification # pseudo-element-selectorsBrowser compatibility Browser Lowest Version Support of Firefox (Gecko) 1.0 (1.0) :pseudo-element 1.0 (1.5) :pseudo-element ::pseudo-element Opera 4.0 :pseudo-element 7.0 :pseudo-element ::pseudo-element Safari (WebKit) 1.0 (85) :pseudo-element ::pseudo-element See also Pseudo-classes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 23, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
146,developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/initUIEvent. UIEvent: initUIEvent() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventinitUIEvent()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoUI EventsUIEventConstructorUIEvent()Instance propertiesdetailsourceCapabilities Experimental viewwhich Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoUIEvent: initUIEvent() methodDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The UIEvent.initUIEvent() method initializes a UI event once it's been created.  Events initialized in this way must have been created with the Document.createEvent() method. This method must be called to set the event before it is dispatched, using EventTarget.dispatchEvent(). Once dispatched, it doesn't do anything anymore. Warning: Do not use this method anymore as it is deprecated. Instead use specific event constructors, like UIEvent(). The page on Creating and triggering events gives more information about the way to use these. SyntaxinitUIEvent(type, canBubble, cancelable, view, detail) Parameters type A string defining the type of event. canBubble   A boolean value deciding whether the event should bubble up through the  event chain or not. Once set, the read-only property Event.bubbles  will give its value.  cancelable   A boolean value defining whether the event can be canceled. Once set, the  read-only property Event.cancelable will give its value.  view Is the WindowProxy associated with the event. detail   An unsigned long specifying some detail information about the  event, depending on the type of event. For mouse events, it indicates how many times  the mouse has been clicked on a given screen location.  Return valueNone (undefined).Examplesconst e = document.createEvent(""UIEvent""); // creates a click event that bubbles, can be cancelled, // and with its view and detail property initialized to window and 1, // respectively e.initUIEvent(""click"", true, true, window, 1); SpecificationsSpecificationUI Events # dom-uievent-inituieventBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also UIEvent  The constructor to use instead of this deprecated method:  UIEvent(). More specific constructors can be used  too. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
147,developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia/and/embedding/Images/in/HTML/Test/your/skills:/HTML/images,"developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia/and/embedding/Images/in/HTML/Test/your/skills:/HTML/images. Test your skills: HTML images - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesHTMLMultimedia and embeddingImages in HTMLTest your skills: HTML imagesArticle ActionsEnglish (US)In this articleTask 1Task 2Task 3Assessment or further helpComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleTask 1Task 2Task 3Assessment or further helpTest your skills: HTML imagesThe aim of this skill test is to assess whether you understand images and how to embed them in HTML. Note: You can try out solutions in the interactive editors below. However, it may be helpful to download the code and use an online tool such as CodePen, jsFiddle, or Glitch to work on the tasks. If you get stuck, then ask us for help â see the Assessment or further help section at the bottom of this page. Task 1In this task, we want you to embed a simple image of some Blueberries into the page. You need to: Add the path to the image to an appropriate attribute to embed it on the page. The image is called blueberries.jpg, and it is in a folder inside the current folder called images. Add some alternative text to an appropriate attribute to describe the image, for people that cannot see it. Give the <img> element an appropriate width and height so that it displays at the correct aspect ratio, and enough space is left on the page to display it. The image's intrinsic size is 615 x 419 pixels. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Task 2In this task, you already have a full-featured image, but we'd like you to add a tooltip that appears when the image is moused over. You should put some appropriate information into the tooltip. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Task 3In this task, you are provided with both a full-featured image and some caption text. What you need to do here is add elements that will associate the image with the caption. Try updating the live code below to recreate the finished example: Download the starting point for this task to work in your own editor or in an online editor. Assessment or further helpYou can practice these examples in the Interactive Editors mentioned above. If you would like your work assessed or are stuck and want to ask for help: Put your work into an online shareable editor such as CodePen, jsFiddle, or Glitch. You can write the code yourself or use the starting point files linked to in the above sections. Write a post asking for assessment and/or help at the MDN Discourse forum Learning category. Your post should include:  A descriptive title such as ""Assessment wanted for HTML images skill test 1"". Details of what you have already tried and what you would like us to do; for example, tell us if you're stuck and need help or want an assessment. A link to the example you want assessed or need help with, in an online shareable editor (as mentioned in step 1 above). This is a good practice to get into â it's very hard to help someone with a coding problem if you can't see their code. A link to the actual task or assessment page, so we can find the question you want help with. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 3, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
148,developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument,"developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument. DOMImplementation: createHTMLDocument() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDOMImplementationcreateHTMLDocument()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDOMImplementationInstance methodscreateDocument()createDocumentType()createHTMLDocument() hasFeature() Deprecated Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDOMImplementation: createHTMLDocument() method The DOMImplementation.createHTMLDocument() method creates a new HTML Document. SyntaxcreateHTMLDocument() createHTMLDocument(title) Parameters title Optional A string containing the title to give the new HTML document. Return valueA new HTML Document object.ExamplesThis example creates a new HTML document and inserts it into an <iframe> in the current document. Here's the HTML for this example: <body> <p>  Click <a href=""javascript:makeDocument()"">here</a> to create a new document  and insert it below. </p> <iframe id=""theFrame"" src=""about:blank"" /> </body> The JavaScript implementation of makeDocument() follows: function makeDocument() { let frame = document.getElementById(""theFrame""); let doc = document.implementation.createHTMLDocument(""New Document""); let p = doc.createElement(""p""); p.textContent = ""This is a new paragraph.""; try {  doc.body.appendChild(p); } catch (e) {  console.log(e); } // Copy the new HTML document into the frame let destDocument = frame.contentDocument; let srcNode = doc.documentElement; let newNode = destDocument.importNode(srcNode, true); destDocument.replaceChild(newNode, destDocument.documentElement); }  The code in lines 4â12 handle creating the new HTML document and inserting some content into it. Line 4 uses createHTMLDocument() to construct a new HTML document whose <title> is ""New Document"". Lines 5 and 6 create a new paragraph element with some simple content, and then lines 8â12 handle inserting the new paragraph into the new document.  Line 16 pulls the contentDocument of the frame; this is the document into which we'll be injecting the new content. The next two lines handle importing the contents of our new document into the new document's context. Finally, line 20 actually replaces the contents of the frame with the new document's contents. View Live Examples The returned document is pre-constructed with the following HTML: <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>title</title> </head> <body>  â¦ </body> </html> SpecificationsSpecificationDOM Standard # ref-for-dom-domimplementation-createhtmldocumentâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOMImplementation interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
149,developer.mozilla.org/en-US/docs/Glossary/Speed/index,"developer.mozilla.org/en-US/docs/Glossary/Speed/index. Speed index - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSpeed indexArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoSpeed indexSpeed Index (SI) is a page load performance metric measuring how quickly the contents of a page are visibly populated. Speed Index is dependent on size of the viewport and expressed in milliseconds: the lower amount of time the better the score. Speed Index was introduced to address issues with other milestones and metrics and provide a gauge of real user experience. Speed Index has been implemented in several common audits including WebPageTest and Lighthouse. Speed Index is calculated by what percent of the page is visually complete at every 100ms interval until the page is visually complete. The overall score is a sum of the individual 10 times per second intervals of the percent of the screen that is not visually complete. Diagram showing how above the fold content can load before the page load event and is measured by Speed Index:  See also Learn web performance Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 1, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
150,developer.mozilla.org/en-US/docs/Glossary/SEO,"developer.mozilla.org/en-US/docs/Glossary/SEO. SEO - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSEOArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoSEOSEO (Search Engine Optimization) is the process of making a website more visible in search results, also termed improving search rankings. Search engines crawl the web, following links from page to page, and index the content found. When you search, the search engine displays the indexed content. Crawlers follow rules. If you follow those rules closely when doing SEO for a website, you give the site the best chances of showing up among the first results, increasing traffic and possibly revenue (for e-commerce and ads). Search engines give some guidelines for SEO, but big search engines keep result ranking as a trade secret. SEO combines official search engine guidelines, empirical knowledge, and theoretical knowledge from science papers or patents. SEO methods fall into three broad classes: Technical Tag the content using semantic HTML. When exploring the website, crawlers should only find the content you want indexed. Copywriting Write content using your visitors' vocabulary. Use text as well as images so that crawlers can understand the subject. Popularity You get most traffic when other established sites link to your site. See also SEO on Wikipedia Google Search Central Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
151,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore. CanvasRenderingContext2D: restore() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2Drestore()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore() rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: restore() method The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing. For more information about the drawing state, see CanvasRenderingContext2D.save().Syntaxrestore() ParametersNone.Return valueNone (undefined).ExamplesRestoring a saved state This example uses the save() method to save the current state and restore() to restore it later, so that you are able to draw a rect with the current state later. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Save the current state ctx.save(); ctx.fillStyle = ""green""; ctx.fillRect(10, 10, 100, 100); // Restore to the state saved by the most recent call to save() ctx.restore(); ctx.fillRect(150, 40, 100, 100); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-restore-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this method: CanvasRenderingContext2D CanvasRenderingContext2D.save() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
152,developer.mozilla.org/en-US/docs/Glossary/TLS,"developer.mozilla.org/en-US/docs/Glossary/TLS. Transport Layer Security (TLS) - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsTransport Layer Security (TLS)Article ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoTransport Layer Security (TLS)Transport Layer Security (TLS), formerly known as Secure Sockets Layer (SSL), is a protocol used by applications to communicate securely across a network, preventing tampering with and eavesdropping on email, web browsing, messaging, and other protocols. Both SSL and TLS are client / server protocols that ensure communication privacy by using cryptographic protocols to provide security over a network. When a server and client communicate using TLS, it ensures that no third party can eavesdrop or tamper with any message. All modern browsers support the TLS protocol, requiring the server to provide a valid digital certificate confirming its identity in order to establish a secure connection. It is possible for both the client and server to mutually authenticate each other, if both parties provide their own individual digital certificates. Note: All major browsers began removing support for TLS 1.0 and 1.1 in early 2020; you'll need to make sure your web server supports TLS 1.2 or 1.3 going forward. From version 74 onwards, Firefox will return a Secure Connection Failed error when connecting to servers using the older TLS versions (Firefox bug 1606734). See also Transport Layer Security (Wikipedia) RFC 8446 (The Transport Layer Security Protocol, Version 1.3) RFC 5246 (The Transport Layer Security Protocol, Version 1.2) Transport Layer Security OWASP: Transport Layer Protection Cheat Sheet Glossary HTTPS SSL Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 26, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
153,developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument,"developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument. Node: ownerDocument property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodeownerDocumentArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilityDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocument parentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilityNode: ownerDocument property The read-only ownerDocument property of the Node interface returns the top-level document object of the node. Value A Document that is the top-level object in which all the child nodes are created. If this property is used on a node that is itself a document, the value is null.Example// Given a node ""p"", get the top-level HTML // child of the document object const d = p.ownerDocument; const html = d.documentElement; SpecificationsSpecificationDOM Standard # ref-for-dom-node-ownerdocumentâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
154,developer.mozilla.org/en-US/docs/Web/Guide,"developer.mozilla.org/en-US/docs/Web/Guide. Developer guides | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesDeveloper guidesArticle ActionsEnglish (US)In this articleHTMLCSSJavaScriptMediaAPIsPerformanceMobile web developmentFontsUser interface developmentAjaxAudio and Video DeliveryAudio and video manipulationCSS HoudiniGraphics on the WebGuide to Web APIsIntroduction to Web developmentMobile Web DevelopmentOptimization and performanceParsing and serializing XMLPrintingThe Web Open Font Format (WOFF)User input and controlsWriting forward-compatible websitesIn this articleHTMLCSSJavaScriptMediaAPIsPerformanceMobile web developmentFontsUser interface developmentDeveloper guidesThere are a number of guides within MDN docs. These articles aim to add additional usage examples, or teach you how to use an API or feature. This page links to some of the most popular material.HTML Structuring the web with HTML The HTML learning area offers tutorials to help you learn HTML from the ground up. HTML basics This article will give you a basic understanding of HTML. After following this guide, you can further explore the material in the HTML Learning Area. CSS Learn to style HTML using CSS Our complete CSS tutorial, taking you from first steps through styling text, creating layouts, and more. CSS Layout Guides There are a large number of guides to CSS Layout across MDN, this page collects them all together. Using CSS animations CSS animations make it possible to animate transitions from one CSS style configuration to another. This guide will help you get started with the animation properties. JavaScript JavaScript learning area Whether you are a complete beginner, or hoping to refresh your skills, this is the place to start. AJAX AJAX is a term that defines a group of technologies allowing web applications to make quick, incremental updates to the user interface without reloading the entire browser page. This makes the application faster and more responsive to user actions. Media Graphics on the web Modern websites and applications often need to present graphics of varying sophistication. Audio and video delivery We can deliver audio and video on the web in several ways, ranging from 'static' media files to adaptive live streams. This article is intended as a starting point for exploring the various delivery mechanisms of web-based media and compatibility with popular browsers. Audio and video manipulation The beauty of the web is that you can combine technologies to create new forms. Having native audio and video in the browser means we can use these data streams with technologies such as <canvas>, WebGL or Web Audio API to modify audio and video directly, for example adding reverb/compression effects to audio, or grayscale/sepia filters to video. This article provides a reference to explain what you need to do. APIs Using FormData objects The FormData object lets you compile a set of key/value pairs to send using XMLHttpRequest. It's primarily intended for sending form data, but can be used independently of forms to transmit keyed data. The transmission is in the same format that the form's submit() method would use to send the data if the form's encoding type were set to ""multipart/form-data"". Progressive web apps Progressive web apps (PWAs) use modern web APIs along with traditional progressive enhancement strategy to create cross-platform web applications. These apps work everywhere and provide several features that give them the same user experience advantages as native apps. This set of guides tells you all you need to know about PWAs. Parsing and serializing XML The web platform provides different methods of parsing and serializing XML, each with its pros and cons. Performance Optimization and performance When building modern web apps and sites, it's important to make your content work quickly and efficiently. This lets it perform effectively for both powerful desktop systems and weaker handheld devices. Mobile web development Mobile web development This article provides an overview of some main techniques needed to design websites that work well on mobile devices. Fonts Variable fonts guide Find out how to use variable fonts in your designs. The Web Open Font Format (WOFF) WOFF (Web Open Font Format) is a font file format that is free for anyone to use on the web. User interface development User input and controls Modern web user input goes beyond simple mouse and keyboard: think of touchscreens for example. This article provides recommendations for managing user input and implementing controls in open web apps, along with FAQs, real-world examples, and links to further information for anyone needing more detailed information on the underlying technologies. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 24, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
155,developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition,"developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition. Node: compareDocumentPosition() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodecompareDocumentPosition()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition() contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: compareDocumentPosition() method The compareDocumentPosition() method of the Node interface reports the position of its argument node relative to the node on which it is called. SyntaxcompareDocumentPosition(otherNode) Parameters otherNode The Node for which position should be reported, relative to the node. Return value An integer value representing otherNode's position relative to node as a bitmask combining the following constant properties of Node: Node.DOCUMENT_POSITION_DISCONNECTED (1) Both nodes are in different documents or different trees in the same document. Node.DOCUMENT_POSITION_PRECEDING (2) otherNode precedes the node in either a pre-order depth-first traversal of a tree containing both (e.g., as an ancestor or previous sibling or a descendant of a previous sibling or previous sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering. Node.DOCUMENT_POSITION_FOLLOWING (4) otherNode follows the node in either a pre-order depth-first traversal of a tree containing both (e.g., as a descendant or following sibling or a descendant of a following sibling or following sibling of an ancestor) or (if they are disconnected) in an arbitrary but consistent ordering. Node.DOCUMENT_POSITION_CONTAINS (8) otherNode is an ancestor of the node. Node.DOCUMENT_POSITION_CONTAINED_BY (16) otherNode is a descendant of the node. Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC (32) The result relies upon arbitrary and/or implementation-specific behavior and is not guaranteed to be portable.  More than one bit is set if multiple scenarios apply. For example, if otherNode is located earlier in the document and contains the node on which compareDocumentPosition() was called, then both the DOCUMENT_POSITION_CONTAINS and DOCUMENT_POSITION_PRECEDING bits would be set, producing a value of 10 (0x0A). Exampleconst head = document.head; const body = document.body; if (head.compareDocumentPosition(body) & Node.DOCUMENT_POSITION_FOLLOWING) { console.log(""Well-formed document""); } else { console.error(""<head> is not before <body>""); } Note: Because the result returned by compareDocumentPosition() is a bitmask,  the bitwise AND operator  must be used for meaningful results. SpecificationsSpecificationDOM Standard # ref-for-dom-node-comparedocumentpositionâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.contains() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
156,developer.mozilla.org/en-US/docs/Glossary/HTTP,"developer.mozilla.org/en-US/docs/Glossary/HTTP. HTTP - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsHTTPArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoHTTPThe HyperText Transfer Protocol (HTTP) is the underlying network protocol that enables transfer of hypermedia documents on the Web, typically between a browser and a server so that humans can read them. The current version of the HTTP specification is called HTTP/2. As part of a URI, the ""http"" within ""http://example.com/"" is called a ""scheme"". Resources using the ""http"" schema are typically transported over unencrypted connections using the HTTP protocol. The ""https"" scheme (as in ""https://developer.mozilla.org"") indicates that a resource is transported using the HTTP protocol, but over a secure TLS channel. HTTP is textual (all communication is done in plain text) and stateless (no communication is aware of previous communications). This property makes it ideal for humans to read documents (websites) on the world wide web. However, HTTP can also be used as a basis for REST web services from server to server or AJAX requests within websites to make them more dynamic.See also HTTP on MDN HTTP on Wikipedia Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
157,developer.mozilla.org/en-US/docs/Web/Media/Formats/Video/codecs,"developer.mozilla.org/en-US/docs/Web/Media/Formats/Video/codecs. Web video codec guide - Web media technologies | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb media technologiesMedia type and format guide: image, audio, and video contentWeb video codec guideArticle ActionsEnglish (US)In this articleCommon codecsFactors affecting the encoded videoCompression artifactsCodec detailsChoosing a video codecSee also Autoplay guide for media and Web Audio APIsDASH Adaptive Streaming for HTML 5 VideoGuide to streaming audio and videoMedia type and format guide: image, audio, and video contentMedia type and format guide: image, audio, and video contentWeb audio codec guideDigital audio conceptsCodecs in common media typesMedia container formats (file types)Image file type and format guideHandling media support issues in web contentWeb video codec guideDigital video conceptsCodecs used by WebRTCUsing audio and video in HTMLUsing images in HTML In this articleCommon codecsFactors affecting the encoded videoCompression artifactsCodec detailsChoosing a video codecSee alsoWeb video codec guideThis guide introduces the video codecs you're most likely to encounter or consider using on the web, summaries of their capabilities and any compatibility and utility concerns, and advice to help you choose the right codec for your project's video. Due to the sheer size of uncompressed video data, it's necessary to compress it significantly in order to store it, let alone transmit it over a network. Imagine the amount of data needed to store uncompressed video: A single frame of high definition (1920x1080) video in full color (4 bytes per pixel) is 8,294,400 bytes. At a typical 30 frames per second, each second of HD video would occupy 248,832,000 bytes (~249 MB). A minute of HD video would need 14.93 GB of storage. A fairly typical 30 minute video conference would need about 447.9 GB of storage, and a 2-hour movie would take almost 1.79 TB (that is, 1790 GB). Not only is the required storage space enormous, but the network bandwidth needed to transmit an uncompressed video like that would be enormous, at 249 MB/secânot including audio and overhead. This is where video codecs come in. Just as audio codecs do for the sound data, video codecs compress the video data and encode it into a format that can later be decoded and played back or edited. Most video codecs are lossy, in that the decoded video does not precisely match the source. Some details may be lost; the amount of loss depends on the codec and how it's configured, but as a general rule, the more compression you achieve, the more loss of detail and fidelity will occur. Some lossless codecs do exist, but they are typically used for archival and storage for local playback rather than for use on a network.Common codecsThe following video codecs are those which are most commonly used on the web. For each codec, the containers (file types) that can support them are also listed. Each codec provides a link to a section below which offers additional details about the codec, including specific capabilities and compatibility issues you may need to be aware of. Codec name (short) Full codec name Container support  AV1 AOMedia Video 1 MP4,   WebM AVC (H.264) Advanced Video Coding 3GP,   MP4 H.263 H.263 Video 3GP HEVC (H.265) High Efficiency Video Coding MP4 MP4V-ES MPEG-4 Video Elemental Stream 3GP,   MP4 MPEG-1 MPEG-1 Part 2 Visual MPEG,   QuickTime MPEG-2 MPEG-2 Part 2 Visual MP4,   MPEG,   QuickTime Theora Theora Ogg VP8 Video Processor 8 3GP,   Ogg,   WebM VP9 Video Processor 9 MP4,   Ogg,   WebM Factors affecting the encoded videoAs is the case with any encoder, there are two basic groups of factors affecting the size and quality of the encoded video: specifics about the source video's format and contents, and the characteristics and configuration of the codec used while encoding the video. The simplest guideline is this: anything that makes the encoded video look more like the original, uncompressed, video will generally make the resulting data larger as well. Thus, it's always a tradeoff of size versus quality. In some situations, a greater sacrifice of quality in order to bring down the data size is worth that lost quality; other times, the loss of quality is unacceptable and it's necessary to accept a codec configuration that results in a correspondingly larger file.Effect of source video format on encoded outputThe degree to which the format of the source video will affect the output varies depending on the codec and how it works. If the codec converts the media into an internal pixel format, or otherwise represents the image using a means other than simple pixels, the format of the original image doesn't make any difference. However, things such as frame rate and, obviously, resolution will always have an impact on the output size of the media. Additionally, all codecs have their strengths and weaknesses. Some have trouble with specific kinds of shapes and patterns, or aren't good at replicating sharp edges, or tend to lose detail in dark areas, or any number of possibilities. It all depends on the underlying algorithms and mathematics.  The potential effect of source video format and contents on the encoded  video quality and size  Feature Effect on quality Effect on size  Color depth (bit depth)   The higher the color bit depth, the higher the quality of color fidelity   is achieved in the video. Additionally, in saturated portions of the   image (that is, where colors are pure and intense, such as a bright,   pure red [rgba(255, 0, 0, 1)]), color depths below 10 bits   per component (10-bit color) allow banding, where gradients cannot be   represented without visible stepping of the colors.     Depending on the codec, higher color depths may result in larger   compressed file sizes. The determining factor is what internal storage   format is used for the compressed data.   Frame rate   Primarily affects the perceived smoothness of the motion in the image.   To a point, the higher the frame rate, the smoother and more realistic   the motion will appear. Eventually the point of diminishing returns is   reached. See Frame rate below for   details.     Assuming the frame rate is not reduced during encoding, higher frame   rates cause larger compressed video sizes.   Motion   Compression of video typically works by comparing frames, finding where   they differ, and constructing records containing enough information to   update the previous frame to approximate the appearance of the following   frame. The more successive frames differ from one another, the larger   these differences are, and the less effective the compression is at   avoiding the introduction of artifacts into the compressed video.     The complexity introduced by motion results in larger intermediate   frames due to the higher number of differences between frames). For this   and other reasons, the more motion there is in a video, the larger the   output file will typically be.   Noise   Picture noise (such as film grain effects, dust, or other grittiness to   the image) introduces variability. Variability generally makes   compression more difficult, resulting in more lost quality due to the   need to drop details to achieve the same level of compression.     The more variabilityâsuch as noiseâthere is in the image, the more   complex the compression process and the less success the algorithm is   likely to have compressing the image to the same degree. Unless you   configure the encoder in a way that ignores some or all of the   variations caused by noise, the compressed video will be larger.   Resolution (width and height)   Higher resolution video, presented in the same screen size, will   typically be able to more accurately portray the original scene, barring   effects introduced during compression.     The higher the resolution of a video, the larger it gets. This plays a   key role in the final size of the video.   The degree to which these affect the resulting encoded video will vary depending on the precise details of the situation, including which encoder you use and how it's configured. In addition to general codec options, the encoder could be configured to reduce the frame rate, to clean up noise, and/or to reduce the overall resolution of the video during encoding.Effect of codec configuration on encoded outputThe algorithms used do encode video typically use one or more of a number of general techniques to perform their encoding. Generally speaking, any configuration option that is intended to reduce the output size of the video will probably have a negative impact on the overall quality of the video, or will introduce certain types of artifacts into the video. It's also possible to select a lossless form of encoding, which will result in a much larger encoded file but with perfect reproduction of the original video upon decoding. In addition, each encoder utility may have variations in how they process the source video, resulting in differences in the output quality and/or size. Video encoder configuration effects on quality and size Feature Effect on quality Effect on size  Lossless compression No loss of quality   Lossless compression cannot reduce the overall video size nearly as much   as lossy compression; the resulting files are likely to still be too   large for general usage.   Lossy compression   To some degree, artifacts and other forms of quality degradation will   occur, depending on the specific codec and how much compression is being   applied     The more the encoded video is allowed to deviate from the source, the   easier it is to accomplish higher compression rates   Quality setting   The higher the quality configuration, the more like the original media   the encoded video will look     In general, higher quality settings will result in larger encoded video   files; the degree to which this is true varies depending on the codec   Bit rate Quality generally improves with higher bit rates Higher bit rates inherently lead to larger output files The options available when encoding video, and the values to be assigned to those options, will vary not only from one codec to another but depending on the encoding software you use. The documentation included with your encoding software will help you to understand the specific impact of these options on the encoded video.Compression artifactsArtifacts are side effects of a lossy encoding process in which the lost or rearranged data results in visibly negative effects. Once an artifact has appeared, it may linger for a while, because of how video is displayed. Each frame of video is presented by applying a set of changes to the currently-visible frame. This means that any errors or artifacts will compound over time, resulting in glitches or otherwise strange or unexpected deviations in the image that linger for a time. To resolve this, and to improve seek time through the video data, periodic key frames (also known as intra-frames or i-frames) are placed into the video file. The key frames are full frames, which are used to repair any damage or artifact residue that's currently visible.AliasingAliasing is a general term for anything that upon being reconstructed from the encoded data does not look the same as it did before compression. There are many forms of aliasing; the most common ones you may see include:  MoirÃ© patterns   A   MoirÃ© pattern   is a large-scale spatial interference pattern produced when a pattern   in the source image and the manner in which the encoder operates are   slightly out of alignment spatially. The artifacts generated by the   encoder then introduce strange, swirling effects in the source image's   pattern upon decoding.    Staircase effect   The staircase effect is a spatial artifact that   occurs when diagonal straight or curved edges that should be smooth   take on a jagged appearance, looking somewhat like a set of stair   steps. This is the effect that is being reduced by ""anti-aliasing""   filters.    Wagon-wheel effect   The wagon-wheel effect (or   stroboscopic effect) is the visual effect that's commonly seen in film, in which a   turning wheel appears to rotate at the wrong speed, or even in   reverse, due to an interaction between the frame rate and the   compression algorithm. The same effect can occur with any repeating   pattern that moves, such as the ties on a railway line, posts along   the side of a road, and so forth. This is a temporal (time-based)   aliasing issue; the speed of the rotation interferes with the   frequency of the sampling performed during compression or encoding.    Color edgingColor edging is a type of visual artifact that presents as spurious colors introduced along the edges of colored objects within the scene. These colors have no intentional color relationship to the contents of the frame.Loss of sharpnessThe act of removing data in the process of encoding video requires that some details be lost. If enough compression is applied, parts or potentially all of the image could lose sharpness, resulting in a slightly fuzzy or hazy appearance. Lost sharpness can make text in the image difficult to read, as textâespecially small textâis very detail-oriented content, where minor alterations can significantly impact legibility.RingingLossy compression algorithms can introduce ringing, an effect where areas outside an object are contaminated with colored pixels generated by the compression algorithm. This happens when an algorithm that uses blocks that span across a sharp boundary between an object and its background. This is particularly common at higher compression levels. Note the blue and pink fringes around the edges of the star above (as well as the stepping and other significant compression artifacts). Those fringes are the ringing effect. Ringing is similar in some respects to mosquito noise, except that while the ringing effect is more or less steady and unchanging, mosquito noise shimmers and moves. Ringing is another type of artifact that can make it particularly difficult to read text contained in your images.PosterizingPosterization occurs when the compression results in the loss of color detail in gradients. Instead of smooth transitions through the various colors in a region, the image becomes blocky, with blobs of color that approximate the original appearance of the image. Note the blockiness of the colors in the plumage of the bald eagle in the photo above (and the snowy owl in the background). The details of the feathers is largely lost due to these posterization artifacts.ContouringContouring or color banding is a specific form of posterization in which the color blocks form bands or stripes in the image. This occurs when the video is encoded with too coarse a quantization configuration. As a result, the video's contents show a ""layered"" look, where instead of smooth gradients and transitions, the transitions from color to color are abrupt, causing strips of color to appear. In the example image above, note how the sky has bands of different shades of blue, instead of being a consistent gradient as the sky color changes toward the horizon. This is the contouring effect.Mosquito noiseMosquito noise is a temporal artifact which presents as noise or edge busyness that appears as a flickering haziness or shimmering that roughly follows outside the edges of objects with hard edges or sharp transitions between foreground objects and the background. The effect can be similar in appearance to ringing . The photo above shows mosquito noise in a number of places, including in the sky surrounding the bridge. In the upper-right corner, an inset shows a close-up of a portion of the image that exhibits mosquito noise. Mosquito noise artifacts are most commonly found in MPEG video, but can occur whenever a discrete cosine transform (DCT) algorithm is used; this includes, for example, JPEG still images.Motion compensation block boundary artifactsCompression of video generally works by comparing two frames and recording the differences between them, one frame after another, until the end of the video. This technique works well when the camera is fixed in place, or the objects in the frame are relatively stationary, but if there is a great deal of motion in the frame, the number of differences between frames can be so great that compression doesn't do any good. Motion compensation is a technique that looks for motion (either of the camera or of objects in the frame of view) and determines how many pixels the moving object has moved in each direction. Then that shift is stored, along with a description of the pixels that have moved that can't be described just by that shift. In essence, the encoder finds the moving objects, then builds an internal frame of sorts that looks like the original but with all the objects translated to their new locations. In theory, this approximates the new frame's appearance. Then, to finish the job, the remaining differences are found, then the set of object shifts and the set of pixel differences are stored in the data representing the new frame. This object that describes the shift and the pixel differences is called a residual frame. Original frame Inter-frame differences Difference after motion compensation    The first full frame as seen by the viewer.   Here, only the differences between the first frame and the following   frame are seen. Everything else is black. Looking closely, we can see   that the majority of these differences come from a horizontal camera   move, making this a good candidate for motion compensation.     To minimize the number of pixels that are different, here we take into   account the panning of the camera by first shifting the first frame to   the right by two pixels, then by taking the difference. This compensates   for the panning of the camera, allowing for more overlap between the two   frames.     Images from   Wikipedia  There are two general types of motion compensation: global motion compensation and block motion compensation. Global motion compensation generally adjusts for camera movements such as tracking, dolly movements, panning, tilting, rolling, and up and down movements. Block motion compensation handles localized changes, looking for smaller sections of the image that can be encoded using motion compensation. These blocks are normally of a fixed size, in a grid, but there are forms of motion compensation that allow for variable block sizes, and even for blocks to overlap. There are, however, artifacts that can occur due to motion compensation. These occur along block borders, in the form of sharp edges that produce false ringing and other edge effects. These are due to the mathematics involved in the coding of the residual frames, and can be easily noticed before being repaired by the next key frame.Reduced frame sizeIn certain situations, it may be useful to reduce the video's dimensions in order to improve the final size of the video file. While the immediate loss of size or smoothness of playback may be a negative factor, careful decision-making can result in a good end result. If a 1080p video is reduced to 720p prior to encoding, the resulting video can be much smaller while having much higher visual quality; even after scaling back up during playback, the result may be better than encoding the original video at full size and accepting the quality hit needed to meet your size requirements.Reduced frame rateSimilarly, you can remove frames from the video entirely and decrease the frame rate to compensate. This has two benefits: it makes the overall video smaller, and that smaller size allows motion compensation to accomplish even more for you. For example, instead of computing motion differences for two frames that are two pixels apart due to inter-frame motion, skipping every other frame could lead to computing a difference that comes out to four pixels of movement. This lets the overall movement of the camera be represented by fewer residual frames. The absolute minimum frame rate that a video can be before its contents are no longer perceived as motion by the human eye is about 12 frames per second. Less than that, and the video becomes a series of still images. Motion picture film is typically 24 frames per second, while standard definition television is about 30 frames per second (slightly less, but close enough) and high definition television is between 24 and 60 frames per second. Anything from 24 FPS upward will generally be seen as satisfactorily smooth; 30 or 60 FPS is an ideal target, depending on your needs. In the end, the decisions about what sacrifices you're able to make are entirely up to you and/or your design team.Codec detailsAV1The AOMedia Video 1 (AV1) codec is an open format designed by the Alliance for Open Media specifically for internet video. It achieves higher data compression rates than VP9 and H.265/HEVC, and as much as 50% higher rates than AVC. AV1 is fully royalty-free and is designed for use by both the <video> element and by WebRTC. AV1 currently offers three profiles: main, high, and professional with increasing support for color depths and chroma subsampling. In addition, a series of levels are specified, each defining limits on a range of attributes of the video. These attributes include frame dimensions, image area in pixels, display and decode rates, average and maximum bit rates, and limits on the number of tiles and tile columns used in the encoding/decoding process. For example, AV1 level 2.0 offers a maximum frame width of 2048 pixels and a maximum height of 1152 pixels, but its maximum frame size in pixels is 147,456, so you can't actually have a 2048x1152 video at level 2.0. It's worth noting, however, that at least for Firefox and Chrome, the levels are actually ignored at this time when performing software decoding, and the decoder just does the best it can to play the video given the settings provided. For compatibility's sake going forward, however, you should stay within the limits of the level you choose. The primary drawback to AV1 at this time is that it is very new, and support is still in the process of being integrated into most browsers. Additionally, encoders and decoders are still being optimized for performance, and hardware encoders and decoders are still mostly in development rather than production. For this reason, encoding a video into AV1 format takes a very long time, since all the work is done in software. For the time being, because of these factors, AV1 is not yet ready to be your first choice of video codec, but you should watch for it to be ready to use in the future. Supported bit rates Varies depending on the video's level; theoretical maximum reaches 800 Mbps at level 6.3   See the AV1 specification's   tables of levels, which describe the maximum resolutions and rates at each level.    Supported frame rates Varies by level; for example, level 2.0 has a maximum of 30 FPS while level 6.3 can reach 120 FPS Compression   Lossy   DCT-based algorithm Supported frame sizes 8 x 8 pixels to 65,535 x 65535 pixels with each dimension allowed to take any value between these Supported color modes  Profile Color depths Chroma subsampling  Main 8 or 10 4:0:0 (greyscale) or 4:2:0 High 8 or 10 4:0:0 (greyscale), 4:2:0, or 4:4:4 Professional 8, 10, or 12 4:0:0 (greyscale), 4:2:0, 4:2:2, or 4:4:4  HDR support Yes Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Firefox Android Internet Explorer Opera Safari AV1 support 70 75 67 113 No 57 No  Container support ISOBMFF, MPEG-TS,   MP4,   WebM  RTP /   WebRTC compatible  Yes Supporting/Maintaining organization Alliance for Open Media Specification https://aomediacodec.github.io/av1-spec/av1-spec.pdf Licensing Royalty-free, open standard AVC (H.264)The MPEG-4 specification suite's Advanced Video Coding (AVC) standard is specified by the identical ITU H.264 specification and the MPEG-4 Part 10 specification. It's a motion compensation based codec that is widely used today for all sorts of media, including broadcast television, RTP videoconferencing, and as the video codec for Blu-Ray discs. AVC is highly flexible, with a number of profiles with varying capabilities; for example, the Constrained Baseline Profile is designed for use in videoconferencing and mobile scenarios, using less bandwidth than the Main Profile (which is used for standard definition digital TV in some regions) or the High Profile (used for Blu-Ray Disc video). Most of the profiles use 8-bit color components and 4:2:0 chroma subsampling; The High 10 Profile adds support for 10-bit color, and advanced forms of High 10 add 4:2:2 and 4:4:4 chroma subsampling. AVC also has special features such as support for multiple views of the same scene (Multiview Video Coding), which allows, among other things, the production of stereoscopic video. AVC is a proprietary format, however, and numerous patents are owned by multiple parties regarding its technologies. Commercial use of AVC media requires a license, though the MPEG LA patent pool does not require license fees for streaming internet video in AVC format as long as the video is free for end users. Non-web browser implementations of WebRTC (any implementation which doesn't include the JavaScript APIs) are required to support AVC as a codec in WebRTC calls. While web browsers are not required to do so, some do. In HTML content for web browsers, AVC is broadly compatible and many platforms support hardware encoding and decoding of AVC media. However, be aware of its licensing requirements before choosing to use AVC in your project! Supported bit rates Varies by level Supported frame rates Varies by level; up to 300 FPS is possible Compression   Lossy   DCT-based algorithm, though it's possible to create lossless macroblocks within the image   Supported frame sizes Up to 8,192 x 4,320 pixels Supported color modes Some of the more common or interesting profiles: Profile Color depths Chroma subsampling Constrained Baseline (CBP) 8 4:2:0 Baseline (BP) 8 4:2:0 Extended (XP) 8 4:2:0 Main (MP) 8 4:2:0 High (HiP) 8 4:0:0 (greyscale) and 4:2:0 Progressive High (ProHiP) 8 4:0:0 (greyscale) and 4:2:0 High 10 (Hi10P) 8 to 10 4:0:0 (greyscale) and 4:2:0 High 4:2:2 (Hi422P) 8 to 10 4:0:0 (greyscale), 4:2:0, and 4:2:2 High 4:4:4 Predictive 8 to 14 4:0:0 (greyscale), 4:2:0, 4:2:2, and 4:4:4  HDR support   Yes; Hybrid Log-Gamma or   Advanced HDR/SL-HDR; both are part of ATSC   Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari AVC/H.264 support 4 12 35 9 25 3.2    Firefox support for AVC is dependent upon the operating system's   built-in or preinstalled codecs for AVC and its container in order to   avoid patent concerns.    Container support 3GP,   MP4  RTP /   WebRTC compatible  Yes Supporting/Maintaining organization MPEG /   ITU Specification https://mpeg.chiariglione.org/standards/mpeg-4/advanced-video-codinghttps://www.itu.int/rec/T-REC-H.264 Licensing   Proprietary with numerous patents. Commercial use   requires a license. Note that multiple patent pools may apply.   H.263ITU's H.263 codec was designed primarily for use in low-bandwidth situations. In particular, its focus is for video conferencing on PSTN (Public Switched Telephone Networks), RTSP, and SIP (IP-based videoconferencing) systems. Despite being optimized for low-bandwidth networks, it is fairly CPU intensive and may not perform adequately on lower-end computers. The data format is similar to that of MPEG-4 Part 2. H.263 has never been widely used on the web. Variations on H.263 have been used as the basis for other proprietary formats, such as Flash video or the Sorenson codec. However, no major browser has ever included H.263 support by default. Certain media plugins have enabled support for H.263 media. Unlike most codecs, H.263 defines fundamentals of an encoded video in terms of the maximum bit rate per frame (picture), or BPPmaxKb. During encoding, a value is selected for BPPmaxKb, and then the video cannot exceed this value for each frame. The final bit rate will depend on this, the frame rate, the compression, and the chosen resolution and block format. H.263 has been superseded by H.264 and is therefore considered a legacy media format which you generally should avoid using if you can. The only real reason to use H.263 in new projects is if you require support on very old devices on which H.263 is your best choice. H.263 is a proprietary format, with patents held by a number of organizations and companies, including Telenor, Fujitsu, Motorola, Samsung, Hitachi, Polycom, Qualcomm, and so on. To use H.263, you are legally obligated to obtain the appropriate licenses. Supported bit rates Unrestricted, but typically below 64 Kbps Supported frame rates Any Compression   Lossy   DCT-based algorithm Supported frame sizes Up to 1408 x 1152 pixels.   Version 1 of H.263 specifies a set of picture sizes which are   supported. Later versions may support additional resolutions.    Supported color modes   YCbCr; each picture format (sub-QCIF, QCIF, CIF, 4CIF, or 16CIF) defines   the frame size in pixels as well as how many rows each of luminance and   chrominance samples are used for each frame   HDR support No Variable Frame Rate (VFR) support No Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari H.263 support No No No No No No  Container support 3GP,   MP4,   QuickTime  RTP /   WebRTC compatible  No Supporting/Maintaining organization ITU Specification https://www.itu.int/rec/T-REC-H.263/ Licensing   Proprietary; appropriate license or licenses are required. Note that   multiple patent pools may apply.   HEVC (H.265)The High Efficiency Video Coding (HEVC) codec is defined by ITU's H.265 as well as by MPEG-H Part 2 (the still in-development follow-up to MPEG-4). HEVC was designed to support efficient encoding and decoding of video in sizes including very high resolutions (including 8K video), with a structure specifically designed to let software take advantage of modern processors. Theoretically, HEVC can achieve compressed file sizes half that of AVC but with comparable image quality. For example, each coding tree unit (CTU)âsimilar to the macroblock used in previous codecsâconsists of a tree of luma values for each sample as well as a tree of chroma values for each chroma sample used in the same coding tree unit, as well as any required syntax elements. This structure supports easy processing by multiple cores. An interesting feature of HEVC is that the main profile supports only 8-bit per component color with 4:2:0 chroma subsampling. Also interesting is that 4:4:4 video is handled specially. Instead of having the luma samples (representing the image's pixels in grayscale) and the Cb and Cr samples (indicating how to alter the grays to create color pixels), the three channels are instead treated as three monochrome images, one for each color, which are then combined during rendering to produce a full-color image. HEVC is a proprietary format and is covered by a number of patents. Licensing is managed by MPEG LA; fees are charged to developers rather than to content producers and distributors. Be sure to review the latest license terms and requirements before making a decision on whether or not to use HEVC in your app or website! Supported bit rates Up to 800,000 Kbps Supported frame rates Varies by level; up to 300 FPS is possible Compression   Lossy   DCT-based algorithm Supported frame sizes 128 x 96 to 8,192 x 4,320 pixels; varies by profile and level Supported color modes    Information below is provided for the major profiles. There are a   number of other profiles available that are not included here.    Profile Color depths Chroma subsampling  Main 8 4:2:0 Main 10 8 to 10 4:2:0 Main 12 8 to 12 4:0:0 and 4:2:0 Main 4:2:2 10 8 to 10 4:0:0, 4:2:0, and 4:2:2 Main 4:2:2 12 8 to 12 4:0:0, 4:2:0, and 4:2:2 Main 4:4:4 8 4:0:0, 4:2:0, 4:2:2, and 4:4:4 Main 4:4:4 10 8 to 10 4:0:0, 4:2:0, 4:2:2, and 4:4:4 Main 4:4:4 12 8 to 12 4:0:0, 4:2:0, 4:2:2, and 4:4:4 Main 4:4:4 16 Intra 8 to 16 4:0:0, 4:2:0, 4:2:2, and 4:4:4  HDR support Yes Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari HEVC / H.265 support 107 18 No 11 94 11 Chrome support HEVC for devices with hardware support on Windows 8+, Linux and ChromeOS, for all devices on macOS Big Sur 11+ and Android 5.0+.   Edge (Chromium) supports HEVC for devices with hardware support on Windows 10 1709+ when   HEVC video extensions from the Microsoft Store   is installed, and has the same support status as Chrome on other platforms. Edge (Legacy) only supports HEVC for devices with a hardware decoder.   Mozilla will not support HEVC while it is encumbered by patents. Internet Explorer only supports HEVC for devices with a hardware decoder. Opera and other Chromium based browsers have the same support status as Chrome. Safari supports HEVC for all devices on macOS High Sierra or later. Container support ISOBMFF, MPEG-TS,   MP4 QuickTime  RTP /   WebRTC compatible  No Supporting/Maintaining organization ITU /   MPEG Specifications http://www.itu.int/rec/T-REC-H.265https://www.iso.org/standard/69668.html Licensing   Proprietary; confirm your compliance with the   licensing requirements. Note that multiple patent pools may apply.   MP4V-ESThe MPEG-4 Video Elemental Stream (MP4V-ES) format is part of the MPEG-4 Part 2 Visual standard. While in general, MPEG-4 part 2 video is not used by anyone because of its lack of compelling value related to other codecs, MP4V-ES does have some usage on mobile. MP4V is essentially H.263 encoding in an MPEG-4 container. Its primary purpose is to be used to stream MPEG-4 audio and video over an RTP session. However, MP4V-ES is also used to transmit MPEG-4 audio and video over a mobile connection using 3GP. You almost certainly don't want to use this format, since it isn't supported in a meaningful way by any major browsers, and is quite obsolete. Files of this type should have the extension .mp4v, but sometimes are inaccurately labeled .mp4. Supported bit rates 5 Kbps to 1 Gbps and more Supported frame rates No specific limit; restricted only by the data rate Compression   Lossy   DCT-based algorithm Supported frame sizes Up to 4,096 x 4,096 pixels Supported color modes   YCrCb with chroma subsampling (4:2:0, 4:2:2, and 4:4:4) supported; up to   12 bits per component   HDR support No Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari MP4V-ES support No No Yes No No No    Firefox supports MP4V-ES in   3GP   containers only.   Chrome does not support MP4V-ES; however, Chrome OS does. Container support 3GP,   MP4  RTP /   WebRTC compatible  No Supporting/Maintaining organization MPEG Specification RFC 6416 Licensing   Proprietary;   obtain a license   through MPEG LA and/or   AT&T   as needed   MPEG-1 Part 2 VideoMPEG-1 Part 2 Video was unveiled at the beginning of the 1990s. Unlike the later MPEG video standards, MPEG-1 was created solely by MPEG, without the ITU's involvement. Because any MPEG-2 decoder can also play MPEG-1 video, it's compatible with a wide variety of software and hardware devices. There are no active patents remaining in relation to MPEG-1 video, so it may be used free of any licensing concerns. However, few web browsers support MPEG-1 video without the support of a plugin, and with plugin use deprecated in web browsers, these are generally no longer available. This makes MPEG-1 a poor choice for use in websites and web applications. Supported bit rates Up to 1.5 Mbps Supported frame rates   23.976 FPS, 24 FPS, 25 FPS, 29.97 FPS, 30 FPS, 50 FPS, 59.94 FPS, and 60   FPS   Compression   Lossy   DCT-based algorithm Supported frame sizes Up to 4,095 x 4,095 pixels Supported color modes Y'CbCr with 4:2:0 chroma subsampling with up to 12 bits per component HDR support No Variable Frame Rate (VFR) support No Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari MPEG-1 support No No No No No Yes  Container support MPEG RTP /   WebRTC compatible  No Supporting/Maintaining organization MPEG Specification https://www.iso.org/standard/22411.html Licensing   Proprietary; however, all patents have expired, so MPEG-1 may be used   freely   MPEG-2 Part 2 VideoMPEG-2 Part 2 is the video format defined by the MPEG-2 specification, and is also occasionally referred to by its ITU designation, H.262. It is very similar to MPEG-1 videoâin fact, any MPEG-2 player can automatically handle MPEG-1 without any special workâexcept it has been expanded to support higher bit rates and enhanced encoding techniques. The goal was to allow MPEG-2 to compress standard definition television, so interlaced video is also supported. The standard definition compression rate and the quality of the resulting video met needs well enough that MPEG-2 is the primary video codec used for DVD video media. MPEG-2 has several profiles available with different capabilities. Each profile is then available four levels, each of which increases attributes of the video, such as frame rate, resolution, bit rate, and so forth. Most profiles use Y'CbCr with 4:2:0 chroma subsampling, but more advanced profiles support 4:2:2 as well. In addition, there are four levels, each of which offers support for larger frame dimensions and bit rates. For example, the ATSC specification for television used in North America supports MPEG-2 video in high definition using the Main Profile at High Level, allowing 4:2:0 video at both 1920 x 1080 (30 FPS) and 1280 x 720 (60 FPS), at a maximum bit rate of 80 Mbps. However, few web browsers support MPEG-2 without the support of a plugin, and with plugin use deprecated in web browsers, these are generally no longer available. This makes MPEG-2 a poor choice for use in websites and web applications. Supported bit rates Up to 100 Mbps; varies by level and profile Supported frame rates  Abbr. Level name Frame rates supported  LL Low Level 23.9, 24, 25, 29.97, 30 ML Main Level 23.976, 24, 25, 29.97, 30 H-14 High 1440 23.976, 24, 26, 29.97, 30, 50, 59.94, 60 HL High Level 23.976, 24, 26, 29.97, 30, 50, 59.94, 60  Compression   Lossy   DCT-based algorithm Supported frame sizes  Abbr. Level name Maximum frame size LL Low Level 352 x 288 pixels ML Main Level 720 x 576 pixels H-14 High 1440 1440 x 1152 pixels HL High Level 1920 x 1152 pixels  Supported color modes   Y'CbCr with 4:2:0 chroma subsampling in most profiles; the ""High"" and   ""4:2:2"" profiles support 4:2:2 chroma subsampling as well.   HDR support No Variable Frame Rate (VFR) support No Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari MPEG-2 support No No No No No Yes  Container support MPEG,   MPEG-TS (MPEG Transport Stream),   MP4,   QuickTime  RTP /   WebRTC compatible  No Supporting/Maintaining organization MPEG /   ITU Specification https://www.itu.int/rec/T-REC-H.262https://www.iso.org/standard/61152.html Licensing   Proprietary; all patents have expired worldwide with the exception of in   Malaysia and the Philippines as of April 1, 2019, so MPEG-2 can be used   freely outside those two countries. Patents are licensed by   MPEG LA.   TheoraTheora, developed by Xiph.org, is an open and free video codec which may be used without royalties or licensing. Theora is comparable in quality and compression rates to MPEG-4 Part 2 Visual and AVC, making it a very good if not top-of-the-line choice for video encoding. But its status as being free from any licensing concerns and its relatively low CPU resource requirements make it a popular choice for many software and web projects. The low CPU impact is particularly useful since there are no hardware decoders available for Theora. Theora was originally based upon the VC3 codec by On2 Technologies. The codec and its specification were released under the LGPL license and entrusted to Xiph.org, which then developed it into the Theora standard. One drawback to Theora is that it only supports 8 bits per color component, with no option to use 10 or more in order to avoid color banding. That said, 8 bits per component is still the most commonly-used color format in use today, so this is only a minor inconvenience in most cases. Also, Theora can only be used in an Ogg container. The biggest drawback of all, however, is that it is not supported by Safari, leaving Theora unavailable not only on macOS but on all those millions and millions of iPhones and iPads. The Theora Cookbook offers additional details about Theora as well as the Ogg container format it is used within. Supported bit rates Up to 2 Gbps Supported frame rates   Arbitrary; any non-zero value is supported. The frame rate is specified   as a 32-bit numerator and a 32-bit denominator, to allow for non-integer   frame rates.   Compression   Lossy   DCT-based algorithm Supported frame sizes Any combination of width and height up to 1,048,560 x 1,048,560 pixels Supported color modes   Y'CbCr with 4:2:0, 4:2:2, and 4:4:4 chroma subsampling at 8 bits per   component   HDR support No Variable Frame Rate (VFR) support Yes   While Theora doesn't support Variable Frame Rate (VFR) within a single   stream, multiple streams can be chained together within a single file,   and each of those can have its own frame rate, thus allowing what is   essentially VFR. However, this is impractical if the frame rate needs   to change frequently.    Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari Theora support 3 Yes 3.5 No 10.5 No    Edge supports Theora with the optional   Web Media Extensions   add-on.    Container support Ogg RTP /   WebRTC compatible  No Supporting/Maintaining organization Xiph.org Specification https://www.theora.org/doc/ Licensing Open and free of royalties and any other licensing requirements VP8The Video Processor 8 (VP8) codec was initially created by On2 Technologies. Following their purchase of On2, Google released VP8 as an open and royalty-free video format under a promise not to enforce the relevant patents. In terms of quality and compression rate, VP8 is comparable to AVC. If supported by the browser, VP8 allows video with an alpha channel, allowing the video to play with the background able to be seen through the video to a degree specified by each pixel's alpha component. There is good browser support for VP8 in HTML content, especially within WebM files. This makes VP8 a good candidate for your content, although VP9 is an even better choice if available to you. Web browsers are required to support VP8 for WebRTC, but not all browsers that do so also support it in HTML audio and video elements.  Supported bit rates Arbitrary; no maximum unless level-based limitations are enforced Supported frame rates Arbitrary Compression   Lossy   DCT-based algorithm Supported frame sizes Up to 16,384 x 16,384 pixels Supported color modes Y'CbCr with 4:2:0 chroma subsampling at 8 bits per component HDR support No Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari VP8 support 25 14 4 9 16 12.1 MSE compatibility Yes  Edge support for VP8 requires the use of Media Source Extensions. macOS: Safari 14.1 supports VP8 in WebRTC, MSE and video elements. Safari 12.2 only supports VP8 in WebRTC connections. iOS: Safari 12.1 and later support VP8 in WebRTC connections only. Firefox only supports VP8 in MSE when no H.264 hardware decoder is available. Use MediaSource.isTypeSupported() to check for availability. Container support 3GP,   Ogg,   WebM  RTP /   WebRTC compatible  Yes; VP8 is one of the spec-required codecs for WebRTC Supporting/Maintaining organization Google Specification RFC 6386 Licensing Open and free of royalties and any other licensing requirements VP9 Video Processor 9 (VP9) is the successor to the older VP8 standard developed by Google. Like VP8, VP9 is entirely open and royalty-free. Its encoding and decoding performance is comparable to or slightly faster than that of AVC, but with better quality. VP9's encoded video quality is comparable to that of HEVC at similar bit rates.  VP9's main profile supports only 8-bit color depth at 4:2:0 chroma subsampling levels, but its profiles include support for deeper color and the full range of chroma subsampling modes. It supports several HDR implementations, and offers substantial freedom in selecting frame rates, aspect ratios, and frame sizes.  VP9 is widely supported by browsers, and hardware implementations of the codec are fairly common. VP9 is one of the two video codecs mandated by WebM (the other being VP8). Note however that Safari support for WebM and VP9 was only introduced in version 14.1, so if you choose to use VP9, consider offering a fallback format such as AVC or HEVC for iPhone, iPad, and Mac users.  VP9 is a good choice if you are able to use a WebM container (and can provide fallback video when needed). This is especially true if you wish to use an open codec rather than a proprietary one.  Supported bit rates Arbitrary; no maximum unless level-based limitations are enforced Supported frame rates Arbitrary Compression   Lossy   DCT-based algorithm Supported frame sizes Up to 65,536 x 65,536 pixels Supported color modes  Profile Color depths Chroma subsampling  Profile 0 8 4:2:0 Profile 1 8 4:2:0, 4:2:2, and 4:4:4 Profile 2 10 to 12 4:2:0 Profile 3 10 to 12 4:2:0, 4:2:2, and f:4:4    Color spaces supported:   Rec. 601,   Rec. 709,   Rec. 2020,   SMPTE C, SMPTE-240M   (obsolete; replaced by Rec. 709), and   sRGB.    HDR support   Yes; HDR10+, HLG, and   PQ Variable Frame Rate (VFR) support Yes Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari VP9 support 29 14 28 No 10.6 14 (macOS), 15 (iOS) MSE compatibility Yes 14 (macOS 11.3+), 15 (iOS)    Firefox only supports VP8 in MSE when no H.264 hardware decoder is available. Use   MediaSource.isTypeSupported() to check for availability.   Safari 14: (macOS, iOS) supports VP9 in WebM for WebRTC. Safari 14: (macOS) Supports VP9 in MSE from MacOS 11.3. Safari 14.1: (macOS) supports WebM files containing VP9 video tracks ""everywhere"". Safari 15: (macOS) supports VP9 in WebM in MSE.  Container support MP4,   Ogg,   WebM RTP / WebRTC compatible Yes Supporting/Maintaining organization Google Specification https://www.webmproject.org/vp9/ Licensing Open and free of royalties and any other licensing requirements Choosing a video codecThe decision as to which codec or codecs to use begins with a series of questions to prepare yourself: Do you wish to use an open format, or are proprietary formats also to be considered? Do you have the resources to produce more than one format for each of your videos? The ability to provide a fallback option vastly simplifies the decision-making process. Are there any browsers you're willing to sacrifice compatibility with? How old is the oldest version of web browser you need to support? For example, do you need to work on every browser shipped in the past five years, or just the past one year? In the sections below, we offer recommended codec selections for specific use cases. For each use case, you'll find up to two recommendations. If the codec which is considered best for the use case is proprietary or may require royalty payments, then two options are provided: first, an open and royalty-free option, followed by the proprietary one. If you are only able to offer a single version of each video, you can choose the format that's most appropriate for your needs. The first one is recommended as being a good combination of quality, performance, and compatibility. The second option will be the most broadly compatible choice, at the expense of some amount of quality, performance, and/or size.Recommendations for everyday videosFirst, let's look at the best options for videos presented on a typical website such as a blog, informational site, small business website where videos are used to demonstrate products (but not where the videos themselves are a product), and so forth. A WebM container using the VP9 codec for video and the Opus codec for audio. These are all open, royalty-free formats which are generally well-supported, although only in quite recent browsers, which is why a fallback is a good idea.  <video controls src=""filename.webm""></video> An MP4 container and the AVC (H.264) video codec, ideally with AAC as your audio codec. This is because the MP4 container with AVC and AAC codecs within is a broadly-supported combinationâby every major browser, in factâand the quality is typically good for most use cases. Make sure you verify your compliance with the license requirements, however.  <video controls> <source type=""video/webm"" src=""filename.webm"" /> <source type=""video/mp4"" src=""filename.mp4"" /> </video>  Note: The <video> element requires a closing </video> tag, whether or not you have any <source> elements inside it. Recommendations for high-quality video presentationIf your mission is to present video at the highest possible quality, you will probably benefit from offering as many formats as possible, as the codecs capable of the best quality tend also to be the newest, and thus the most likely to have gaps in browser compatibility. A WebM container using AV1 for video and Opus for audio. If you're able to use the High or Professional profile when encoding AV1, at a high level like 6.3, you can get very high bit rates at 4K or 8K resolution, while maintaining excellent video quality. Encoding your audio using Opus's Fullband profile at a 48 kHz sample rate maximizes the audio bandwidth captured, capturing nearly the entire frequency range that's within human hearing.  <video controls src=""filename.webm""></video> An MP4 container using the HEVC codec using one of the advanced Main profiles, such as Main 4:2:2 with 10 or 12 bits of color depth, or even the Main 4:4:4 profile at up to 16 bits per component. At a high bit rate, this provides excellent graphics quality with remarkable color reproduction. In addition, you can optionally include HDR metadata to provide high dynamic range video. For audio, use the AAC codec at a high sample rate (at least 48 kHz but ideally 96kHz) and encoded with complex encoding rather than fast encoding.  <video controls> <source type=""video/webm"" src=""filename.webm"" /> <source type=""video/mp4"" src=""filename.mp4"" /> </video> Recommendations for archival, editing, or remixingThere are not currently any losslessâor even near-losslessâvideo codecs generally available in web browsers. The reason for this is simple: video is huge. Lossless compression is by definition less effective than lossy compression. For example, uncompressed 1080p video (1920 by 1080 pixels) with 4:2:0 chroma subsampling needs at least 1.5 Gbps. Using lossless compression such as FFV1 (which is not supported by web browsers) could perhaps reduce that to somewhere around 600 Mbps, depending on the content. That's still a huge number of bits to pump through a connection every second, and is not currently practical for any real-world use. This is the case even though some of the lossy codecs have a lossless mode available; the lossless modes are not implemented in any current web browsers. The best you can do is to select a high-quality codec that uses lossy compression and configure it to perform as little compression as possible. One way to do this is to configure the codec to use ""fast"" compression, which inherently means less compression is achieved. Preparing video externally To prepare video for archival purposes from outside your website or app, use a utility that performs compression on the original uncompressed video data. For example, the free x264 utility can be used to encode video in AVC format using a very high bit rate: x264 --crf 18 -preset ultrafast --output outfilename.mp4 infile While other codecs may have better best-case quality levels when compressing the video by a significant margin, their encoders tend to be slow enough that the nearly-lossless encoding you get with this compression is vastly faster at about the same overall quality level. Recording video Given the constraints on how close to lossless you can get, you might consider using AVC or AV1. For example, if you're using the MediaStream Recording API to record video, you might use code like the following when creating your MediaRecorder object: const kbps = 1024; const Mbps = kbps * kbps; const options = { mimeType: 'video/webm; codecs=""av01.2.19H.12.0.000.09.16.09.1, flac""', bitsPerSecond: 800 * Mbps, }; let recorder = new MediaRecorder(sourceStream, options); This example creates a MediaRecorder configured to record AV1 video using BT.2100 HDR in 12-bit color with 4:4:4 chroma subsampling and FLAC for lossless audio. The resulting file will use a bit rate of no more than 800 Mbps shared between the video and audio tracks. You will likely need to adjust these values depending on hardware performance, your requirements, and the specific codecs you choose to use. This bit rate is obviously not realistic for network transmission and would likely only be used locally. Breaking down the value of the codecs parameter into its dot-delineated properties, we see the following: Value Description  av01 The four-character code (4CC) designation identifying the AV1 codec. 2 The profile. A value of 2 indicates the Professional profile. A value of 1 is the High profile, while a value of 0 would specify the Main profile. 19H The level and tier. This value comes from the table in section A.3 of the AV1 specification, and indicates the high tier of Level 6.3. 12 The color depth. This indicates 12 bits per component. Other possible values are 8 and 10, but 12 is the highest-accuracy color representation available in AV1. 0 The monochrome mode flag. If 1, then no chroma planes would be recorded, and all data should be strictly luma data, resulting in a greyscale image. We've specified 0 because we want color. 000 The chroma subsampling mode, taken from section 6.4.2 in the AV1 specification. A value of 000, combined with the monochrome mode value 0, indicates that we want 4:4:4 chroma subsampling, or no loss of color data. 09 The color primaries to use. This value comes from section 6.4.2 in the AV1 specification; 9 indicates that we want to use BT.2020 color, which is used for HDR. 16 The transfer characteristics to use. This comes from section 6.4.2 as well; 16 indicates that we want to use the characteristics for BT.2100 PQ color. 09 The matrix coefficients to use, from the section 6.4.2 again. A value of 9 specifies that we want to use BT.2020 with variable luminance; this is also known as BT.2010 YbCbCr. 1 The video ""full range"" flag. A value of 1 indicates that we want the full color range to be used. The documentation for your codec choices will probably offer information you'll use when constructing your codecs parameter.See also Web audio codec guide Media container formats (file types) Handling media support issues in web content Codecs used by WebRTC RFC 6381: The ""Codecs"" and ""Profiles"" parameters for ""Bucket"" media types RFC 5334: Ogg Media Types RFC 3839: MIME Type Registrations for 3GPP Multimedia Files RFC 4381: MIME Type Registrations for 3GPP2 Multimedia Files RFC 4337: MIME Type Registrations for MPEG-4 Video codecs in Opera Video and audio codecs in Internet Explorer Video and audio codecs in Chrome Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 17, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
158,developer.mozilla.org/en-US/docs/Glossary/Wrapper,"developer.mozilla.org/en-US/docs/Glossary/Wrapper. Wrapper - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsWrapperArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoWrapperIn programming languages such as JavaScript, a wrapper is a function that is intended to call one or more other functions, sometimes purely for convenience, and sometimes adapting them to do a slightly different task in the process. For example, SDK Libraries for AWS are examples of wrappers.See also Wrapper function (Wikipedia) MDN Web Docs Glossary API Class Function Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
159,developer.mozilla.org/en-US/docs/Glossary/WindowProxy,"developer.mozilla.org/en-US/docs/Glossary/WindowProxy. WindowProxy - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsWindowProxyArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoWindowProxyA WindowProxy object is a wrapper for a Window object. A WindowProxy object exists in every browsing context. All operations performed on a WindowProxy object will also be applied to the underlying Window object it currently wraps. Therefore, interacting with a WindowProxy object is almost identical to directly interacting with a Window object. When a browsing context is navigated, the Window object its WindowProxy wraps is changed.See also HTML specification: WindowProxy section Stack Overflow question: WindowProxy and Window objects? Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
160,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/defineProperty,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/defineProperty. Object.defineProperty() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsObjectObject.defineProperty()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsObjectConstructorObject() constructorPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.assign()Object.create()Object.defineProperties()Object.defineProperty()Object.entries()Object.freeze()Object.fromEntries()Object.getOwnPropertyDescriptor()Object.getOwnPropertyDescriptors()Object.getOwnPropertyNames()Object.getOwnPropertySymbols()Object.getPrototypeOf()Object.hasOwn()Object.prototype.hasOwnProperty()Object.is()Object.isExtensible()Object.isFrozen()Object.prototype.isPrototypeOf()Object.isSealed()Object.keys()Object.preventExtensions()Object.prototype.propertyIsEnumerable()Object.seal()Object.setPrototypeOf()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()Object.values()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoObject.defineProperty()The Object.defineProperty() static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.Try itSyntaxObject.defineProperty(obj, prop, descriptor) Parameters obj The object on which to define the property. prop A string or Symbol specifying the key of the property to be defined or modified. descriptor The descriptor for the property being defined or modified. Return valueThe object that was passed to the function, with the specified property added or modified.DescriptionObject.defineProperty() allows a precise addition to or modification of a property on an object. Normal property addition through assignment creates properties which show up during property enumeration (for...in, Object.keys(), etc.), whose values may be changed and which may be deleted. This method allows these extra details to be changed from their defaults. By default, properties added using Object.defineProperty() are not writable, not enumerable, and not configurable. In addition, Object.defineProperty() uses the [[DefineOwnProperty]] internal method, instead of [[Set]], so it does not invoke setters, even when the property is already present. Property descriptors present in objects come in two main flavors: data descriptors and accessor descriptors. A data descriptor is a property with a value that may or may not be writable. An accessor descriptor is a property described by a getter-setter pair of functions. A descriptor must be one of these two flavors; it cannot be both. Both data and accessor descriptors are objects. They share the following optional keys (please note: the defaults mentioned here are in the case of defining properties using Object.defineProperty()): configurable when this is set to false, the type of this property cannot be changed between data property and accessor property, and the property may not be deleted, and other attributes of its descriptor cannot be changed (however, if it's a data descriptor with writable: true, the value can be changed, and writable can be changed to false). Defaults to false. enumerable true if and only if this property shows up during enumeration of the properties on the corresponding object. Defaults to false. A data descriptor also has the following optional keys: value The value associated with the property. Can be any valid JavaScript value (number, object, function, etc.). Defaults to undefined. writable true if the value associated with the property may be changed with an assignment operator. Defaults to false. An accessor descriptor also has the following optional keys: get A function which serves as a getter for the property, or undefined if there is no getter. When the property is accessed, this function is called without arguments and with this set to the object through which the property is accessed (this may not be the object on which the property is defined due to inheritance). The return value will be used as the value of the property. Defaults to undefined. set A function which serves as a setter for the property, or undefined if there is no setter. When the property is assigned, this function is called with one argument (the value being assigned to the property) and with this set to the object through which the property is assigned. Defaults to undefined. If a descriptor doesn't have any of the value, writable, get, and set keys, it is treated as a data descriptor. If a descriptor has both [value or writable] and [get or set] keys, an exception is thrown. These attributes are not necessarily the descriptor's own properties. Inherited properties will be considered as well. In order to ensure these defaults are preserved, you might freeze existing objects in the descriptor object's prototype chain upfront, specify all options explicitly, or point to null with Object.create(null). const obj = {}; // 1. Using a null prototype: no inherited properties const descriptor = Object.create(null); descriptor.value = ""static""; // not enumerable, not configurable, not writable as defaults Object.defineProperty(obj, ""key"", descriptor); // 2. Being explicit by using a throw-away object literal with all attributes present Object.defineProperty(obj, ""key2"", { enumerable: false, configurable: false, writable: false, value: ""static"", }); // 3. Recycling same object function withValue(value) { const d =  withValue.d ||  (withValue.d = {  enumerable: false,  writable: false,  configurable: false,  value,  }); // avoiding duplicate operation for assigning value if (d.value !== value) d.value = value; return d; } // and Object.defineProperty(obj, ""key"", withValue(""static"")); // if freeze is available, prevents adding or // removing the object prototype properties // (value, get, set, enumerable, writable, configurable) (Object.freeze || Object)(Object.prototype); When the property already exists, Object.defineProperty() attempts to modify the property according to the values in the descriptor and the property's current configuration. If the old descriptor had its configurable attribute set to false, the property is said to be non-configurable. It is not possible to change any attribute of a non-configurable accessor property, and it is not possible to switch between data and accessor property types. For data properties with writable: true, it is possible to modify the value and change the writable attribute from true to false. A TypeError is thrown when attempts are made to change non-configurable property attributes (except value and writable, if permitted), except when defining a value same as the original value on a data property. When the current property is configurable, defining an attribute to undefined effectively deletes it. For example, if o.k is an accessor property, Object.defineProperty(o, ""k"", { set: undefined }) will remove the setter, making k only have a getter and become readonly. If an attribute is absent from the new descriptor, the old descriptor attribute's value is kept (it won't be implicitly re-defined to undefined). It is possible to toggle between data and accessor property by giving a descriptor of a different ""flavor"". For example, if the new descriptor is a data descriptor (with value or writable), the original descriptor's get and set attributes will both be dropped.ExamplesCreating a propertyWhen the property specified doesn't exist in the object, Object.defineProperty() creates a new property as described. Fields may be omitted from the descriptor and default values for those fields are inputted. const o = {}; // Creates a new object // Example of an object property added // with defineProperty with a data property descriptor Object.defineProperty(o, ""a"", { value: 37, writable: true, enumerable: true, configurable: true, }); // 'a' property exists in the o object and its value is 37 // Example of an object property added // with defineProperty with an accessor property descriptor let bValue = 38; Object.defineProperty(o, ""b"", { get() {  return bValue; }, set(newValue) {  bValue = newValue; }, enumerable: true, configurable: true, }); o.b; // 38 // 'b' property exists in the o object and its value is 38 // The value of o.b is now always identical to bValue, // unless o.b is redefined // You cannot try to mix both: Object.defineProperty(o, ""conflict"", { value: 0x9f91102, get() {  return 0xdeadbeef; }, }); // throws a TypeError: value appears // only in data descriptors, // get appears only in accessor descriptors Modifying a propertyWhen modifying an existing property, the current property configuration determines if the operator succeeds, does nothing, or throws a TypeError. Writable attribute When the writable property attribute is false, the property is said to be ""non-writable"". It cannot be reassigned. Trying to write to a non-writable property doesn't change it and results in an error in strict mode. const o = {}; // Creates a new object Object.defineProperty(o, ""a"", { value: 37, writable: false, }); console.log(o.a); // 37 o.a = 25; // No error thrown // (it would throw in strict mode, // even if the value had been the same) console.log(o.a); // 37; the assignment didn't work // strict mode (() => { ""use strict""; const o = {}; Object.defineProperty(o, ""b"", {  value: 2,  writable: false, }); o.b = 3; // throws TypeError: ""b"" is read-only return o.b; // returns 2 without the line above })(); Enumerable attribute The enumerable property attribute defines whether the property is considered by Object.assign() or the spread operator. For non-Symbol properties, it also defines whether it shows up in a for...in loop and Object.keys() or not. For more information, see Enumerability and ownership of properties. const o = {}; Object.defineProperty(o, ""a"", { value: 1, enumerable: true, }); Object.defineProperty(o, ""b"", { value: 2, enumerable: false, }); Object.defineProperty(o, ""c"", { value: 3, }); // enumerable defaults to false o.d = 4; // enumerable defaults to true when creating a property by setting it Object.defineProperty(o, Symbol.for(""e""), { value: 5, enumerable: true, }); Object.defineProperty(o, Symbol.for(""f""), { value: 6, enumerable: false, }); for (const i in o) { console.log(i); } // Logs 'a' and 'd' (always in that order) Object.keys(o); // ['a', 'd'] o.propertyIsEnumerable(""a""); // true o.propertyIsEnumerable(""b""); // false o.propertyIsEnumerable(""c""); // false o.propertyIsEnumerable(""d""); // true o.propertyIsEnumerable(Symbol.for(""e"")); // true o.propertyIsEnumerable(Symbol.for(""f"")); // false const p = { ...o }; p.a; // 1 p.b; // undefined p.c; // undefined p.d; // 4 p[Symbol.for(""e"")]; // 5 p[Symbol.for(""f"")]; // undefined Configurable attribute The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than value and writable) can be changed. This example illustrates a non-configurable accessor property. const o = {}; Object.defineProperty(o, ""a"", { get() {  return 1; }, configurable: false, }); Object.defineProperty(o, ""a"", { configurable: true, }); // throws a TypeError Object.defineProperty(o, ""a"", { enumerable: true, }); // throws a TypeError Object.defineProperty(o, ""a"", { set() {}, }); // throws a TypeError (set was undefined previously) Object.defineProperty(o, ""a"", { get() {  return 1; }, }); // throws a TypeError // (even though the new get does exactly the same thing) Object.defineProperty(o, ""a"", { value: 12, }); // throws a TypeError // ('value' can be changed when 'configurable' is false, but only when the property is a writable data property) console.log(o.a); // 1 delete o.a; // Nothing happens; throws an error in strict mode console.log(o.a); // 1 If the configurable attribute of o.a had been true, none of the errors would be thrown and the property would be deleted at the end. This example illustrates a non-configurable but writable data property. The property's value can still be changed, and writable can still be toggled from true to false. const o = {}; Object.defineProperty(o, ""b"", { writable: true, configurable: false, }); console.log(o.b); // undefined Object.defineProperty(o, ""b"", { value: 1, }); // Even when configurable is false, because the object is writable, we may still replace the value console.log(o.b); // 1 o.b = 2; // We can change the value with assignment operators as well console.log(o.b); // 2 // Toggle the property's writability Object.defineProperty(o, ""b"", { writable: false, }); Object.defineProperty(o, ""b"", { value: 1, }); // TypeError: because the property is neither writable nor configurable, it cannot be modified // At this point, there's no way to further modify 'b' // or restore its writability This example illustrates a configurable but non-writable data property. The property's value may still be replaced with defineProperty (but not with assignment operators), and writable may be toggled. const o = {}; Object.defineProperty(o, ""b"", { writable: false, configurable: true, }); Object.defineProperty(o, ""b"", { value: 1, }); // We can replace the value with defineProperty console.log(o.b); // 1 o.b = 2; // throws TypeError in strict mode: cannot change a non-writable property's value with assignment This example illustrates a non-configurable and non-writable data property. There's no way to update any attribute of the property, including its value. const o = {}; Object.defineProperty(o, ""b"", { writable: false, configurable: false, }); Object.defineProperty(o, ""b"", { value: 1, }); // TypeError: the property cannot be modified because it is neither writable nor configurable. Adding properties and default valuesIt is important to consider the way default values of attributes are applied. There is often a difference between using property accessors to assign a value and using Object.defineProperty(), as shown in the example below. const o = {}; o.a = 1; // is equivalent to: Object.defineProperty(o, ""a"", { value: 1, writable: true, configurable: true, enumerable: true, }); // On the other hand, Object.defineProperty(o, ""a"", { value: 1 }); // is equivalent to: Object.defineProperty(o, ""a"", { value: 1, writable: false, configurable: false, enumerable: false, }); Custom setters and gettersThe example below shows how to implement a self-archiving object. When temperature property is set, the archive array gets a log entry. function Archiver() { let temperature = null; const archive = []; Object.defineProperty(this, ""temperature"", {  get() {  console.log(""get!"");  return temperature;  },  set(value) {  temperature = value;  archive.push({ val: temperature });  }, }); this.getArchive = () => archive; } const arc = new Archiver(); arc.temperature; // 'get!' arc.temperature = 11; arc.temperature = 13; arc.getArchive(); // [{ val: 11 }, { val: 13 }] In this example, a getter always returns the same value. const pattern = { get() {  return ""I always return this string, whatever you have assigned""; }, set() {  this.myname = ""this is my name string""; }, }; function TestDefineSetAndGet() { Object.defineProperty(this, ""myproperty"", pattern); } const instance = new TestDefineSetAndGet(); instance.myproperty = ""test""; console.log(instance.myproperty); // I always return this string, whatever you have assigned console.log(instance.myname); // this is my name string Inheritance of propertiesIf an accessor property is inherited, its get and set methods will be called when the property is accessed and modified on descendant objects. If these methods use a variable to store the value, this value will be shared by all objects. function MyClass() {} let value; Object.defineProperty(MyClass.prototype, ""x"", { get() {  return value; }, set(x) {  value = x; }, }); const a = new MyClass(); const b = new MyClass(); a.x = 1; console.log(b.x); // 1 This can be fixed by storing the value in another property. In get and set methods, this points to the object which is used to access or modify the property. function MyClass() {} Object.defineProperty(MyClass.prototype, ""x"", { get() {  return this.storedX; }, set(x) {  this.storedX = x; }, }); const a = new MyClass(); const b = new MyClass(); a.x = 1; console.log(b.x); // undefined Unlike accessor properties, data properties are always set on the object itself, not on a prototype. However, if a non-writable data property is inherited, it is still prevented from being modified on the object. function MyClass() {} MyClass.prototype.x = 1; Object.defineProperty(MyClass.prototype, ""y"", { writable: false, value: 1, }); const a = new MyClass(); a.x = 2; console.log(a.x); // 2 console.log(MyClass.prototype.x); // 1 a.y = 2; // Ignored, throws in strict mode console.log(a.y); // 1 console.log(MyClass.prototype.y); // 1 SpecificationsSpecificationECMAScript Language Specification # sec-object.definepropertyBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Enumerability and ownership of properties Object.defineProperties() Object.prototype.propertyIsEnumerable() Object.getOwnPropertyDescriptor() get set Object.create() Reflect.defineProperty() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
161,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyboardEvent. KeyboardEvent: initKeyboardEvent() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventinitKeyboardEvent()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilityUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleSyntaxSpecificationsBrowser compatibilityKeyboardEvent: initKeyboardEvent() methodDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The KeyboardEvent.initKeyboardEvent() method initializes the attributes of a keyboard event object. This method was introduced in draft of DOM Level 3 Events, but deprecated in newer draft. Gecko won't support this feature since implementing this method as experimental broke existing web apps (see Firefox bug 999645). Web applications should use constructor instead of this if it's available. SyntaxinitKeyboardEvent(type, canBubble, cancelable,     view, key, location, ctrlKey,     altKey, shiftKey, metaKey) Parameters type   The type of keyboard event; browsers always set it to one of keydown,  keypress, or keyup.  canBubble Optional Indicates whether or not the event can bubble. Defaults to false. cancelable Optional Indicates whether or not the event can be canceled. Defaults to false. view Optional The WindowProxy it is associated to. Defaults to null. key Optional The value of the key attribute. Defaults to """". location Optional The value of the location attribute. Defaults to 0. ctrlKey Optional Indicates whether the control key modifier is active. Defaults to false. altKey Optional Indicates whether the alt key modifier is active. Defaults to false. shiftKey Optional Indicates whether the shift key modifier is active. Defaults to false. metaKey Optional Indicates whether the meta key modifier is active. Defaults to false. Return valueNone (undefined).SpecificationsSpecificationUI Events # dom-keyboardevent-initkeyboardeventThe KeyboardEvent interface specification went through numerous draft versions, first under DOM Events Level 2 where it was dropped as no consensus arose, then under DOM Events Level 3. This led to the implementation of non-standard initialization methods, the early DOM Events Level 2 version, KeyboardEvent.initKeyEvent() by Gecko browsers and the early DOM Events Level 3 version, KeyboardEvent.initKeyboardEvent() by others. Both have been superseded by the modern usage of a constructor: KeyboardEvent().Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
162,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/referrerPolicy,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/referrerPolicy. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
163,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/ping,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/ping. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
164,developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail. UIEvent: detail property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventdetailArticle ActionsEnglish (US)In this articleSpecificationsBrowser compatibilityUI EventsUIEventConstructorUIEvent()Instance propertiesdetail sourceCapabilities Experimental viewwhich Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleSpecificationsBrowser compatibilityUIEvent: detail propertyThe UIEvent.detail read-only property, when non-zero, provides the current (or next, depending on the event) click count. For click or dblclick events, UIEvent.detail is the current click count. For mousedown or mouseup events, UIEvent.detail is 1 plus the current click count. For all other UIEvent objects, UIEvent.detail is always zero.SpecificationsSpecificationUI Events # dom-uievent-detailBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
165,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator/precedence#short-circuiting,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator/precedence#short-circuiting. Operator precedence - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceExpressions and operatorsOperator precedenceArticle ActionsEnglish (US)In this articleTry itPrecedence And AssociativityShort-circuitingTable JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itPrecedence And AssociativityShort-circuitingTableOperator precedenceOperator precedence determines how operators are parsed concerning each other. Operators with higher precedence become the operands of operators with lower precedence.Try itPrecedence And AssociativityConsider an expression describable by the representation below, where both OP1 and OP2 are fill-in-the-blanks for OPerators. a OP1 b OP2 c The combination above has two possible interpretations: (a OP1 b) OP2 c a OP1 (b OP2 c) Which one the language decides to adopt depends on the identity of OP1 and OP2. If OP1 and OP2 have different precedence levels (see the table below), the operator with the higher precedence goes first and associativity does not matter. Observe how multiplication has higher precedence than addition and executed first, even though addition is written first in the code. console.log(3 + 10 * 2); // 23 console.log(3 + (10 * 2)); // 23, because parentheses here are superfluous console.log((3 + 10) * 2); // 26, because the parentheses change the order Within operators of the same precedence, the language groups them by associativity. Left-associativity (left-to-right) means that it is interpreted as (a OP1 b) OP2 c, while right-associativity (right-to-left) means it is interpreted as a OP1 (b OP2 c). Assignment operators are right-associative, so you can write: a = b = 5; // same as writing a = (b = 5); with the expected result that a and b get the value 5. This is because the assignment operator returns the value that is assigned. First, b is set to 5. Then the a is also set to 5 â the return value of b = 5, a.k.a. right operand of the assignment. As another example, the unique exponentiation operator has right-associativity, whereas other arithmetic operators have left-associativity. const a = 4 ** 3 ** 2; // Same as 4 ** (3 ** 2); evaluates to 262144 const b = 4 / 3 / 2; // Same as (4 / 3) / 2; evaluates to 0.6666... Operators are first grouped by precedence, and then, for adjacent operators that have the same precedence, by associativity. So, when mixing division and exponentiation, the exponentiation always comes before the division. For example, 2 ** 3 / 3 ** 2 results in 0.8888888888888888 because it is the same as (2 ** 3) / (3 ** 2). For prefix unary operators, suppose we have the following pattern: OP1 a OP2 b where OP1 is a prefix unary operator and OP2 is a binary operator. If OP1 has higher precedence than OP2, then it would be grouped as (OP1 a) OP2 b; otherwise, it would be OP1 (a OP2 b). const a = 1; const b = 2; typeof a + b; // Equivalent to (typeof a) + b; result is ""number2"" If the unary operator is on the second operand: a OP2 OP1 b Then the binary operator OP2 must have lower precedence than the unary operator OP1 for it to be grouped as a OP2 (OP1 b). For example, the following is invalid: function* foo() { a + yield 1; } Because + has higher precedence than yield, this would become (a + yield) 1 â but because yield is a reserved word in generator functions, this would be a syntax error. Luckily, most unary operators have higher precedence than binary operators and do not suffer from this pitfall. If we have two prefix unary operators: OP1 OP2 a Then the unary operator closer to the operand, OP2, must have higher precedence than OP1 for it to be grouped as OP1 (OP2 a). It's possible to get it the other way and end up with (OP1 OP2) a: async function* foo() { await yield 1; } Because await has higher precedence than yield, this would become (await yield) 1, which is awaiting an identifier called yield, and a syntax error. Similarly, if you have new !A;, because ! has lower precedence than new, this would become (new !) A, which is obviously invalid. (This code looks nonsensical to write anyway, since !A always produces a boolean, not a constructor function.) For postfix unary operators (namely, ++ and --), the same rules apply. Luckily, both operators have higher precedence than any binary operator, so the grouping is always what you would expect. Moreover, because ++ evaluates to a value, not a reference, you can't chain multiple increments together either, as you may do in C. let a = 1; a++++; // SyntaxError: Invalid left-hand side in postfix operation. Operator precedence will be handled recursively. For example, consider this expression: 1 + 2 ** 3 * 4 / 5 >> 6 First, we group operators with different precedence by decreasing levels of precedence. The ** operator has the highest precedence, so it's grouped first. Looking around the ** expression, it has * on the right and + on the left. * has higher precedence, so it's grouped first. * and / have the same precedence, so we group them together for now. Looking around the *// expression grouped in 2, because + has higher precedence than >>, the former is grouped.  (1 + ( (2 ** 3) * 4 / 5) ) >> 6 // â â ââ 1. ââ  â â // â âââââââ 2. ââââââââ â // âââââââââââ 3. âââââââââââ Within the *// group, because they are both left-associative, the left operand would be grouped. (1 + ( ( (2 ** 3) * 4 ) / 5) ) >> 6 // â â â ââ 1. ââ  â â â // â ââââââââââ 2. âââââââââ â // âââââââââââââ 3. âââââââââââââ //  ââââââ 4. ââââââ Note that operator precedence and associativity only affect the order of evaluation of operators (the implicit grouping), but not the order of evaluation of operands. The operands are always evaluated from left-to-right. The higher-precedence expressions are always evaluated first, and their results are then composed according to the order of operator precedence. function echo(name, num) { console.log(`Evaluating the ${name} side`); return num; } // Exponentiation operator (**) is right-associative, // but all call expressions (echo()), which have higher precedence, // will be evaluated before ** does console.log(echo(""left"", 4) ** echo(""middle"", 3) ** echo(""right"", 2)); // Evaluating the left side // Evaluating the middle side // Evaluating the right side // 262144 // Exponentiation operator (**) has higher precedence than division (/), // but evaluation always starts with the left operand console.log(echo(""left"", 4) / echo(""middle"", 3) ** echo(""right"", 2)); // Evaluating the left side // Evaluating the middle side // Evaluating the right side // 0.4444444444444444 If you are familiar with binary trees, think about it as a post-order traversal.     /  ââââââââââ´âââââââââ echo(""left"", 4)   **     ââââââââââ´âââââââââ   echo(""middle"", 3) echo(""right"", 2) After all operators have been properly grouped, the binary operators would form a binary tree. Evaluation starts from the outermost group â which is the operator with the lowest precedence (/ in this case). The left operand of this operator is first evaluated, which may be composed of higher-precedence operators (such as a call expression echo(""left"", 4)). After the left operand has been evaluated, the right operand is evaluated in the same fashion. Therefore, all leaf nodes â the echo() calls â would be visited left-to-right, regardless of the precedence of operators joining them.Short-circuitingIn the previous section, we said ""the higher-precedence expressions are always evaluated first"" â this is generally true, but it has to be amended with the acknowledgement of short-circuiting, in which case an operand may not be evaluated at all. Short-circuiting is jargon for conditional evaluation. For example, in the expression a && (b + c), if a is falsy, then the sub-expression (b + c) will not even get evaluated, even if it is grouped and therefore has higher precedence than &&. We could say that the logical AND operator (&&) is ""short-circuited"". Along with logical AND, other short-circuited operators include logical OR (||), nullish coalescing (??), and optional chaining (?.). a || (b * c); // evaluate `a` first, then produce `a` if `a` is ""truthy"" a && (b < c); // evaluate `a` first, then produce `a` if `a` is ""falsy"" a ?? (b || c); // evaluate `a` first, then produce `a` if `a` is not `null` and not `undefined` a?.b.c; // evaluate `a` first, then produce `undefined` if `a` is `null` or `undefined` When evaluating a short-circuited operator, the left operand is always evaluated. The right operand will only be evaluated if the left operand cannot determine the result of the operation. Note: The behavior of short-circuiting is baked in these operators. Other operators would always evaluate both operands, regardless if that's actually useful â for example, NaN * foo() will always call foo, even when the result would never be something other than NaN. The previous model of a post-order traversal still stands. However, after the left subtree of a short-circuiting operator has been visited, the language will decide if the right operand needs to be evaluated. If not (for example, because the left operand of || is already truthy), the result is directly returned without visiting the right subtree. Consider this case: function A() { console.log('called A'); return false; } function B() { console.log('called B'); return false; } function C() { console.log('called C'); return true; } console.log(C() || B() && A()); // Logs: // called C // true Only C() is evaluated, despite && having higher precedence. This does not mean that || has higher precedence in this case â it's exactly because (B() && A()) has higher precedence that causes it to be neglected as a whole. If it's re-arranged as: console.log(A() && C() || B()); // Logs: // called A // called B // false Then the short-circuiting effect of && would only prevent C() from being evaluated, but because A() && C() as a whole is false, B() would still be evaluated. However, note that short-circuiting does not change the final evaluation outcome. It only affects the evaluation of operands, not how operators are grouped â if evaluation of operands doesn't have side effects (for example, logging to the console, assigning to variables, throwing an error), short-circuiting would not be observable at all. The assignment counterparts of these operators (&&=, ||=, ??=) are short-circuited as well. They are short-circuited in a way that the assignment does not happen at all.TableThe following table lists operators in order from highest precedence (18) to lowest precedence (1). Several notes about the table: Not all syntax included here are ""operators"" in the strict sense. For example, spread ... and arrow => are typically not regarded as operators. However, we still included them to show how tightly they bind compared to other operators/expressions. The left operand of an exponentiation ** (precedence 13) cannot be one of the unary operators with precedence 14 without grouping, or there will be a SyntaxError. That means, although -1 ** 2 is technically unambiguous, the language requires you to use (-1) ** 2 instead. The operands of nullish coalescing ?? (precedence 3) cannot be a logical OR || (precedence 3) or logical AND && (precedence 4). That means you have to write (a ?? b) || c or a ?? (b || c), instead of a ?? b || c. Some operators have certain operands that require expressions narrower than those produced by higher-precedence operators. For example, the right-hand side of member access . (precedence 17) must be an identifier instead of a grouped expression. The left-hand side of arrow => (precedence 2) must be an arguments list or a single identifier instead of some random expression. Some operators have certain operands that accept expressions wider than those produced by higher-precedence operators. For example, the bracket-enclosed expression of bracket notation [ â¦ ] (precedence 17) can be any expression, even comma (precedence 1) joined ones. These operators act as if that operand is ""automatically grouped"". In this case we will omit the associativity.  Precedence Operator type Associativity Individual operators 18 Grouping n/a ( â¦ ) 17 Member Access left-to-right â¦ . â¦ Optional chaining â¦ ?. â¦ Computed Member     Access n/a â¦ [ â¦ ] new (with argument list) new â¦ ( â¦ ) Function Call â¦ ( â¦ ) 16 new (without argument list) n/a new â¦ 15 Postfix     Increment n/a â¦ ++ Postfix     Decrement â¦ -- 14 Logical NOT (!) n/a ! â¦ Bitwise NOT (~) ~ â¦ Unary plus (+) + â¦ Unary negation (-) - â¦ Prefix     Increment ++ â¦ Prefix     Decrement -- â¦ typeof typeof â¦ void void â¦ delete delete â¦ await await â¦ 13 Exponentiation (**) right-to-left â¦ ** â¦ 12 Multiplication (*) left-to-right â¦ * â¦ Division (/) â¦ / â¦ Remainder (%) â¦ % â¦ 11 Addition (+) left-to-right â¦ + â¦ Subtraction (-) â¦ - â¦ 10 Bitwise Left Shift (<<) left-to-right â¦ << â¦ Bitwise Right Shift (>>) â¦ >> â¦ Bitwise Unsigned Right Shift (>>>) â¦ >>> â¦ 9 Less Than (<) left-to-right â¦ < â¦ Less Than Or Equal (<=) â¦ <= â¦ Greater Than (>) â¦ > â¦ Greater Than Or Equal (>=) â¦ >= â¦ in â¦ in â¦ instanceof â¦ instanceof â¦ 8 Equality (==) left-to-right â¦ == â¦ Inequality (!=) â¦ != â¦ Strict Equality (===) â¦ === â¦ Strict Inequality (!==) â¦ !== â¦ 7 Bitwise AND (&) left-to-right â¦ & â¦ 6 Bitwise XOR (^) left-to-right â¦ ^ â¦ 5 Bitwise OR (|) left-to-right â¦ | â¦ 4 Logical AND (&&) left-to-right â¦ && â¦ 3 Logical OR (||) left-to-right â¦ || â¦ Nullish coalescing operator (??) â¦ ?? â¦ 2 Assignment right-to-left â¦ = â¦ â¦ += â¦ â¦ -= â¦ â¦ **= â¦ â¦ *= â¦ â¦ /= â¦ â¦ %= â¦ â¦ <<= â¦ â¦ >>= â¦ â¦ >>>= â¦ â¦ &= â¦ â¦ ^= â¦ â¦ |= â¦ â¦ &&= â¦ â¦ ||= â¦ â¦ ??= â¦ Conditional (ternary) operator right-to-left(Groups on expressions after ?) â¦ ? â¦ : â¦ Arrow (=>) right-to-left â¦ => â¦ yield n/a yield â¦ yield* yield* â¦ Spread (...) ... â¦ 1 Comma / Sequence left-to-right â¦ , â¦ Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
166,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/childElementCount,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/childElementCount. DocumentFragment: childElementCount property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentchildElementCountArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCount childrenfirstElementChildlastElementChildInstance methodsappend()getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: childElementCount property The Document.childElementCount read-only property returns the number of child elements of a DocumentFragment. To get the number of children of a specific element, see Element.childElementCount.ValueA number representing the number of children of the element.Exampleslet fragment = new DocumentFragment(); fragment.childElementCount; // 0 let paragraph = document.createElement(""p""); fragment.appendChild(paragraph); fragment.childElementCount; // 1 SpecificationsSpecificationDOM Standard # dom-parentnode-childelementcountBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.childElementCount Document.childElementCount Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
167,developer.mozilla.org/en-US/docs/Web/API/Document/drop/event,"developer.mozilla.org/en-US/docs/Web/API/Document/drop/event. HTMLElement: drop event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdropArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover Experimental styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover() Experimental showPopover() Experimental togglePopover() Experimental Eventsbeforeinputbeforetoggle Experimental changecopycutdragdragenddragenterdragleavedragoverdragstartdrop errorinputloadmscandidatewindowhide Non-standard mscandidatewindowshow Non-standard mscandidatewindowupdate Non-standard pastetoggle Experimental Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: drop eventThe drop event is fired when an element or text selection is dropped on a valid drop target.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""drop"", (event) => {}); ondrop = (event) => {}; Event typeA DragEvent. Inherits from Event.   Event     UIEvent     MouseEvent     DragEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ExamplesA minimal drag and drop exampleIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it over the other container, and then releasing it. We use three event handlers here: in the dragstart event handler, we get a reference to the element that the user dragged in the dragover event handler for the target container, we call event.preventDefault(), which enables it to receive drop events. in the drop event handler for the drop zone, we handle moving the draggable element from the original container to the drop zone. For a more complete example of drag and drop, see the page for the drag event. HTML <div class=""dropzone""> <div id=""draggable"" draggable=""true"">This div is draggable</div> </div> <div class=""dropzone"" id=""droptarget""></div> CSS body { /* Prevent the user selecting text in the example */ user-select: none; } #draggable { text-align: center; background: white; } .dropzone { width: 200px; height: 20px; background: blueviolet; margin: 10px; padding: 10px; } JavaScript let dragged = null; const source = document.getElementById(""draggable""); source.addEventListener(""dragstart"", (event) => { // store a ref. on the dragged elem dragged = event.target; }); const target = document.getElementById(""droptarget""); target.addEventListener(""dragover"", (event) => { // prevent default to allow drop event.preventDefault(); }); target.addEventListener(""drop"", (event) => { // prevent default action (open as link for some elements) event.preventDefault(); // move dragged element to the selected drop target if (event.target.className === ""dropzone"") {  dragged.parentNode.removeChild(dragged);  event.target.appendChild(dragged); } }); ResultSpecificationsSpecificationHTML Standard # ix-handler-ondropHTML Standard # event-dnd-dropBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Other drag and drop events:  drag dragstart dragend dragover dragenter dragleave This event on other targets:  Window: drop event Document: drop event SVGElement: drop event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
168,developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot,"developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot. Text: assignedSlot property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsTextassignedSlotArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilityDocument Object ModelTextConstructorText()Instance propertiesassignedSlot wholeTextInstance methodssplitText()Inheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueSpecificationsBrowser compatibilityText: assignedSlot property The read-only assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element. Value An HTMLSlotElement, or null if no <slot> element is associated with the text node. SpecificationsSpecificationDOM Standard # dom-slotable-assignedslotBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
169,developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps#accessibility/concerns,"developer.mozilla.org/en-US/docs/Web/CSS/font-variant-caps#accessibility/concerns. font-variant-caps - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSfont-variant-capsArticle ActionsEnglish (US)In this articleTry itSyntaxAccessibility concernsFormal definitionFormal syntaxExamplesSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleTry itSyntaxAccessibility concernsFormal definitionFormal syntaxExamplesSpecificationsBrowser compatibilitySee alsofont-variant-capsThe font-variant-caps CSS property controls the use of alternate glyphs for capital letters.Try it When a given font includes capital letter glyphs of multiple different sizes, this property selects the most appropriate ones. If petite capital glyphs are not available, they are rendered using small capital glyphs. If these are not present, the browser synthesizes them from the uppercase glyphs. Fonts sometimes include special glyphs for various caseless characters (such as punctuation marks) to better match the capitalized characters around them. However, small capital glyphs are never synthesized for caseless characters.Language-specific rulesThis property accounts for language-specific case mapping rules. For example: In Turkic languages, such as Turkish (tr), Azerbaijani (az), Crimean Tatar (crh), Volga Tatar (tt), and Bashkir (ba), there are two kinds of i (one with the dot, one without) and two case pairings: i/Ä° and Ä±/I. In German (de), the Ã may become áº (U+1E9E) in uppercase. In Greek (el), vowels lose their accent when the whole word is in uppercase (Î¬/Î), except for the disjunctive eta (Î®/Î). Also, diphthongs with an accent on the first vowel lose the accent and gain a diacritic on the second vowel (Î¬Î¹/ÎÎª). Syntax/* Keyword values */ font-variant-caps: normal; font-variant-caps: small-caps; font-variant-caps: all-small-caps; font-variant-caps: petite-caps; font-variant-caps: all-petite-caps; font-variant-caps: unicase; font-variant-caps: titling-caps; /* Global values */ font-variant-caps: inherit; font-variant-caps: initial; font-variant-caps: revert; font-variant-caps: revert-layer; font-variant-caps: unset; The font-variant-caps property is specified using a single keyword value from the list below. In each case, if the font doesn't support the OpenType value, then it synthesizes the glyphs.Values normal Deactivates of the use of alternate glyphs. small-caps Enables display of small capitals (OpenType feature: smcp). Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters. all-small-caps Enables display of small capitals for both upper and lowercase letters (OpenType features: c2sc, smcp). petite-caps Enables display of petite capitals (OpenType feature: pcap). all-petite-caps Enables display of petite capitals for both upper and lowercase letters (OpenType features: c2pc, pcap). unicase Enables display of mixture of small capitals for uppercase letters with normal lowercase letters (OpenType feature: unic). titling-caps Enables display of titling capitals (OpenType feature: titl). Uppercase letter glyphs are often designed for use with lowercase letters. When used in all uppercase titling sequences they can appear too strong. Titling capitals are designed specifically for this situation. Accessibility concernsLarge sections of text set with a font-variant value of all-small-caps or all-petite-caps may be difficult for people with cognitive concerns such as Dyslexia to read. MDN Understanding WCAG, Guideline 1.4 explanations W3C Understanding WCAG 2.1 Formal definitionInitial valuenormalApplies toall elements. It also applies to ::first-letter and ::first-line.InheritedyesComputed valueas specifiedAnimation typediscreteFormal syntaxfont-variant-caps = normal   | small-caps  | all-small-caps | petite-caps  | all-petite-caps | unicase   | titling-caps  ExamplesSetting the small-caps font variantHTML <p class=""small-caps"">Firefox rocks, small caps!</p> <p class=""normal"">Firefox rocks, normal caps!</p> CSS .small-caps { font-variant-caps: small-caps; font-style: italic; } .normal { font-variant-caps: normal; font-style: italic; } ResultSpecificationsSpecificationCSS Fonts Module Level 4 # font-variant-caps-propBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also font-variant font-variant-alternates font-variant-east-asian font-variant-emoji font-variant-ligatures font-variant-numeric font-variant-position Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
170,developer.mozilla.org/en-US/docs/Web/HTML/Element/u,"developer.mozilla.org/en-US/docs/Web/HTML/Element/u. <u>: The Unarticulated Annotation (Underline) element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<u>Article ActionsEnglish (US)In this articleTry itAttributesUsage notesExamplesTechnical summarySpecificationsBrowser compatibilitySee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleTry itAttributesUsage notesExamplesTechnical summarySpecificationsBrowser compatibilitySee also<u>: The Unarticulated Annotation (Underline) elementThe <u> HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS. Warning: This element used to be called the ""Underline"" element in older versions of HTML, and is still sometimes misused in this way. To underline text, you should instead apply a style that includes the CSS text-decoration property set to underline. Try it See the Usage notes section for further details on when it's appropriate to use <u> and when it isn't.AttributesThis element only includes the global attributes.Usage notesAlong with other pure styling elements, the original HTML Underline (<u>) element was deprecated in HTML 4; however, <u> was restored in HTML 5 with a new, semantic, meaning: to mark text as having some form of non-textual annotation applied. Note: Avoid using the <u> element with its default styling (of underlined text) in such a way as to be confused with a hyperlink, which is also underlined by default. Use casesValid use cases for the <u> element include annotating spelling errors, applying a proper name mark to denote proper names in Chinese text, and other forms of annotation. You should not use <u> to underline text for presentation purposes, or to denote titles of books.Other elements to consider usingIn most cases, you should use an element other than <u>, such as: <em> to denote stress emphasis <b> to draw attention to text <mark> to mark key words or phrases <strong> to indicate that text has strong importance <cite> to mark the titles of books or other publications <i> to denote technical terms, transliterations, thoughts, or names of vessels in Western texts To provide textual annotations (as opposed to the non-textual annotations created with <u>), use the <ruby> element. To apply an underlined appearance without any semantic meaning, use the text-decoration property's value underline.ExamplesIndicating a spelling errorThis example uses the <u> element and some CSS to display a paragraph which includes a misspelled error, with the error indicated in the red wavy underline style which is fairly commonly used for this purpose. HTML <p>This paragraph includes a <u class=""spelling"">wrnogly</u> spelled word.</p> In the HTML, we see the use of <u> with a class, spelling, which is used to indicate the misspelling of the word ""wrongly"". CSS u.spelling { text-decoration: red wavy underline; } This CSS indicates that when the <u> element is styled with the class spelling, it should have a red wavy underline underneath its text. This is a common styling for spelling errors. Another common style can be presented using red dashed underline. Result The result should be familiar to anyone who has used any of the more popular word processors available today.Avoiding <u>Most of the time, you actually don't want to use <u>. Here are some examples that show what you should do instead in several cases. Non-semantic underlines To underline text without implying any semantic meaning, use a <span> element with the text-decoration property set to ""underline"", as shown below. HTML <span class=""underline"">Today's Special</span> <br /> Chicken Noodle Soup With Carrots CSS .underline { text-decoration: underline; } Result Presenting a book title Book titles should be presented using the <cite> element instead of <u> or even <i>. Using the cite element <p>The class read <cite>Moby Dick</cite> in the first term.</p> Styling the cite element The default styling for the <cite> element renders the text in italics. You can override that using CSS: <p>The class read <cite>Moby Dick</cite> in the first term.</p> cite { font-style: normal; text-decoration: underline; } Technical summary Content categories Flow content,   phrasing content, palpable content.   Permitted content Phrasing content. Tag omission None, both the starting and ending tag are mandatory. Permitted parents   Any element that accepts   phrasing content.   Implicit ARIA role No corresponding role Permitted ARIA roles Any DOM interface HTMLElement SpecificationsSpecificationHTML Standard # the-u-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The <span>, <i>, <em>, <b>, and <cite> elements should usually be used instead. The CSS text-decoration property should be used for non-semantic underlining. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 13, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
171,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyEvent,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/initKeyEvent. KeyboardEvent: initKeyEvent() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventinitKeyEvent()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleSyntaxExamplesSpecificationsKeyboardEvent: initKeyEvent() method Warning: Do NOT use this method; Use the KeyboardEvent() constructor instead!  The method has been removed from the DOM specification and is not supported by any current browser.  Firefox hides this method behind the preference (dom.keyboardevent.init_key_event.enabled) from version 93 and plans to remove it shortly afterwards. Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The KeyboardEvent.initKeyEvent() method is used to initialize the value of an event created using document.createEvent (""KeyboardEvent""). Events initialized in this way must have been created with the document.createEvent (""KeyboardEvent"") method. initKeyEvent() must be called to set the event before it is dispatched. SyntaxinitKeyEvent (type, bubbles, cancelable, view,      ctrlKey, altKey, shiftKey, metaKey,      keyCode, charCode) Parameters type A string representing the type of event. bubbles   A boolean value indicating whether the event should bubble up through the  event chain or not (see bubbles).  cancelable A boolean value indicating whether the event can be canceled (see cancelable). view Specifies the UIEvent.view; this value may be null. ctrlKey   A boolean value that is true if the virtual key to be  generated is a combination of keys containing the Ctrl key.  altKey   A boolean value that is true if the virtual key to be  generated is a combination of keys containing the Alt key.  shiftKey   A boolean value that is true if the virtual key to be generated  is a combination of keys containing the Shiftkey.  metaKey   A boolean value that is true if the virtual key to be  generated is a combination of keys containing the Meta key.  keyCode   An unsigned long representing the virtual key code value of the key  which was pressed, otherwise 0. See KeyboardEvent.keyCode for the list of key codes.  charCode   An unsigned long representing the Unicode character associated with  the pressed key otherwise 0.  Return valueNone (undefined).Examplesconst event = document.createEvent(""KeyboardEvent""); // create a key event // define the event event.initKeyEvent( ""keypress"", // typeArg, true, // canBubbleArg, true, // cancelableArg, null, // viewArg, Specifies UIEvent.view. This value may be null. false, // ctrlKeyArg, false, // altKeyArg, false, // shiftKeyArg, false, // metaKeyArg, 9, // keyCodeArg, 0 ); // charCodeArg); document.getElementById(""blah"").dispatchEvent(event); Specifications This implementation of keyboard events is based on the key events spec in the early versions of DOM 2 Events, later removed from that spec in favor of KeyboardEvent() that should be used instead. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
172,developer.mozilla.org/en-US/docs/Glossary/Preflight/request,"developer.mozilla.org/en-US/docs/Glossary/Preflight/request. Preflight request - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsPreflight requestArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoPreflight requestA CORS preflight request is a CORS request that checks to see if the CORS protocol is understood and a server is aware using specific methods and headers. It is an OPTIONS request, using three HTTP request headers: Access-Control-Request-Method, Access-Control-Request-Headers, and the Origin header. A preflight request is automatically issued by a browser and in normal cases, front-end developers don't need to craft such requests themselves. It appears when request is qualified as ""to be preflighted"" and omitted for simple requests. For example, a client might be asking a server if it would allow a DELETE request, before sending a DELETE request, by using a preflight request: OPTIONS /resource/foo Access-Control-Request-Method: DELETE Access-Control-Request-Headers: origin, x-requested-with Origin: https://foo.bar.org If the server allows it, then it will respond to the preflight request with an Access-Control-Allow-Methods response header, which lists DELETE: HTTP/1.1 204 No Content Connection: keep-alive Access-Control-Allow-Origin: https://foo.bar.org Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE Access-Control-Max-Age: 86400 The preflight response can be optionally cached for the requests created in the same URL using Access-Control-Max-Age header like in the above example. To cache preflight responses, the browser uses a specific cache that is separate from the general HTTP cache that the browser manages. Preflight responses are never cached in the browser's general HTTP cache.See also CORS OPTIONS Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
173,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/lastElementChild,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/lastElementChild. DocumentFragment: lastElementChild property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentlastElementChildIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChildlastElementChild Instance methodsappend()getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: lastElementChild property The DocumentFragment.lastElementChild read-only property returns the document fragment's last child Element, or null if there are no child elements. ValueAn Element that is the last child Element of the object, or null if there are none.Exampleslet fragment = new DocumentFragment(); fragment.lastElementChild; // null let paragraph = document.createElement(""p""); fragment.appendChild(paragraph); fragment.lastElementChild; // <p> SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-lastelementchildâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.lastElementChild Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
174,developer.mozilla.org/en-US/docs/Web/API/UIEvent/sourceCapabilities,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/sourceCapabilities. UIEvent: sourceCapabilities property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventsourceCapabilitiesArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilityUI EventsUIEventConstructorUIEvent()Instance propertiesdetailsourceCapabilities Experimental viewwhich Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleValueSpecificationsBrowser compatibilityUIEvent: sourceCapabilities propertyExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The UIEvent.sourceCapabilities read-only property returns an instance of the InputDeviceCapabilities interface which provides information about the physical device responsible for generating a touch event. If no input device was responsible for the event, it returns null.  When a single user interaction with an input device generates a series of different input events, the sourceCapabilities property for all of them will point to the same instance of InputDeviceCapabilities. For example, when a user lifts their finger off of a touchscreen, several UIEvents may be generated including touchend, mousedown, click, and focus. All of these events must have the same sourceCapabilities representing the touchscreen.  A device is considered ""responsible"" for an event only when that interaction is part of the abstraction provided by the web platform. For example, many user agents allow a window to be resized with a mouse or a keyboard, but this detail is not exposed to the web platform in any way, and so the sourceCapabilities of a resize event will typically be null. ValueAn instance of InputDeviceCapabilities.SpecificationsSpecificationInput Device Capabilities # dom-uievent-sourcecapabilitiesBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
175,developer.mozilla.org/en-US/docs/Web/API/Attr/specified,"developer.mozilla.org/en-US/docs/Web/API/Attr/specified. Attr: specified property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrspecifiedArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilityDocument Object ModelAttrInstance propertieslocalNamenamenamespaceURIownerElementprefixspecified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueSpecificationsBrowser compatibilityAttr: specified propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The read-only specified property of the Attr interface always returns true.ValueAlways returns true.SpecificationsSpecificationDOM Standard # dom-attr-specifiedBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
176,developer.mozilla.org/en-US/docs/Web/CSS/CSS/box/model/Introduction/to/the/CSS/box/model#padding/area,"developer.mozilla.org/en-US/docs/Web/CSS/CSS/box/model/Introduction/to/the/CSS/box/model#padding/area. Introduction to the CSS basic box model - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSCSS box modelIntroduction to the CSS basic box modelArticle ActionsEnglish (US)In this articleContent areaPadding areaBorder areaMargin areaSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleContent areaPadding areaBorder areaMargin areaSee alsoIntroduction to the CSS basic box modelWhen laying out a document, the browser's rendering engine represents each element as a rectangular box according to the standard CSS basic box model. CSS determines the size, position, and properties (color, background, border size, etc.) of these boxes. Every box is composed of four parts (or areas), defined by their respective edges: the content edge, padding edge, border edge, and margin edge. Content areaThe content area, bounded by the content edge, contains the ""real"" content of the element, such as text, an image, or a video player. Its dimensions are the content width (or content-box width) and the content height (or content-box height). It often has a background color or background image. If the box-sizing property is set to content-box (default) and if the element is a block element, the content area's size can be explicitly defined with the width, min-width, max-width, height, min-height, and max-height properties.Padding areaThe padding area, bounded by the padding edge, extends the content area to include the element's padding. Its dimensions are the padding-box width and the padding-box height. The thickness of the padding is determined by the padding-top, padding-right, padding-bottom, padding-left, and shorthand padding properties.Border areaThe border area, bounded by the border edge, extends the padding area to include the element's borders. Its dimensions are the border-box width and the border-box height. The thickness of the borders are determined by the border-width and shorthand border properties. If the box-sizing property is set to border-box, the border area's size can be explicitly defined with the width, min-width, max-width, height, min-height, and max-height properties. When there is a background (background-color or background-image) set on a box, it extends to the outer edge of the border (i.e. extends underneath the border in z-ordering). This default behavior can be altered with the background-clip CSS property.Margin areaThe margin area, bounded by the margin edge, extends the border area to include an empty area used to separate the element from its neighbors. Its dimensions are the margin-box width and the margin-box height. The size of the margin area is determined by the margin-top, margin-right, margin-bottom, margin-left, and shorthand margin properties. When margin collapsing occurs, the margin area is not clearly defined since margins are shared between boxes. Finally, note that for non-replaced inline elements, the amount of space taken up (the contribution to the height of the line) is determined by the line-height property, even though the borders and padding are still displayed around the content.See also Layout and the containing block Introducing the CSS Cascade Cascade, specificity, and inheritance CSS key concepts:  CSS syntax At-rules Comments Specificity Inheritance Layout modes Visual formatting models Margin collapsing Values   Initial values Computed values Used values Actual values Value definition syntax Shorthand properties Replaced elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Jun 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
177,developer.mozilla.org/en-US/docs/Glossary/Sticky/activation,"developer.mozilla.org/en-US/docs/Glossary/Sticky/activation. Sticky activation - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsSticky activationArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoSticky activationSticky activation (or ""sticky user activation"") is a window state that indicates a user has pressed a button, moved a mouse, used a menu, or performed some other user interaction. A page is considered ""user activated"" if a user is currently interacting with the page or has completed a touch, pointer, or keyboard interaction since page load. With sticky user activation, if activation is set it is not reset for the duration of the session (unlike Transient activation). See Features gated by user activation for examples of APIs that require sticky activation. See the UserActivation.hasBeenActive property to programmatically access the current window's sticky activation state.See also HTML Living Standard > Sticky activation Transient activation UserActivation.hasBeenActive Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
178,developer.mozilla.org/en-US/docs/Web/API/DocumentType/remove,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/remove. DocumentType: remove() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTyperemove()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentTypeInstance propertiesnamepublicIdsystemIdInstance methodsafter()before()remove() replaceWith()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentType: remove() methodThe DocumentType.remove() method removes a document's doctype.Syntaxremove() ParametersNone.Return valueNone (undefined).ExamplesUsing remove()document.doctype; // ""<!DOCTYPE html>' document.doctype.remove(); document.doctype; // null SpecificationsSpecificationDOM Standard # ref-for-dom-childnode-removeâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Document.doctype Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
179,developer.mozilla.org/en-US/docs/Learn/JavaScript/Building/blocks/Events,"developer.mozilla.org/en-US/docs/Learn/JavaScript/Building/blocks/Events. Introduction to events - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesJavaScript â Dynamic client-side scriptingJavaScript building blocksIntroduction to eventsArticle ActionsEnglish (US)In this articleWhat is an event?Using addEventListener()Other event listener mechanismsEvent objectsPreventing default behaviorEvent bubblingEvent delegationIt's not just web pagesTest your skills!ConclusionSee alsoComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleWhat is an event?Using addEventListener()Other event listener mechanismsEvent objectsPreventing default behaviorEvent bubblingEvent delegationIt's not just web pagesTest your skills!ConclusionSee alsoIntroduction to events Previous Overview: Building blocks Next Events are things that happen in the system you are programming, which the system tells you about so your code can react to them. For example, if the user clicks a button on a webpage, you might want to react to that action by displaying an information box. In this article, we discuss some important concepts surrounding events, and look at how they work in browsers. This won't be an exhaustive study; just what you need to know at this stage.  Prerequisites:   Basic computer literacy, a basic understanding of HTML and CSS,   JavaScript first steps.   Objective:   To understand the fundamental theory of events, how they work in   browsers, and how events may differ in different programming   environments.   What is an event? Events are things that happen in the system you are programming â the system produces (or ""fires"") a signal of some kind when an event occurs, and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs. Events are fired inside the browser window, and tend to be attached to a specific item that resides in it. This might be a single element, a set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur. For example: The user selects, clicks, or hovers the cursor over a certain element. The user chooses a key on the keyboard. The user resizes or closes the browser window. A web page finishes loading. A form is submitted. A video is played, paused, or ends. An error occurs. You can gather from this (and from glancing at the MDN event reference) that there are a lot of events that can be fired. To react to an event, you attach an event handler to it. This is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are registering an event handler. Note: Event handlers are sometimes called event listeners â they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that is run in response to it happening. Note: Web events are not part of the core JavaScript language â they are defined as part of the APIs built into the browser. An example: handling a click eventIn the following example, we have a single <button> in the page: <button>Change color</button> button { margin: 10px; } Then we have some JavaScript. We'll look at this in more detail in the next section, but for now we can just say: it adds an event handler to the button's ""click"" event, and the handler reacts to the event by setting the page background to a random color: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } btn.addEventListener(""click"", () => { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; }); The example output is as follows. Try clicking the button:Using addEventListener()As we saw in the last example, objects that can fire events have an addEventListener() method, and this is the recommended mechanism for adding event handlers. Let's take a closer look at the code from the last example: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } btn.addEventListener(""click"", () => { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; }); The HTML <button> element will fire an event when the user clicks the button. So it defines an addEventListener() function, which we are calling here. We're passing in two parameters: the string ""click"", to indicate that we want to listen to the click event. Buttons can fire lots of other events, such as ""mouseover"" when the user moves their mouse over the button, or ""keydown"" when the user presses a key and the button is focused. a function to call when the event happens. In our case, the function generates a random RGB color and sets the background-color of the page <body> to that color. It is fine to make the handler function a separate named function, like this: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } function changeBackground() { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; } btn.addEventListener(""click"", changeBackground); Listening for other eventsThere are many different events that can be fired by a button element. Let's experiment. First, make a local copy of random-color-addeventlistener.html, and open it in your browser. It's just a copy of the simple random color example we've played with already. Now try changing click to the following different values in turn, and observing the results in the example: focus and blur â The color changes when the button is focused and unfocused; try pressing the tab to focus on the button and press the tab again to focus away from the button.  These are often used to display information about filling in form fields when they are focused, or to display an error message if a form field is filled with an incorrect value. dblclick â The color changes only when the button is double-clicked. mouseover and mouseout â The color changes when the mouse pointer hovers over the button, or when the pointer moves off the button, respectively. Some events, such as click, are available on nearly any element. Others are more specific and only useful in certain situations: for example, the play event is only available on some elements, such as <video>.Removing listenersIf you've added an event handler using addEventListener(), you can remove it again using the removeEventListener() method. For example, this would remove the changeBackground() event handler: btn.removeEventListener(""click"", changeBackground);  Event handlers can also be removed by passing an AbortSignal to addEventListener() and then later calling abort() on the controller owning the AbortSignal. For example, to add an event handler that we can remove with an AbortSignal: const controller = new AbortController(); btn.addEventListener(""click"", () => {  const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`;  document.body.style.backgroundColor = rndCol; }, { signal: controller.signal } // pass an AbortSignal to this handler ); Then the event handler created by the code above can be removed like this: controller.abort(); // removes any/all event handlers associated with this controller  For simple, small programs, cleaning up old, unused event handlers isn't necessary, but for larger, more complex programs, it can improve efficiency. Also, the ability to remove event handlers allows you to have the same button performing different actions in different circumstances: all you have to do is add or remove handlers. Adding multiple listeners for a single eventBy making more than one call to addEventListener(), providing different handlers, you can have multiple handlers for a single event: myElement.addEventListener(""click"", functionA); myElement.addEventListener(""click"", functionB); Both functions would now run when the element is clicked.Learn moreThere are other powerful features and options available with addEventListener(). These are a little out of scope for this article, but if you want to read them, visit the addEventListener() and removeEventListener() reference pages.Other event listener mechanismsWe recommend that you use addEventListener() to register event handlers. It's the most powerful method and scales best with more complex programs. However, there are two other ways of registering event handlers that you might see: event handler properties and inline event handlers.Event handler properties Objects (such as buttons) that can fire events also usually have properties whose name is on followed by the name of the event. For example, elements have a property onclick. This is called an event handler property. To listen for the event, you can assign the handler function to the property. For example, we could rewrite the random-color example like this: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } btn.onclick = () => { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; }; You can also set the handler property to a named function: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } function bgChange() { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; } btn.onclick = bgChange; With event handler properties, you can't add more than one handler for a single event. For example, you can call addEventListener('click', handler) on an element multiple times, with different functions specified in the second argument: element.addEventListener(""click"", function1); element.addEventListener(""click"", function2); This is impossible with event handler properties because any subsequent attempts to set the property will overwrite earlier ones: element.onclick = function1; element.onclick = function2; Inline event handlers â don't use theseYou might also see a pattern like this in your code: <button onclick=""bgChange()"">Press me</button> function bgChange() { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; document.body.style.backgroundColor = rndCol; }  The earliest method of registering event handlers found on the Web involved event handler HTML attributes (or inline event handlers) like the one shown above â the attribute value is literally the JavaScript code you want to run when the event occurs. The above example invokes a function defined inside a <script> element on the same page, but you could also insert JavaScript directly inside the attribute, for example: <button onclick=""alert('Hello, this is my old-fashioned event handler!');""> Press me </button>  You can find HTML attribute equivalents for many of the event handler properties; however, you shouldn't use these â they are considered bad practice. It might seem easy to use an event handler attribute if you are doing something really quick, but they quickly become unmanageable and inefficient. For a start, it is not a good idea to mix up your HTML and your JavaScript, as it becomes hard to read. Keeping your JavaScript separate is a good practice, and if it is in a separate file you can apply it to multiple HTML documents. Even in a single file, inline event handlers are not a good idea. One button is OK, but what if you had 100 buttons? You'd have to add 100 attributes to the file; it would quickly turn into a maintenance nightmare. With JavaScript, you could easily add an event handler function to all the buttons on the page no matter how many there were, using something like this: const buttons = document.querySelectorAll(""button""); for (const button of buttons) { button.addEventListener(""click"", bgChange); } Finally, many common server configurations will disallow inline JavaScript, as a security measure. You should never use the HTML event handler attributes â those are outdated, and using them is bad practice.Event objects Sometimes, inside an event handler function, you'll see a parameter specified with a name such as event, evt, or e. This is called the event object, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly: const btn = document.querySelector(""button""); function random(number) { return Math.floor(Math.random() * (number + 1)); } function bgChange(e) { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; e.target.style.backgroundColor = rndCol; console.log(e); } btn.addEventListener(""click"", bgChange); Note: You can find the full source code for this example on GitHub (also see it running live).  Here you can see we are including an event object, e, in the function, and in the function setting a background color style on e.target â which is the button itself. The target property of the event object is always a reference to the element the event occurred upon. So, in this example, we are setting a random background color on the button, not the page. Note: See the Event delegation section below for an example where we use event.target. Note: You can use any name you like for the event object â you just need to choose a name that you can then use to reference it inside the event handler function.  e/evt/event is most commonly used by developers because they are short and easy to remember.  It's always good to be consistent â with yourself, and with others if possible. Extra properties of event objectsMost event objects have a standard set of properties and methods available on the event object; see the Event object reference for a full list. Some event objects add extra properties that are relevant to that particular type of event. For example, the keydown event fires when the user presses a key. Its event object is a KeyboardEvent, which is a specialized Event object with a key property that tells you which key was pressed: <input id=""textBox"" type=""text"" /> <div id=""output""></div> const textBox = document.querySelector(""#textBox""); const output = document.querySelector(""#output""); textBox.addEventListener(""keydown"", (event) => { output.textContent = `You pressed ""${event.key}"".`; }); div { margin: 0.5rem 0; } Try typing into the text box and see the output:Preventing default behavior Sometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a ""success message"" page of some kind (or the same page, if another is not specified).  The trouble comes when the user has not submitted the data correctly â as a developer, you want to prevent the submission to the server and give an error message saying what's wrong and what needs to be done to put things right. Some browsers support automatic form data validation features, but since many don't, you are advised to not rely on those and implement your own validation checks. Let's look at a simple example. First, a simple HTML form that requires you to enter your first and last name: <form> <div>  <label for=""fname"">First name: </label>  <input id=""fname"" type=""text"" /> </div> <div>  <label for=""lname"">Last name: </label>  <input id=""lname"" type=""text"" /> </div> <div>  <input id=""submit"" type=""submit"" /> </div> </form> <p></p> div { margin-bottom: 10px; }  Now some JavaScript â here we implement a very simple check inside a handler for the submit event (the submit event is fired on a form when it is submitted) that tests whether the text fields are empty. If they are, we call the preventDefault() function on the event object â which stops the form submission â and then display an error message in the paragraph below our form to tell the user what's wrong: const form = document.querySelector(""form""); const fname = document.getElementById(""fname""); const lname = document.getElementById(""lname""); const para = document.querySelector(""p""); form.addEventListener(""submit"", (e) => { if (fname.value === """" || lname.value === """") {  e.preventDefault();  para.textContent = ""You need to fill in both names!""; } });  Obviously, this is pretty weak form validation â it wouldn't stop the user from validating the form with spaces or numbers entered into the fields, for example â but it is OK for example purposes. The output is as follows: Note: For the full source code, see preventdefault-validation.html (also see it running live here). Event bubblingEvent bubbling describes how the browser handles events targeted at nested elements.Setting a listener on a parent elementConsider a web page like this: <div id=""container""> <button>Click me!</button> </div> <pre id=""output""></pre> Here the button is inside another element, a <div> element. We say that the <div> element here is the parent of the element it contains. What happens if we add a click event handler to the parent, then click the button? const output = document.querySelector(""#output""); function handleClick(e) { output.textContent += `You clicked on a ${e.currentTarget.tagName} element `; } const container = document.querySelector(""#container""); container.addEventListener(""click"", handleClick); You'll see that the parent fires a click event when the user clicks the button: You clicked on a DIV element This makes sense: the button is inside the <div>, so when you click the button you're also implicitly clicking the element it is inside.Bubbling exampleWhat happens if we add event listeners to the button and the parent? <body> <div id=""container"">  <button>Click me!</button> </div> <pre id=""output""></pre> </body> Let's try adding click event handlers to the button, its parent (the <div>), and the <body> element that contains both of them: const output = document.querySelector(""#output""); function handleClick(e) { output.textContent += `You clicked on a ${e.currentTarget.tagName} element `; } const container = document.querySelector(""#container""); const button = document.querySelector(""button""); document.body.addEventListener(""click"", handleClick); container.addEventListener(""click"", handleClick); button.addEventListener(""click"", handleClick); You'll see that all three elements fire a click event when the user clicks the button: You clicked on a BUTTON element You clicked on a DIV element You clicked on a BODY element In this case: the click on the button fires first followed by the click on its parent (the <div> element) followed by the <div> element's parent (the <body> element). We describe this by saying that the event bubbles up from the innermost element that was clicked. This behavior can be useful and can also cause unexpected problems. In the next sections, we'll see a problem that it causes, and find the solution.Video player exampleIn this example our page contains a video, which is hidden initially, and a button labeled ""Display video"". We want the following interaction: When the user clicks the ""Display video"" button, show the box containing the video, but don't start playing the video yet. When the user clicks on the video, start playing the video. When the user clicks anywhere in the box outside the video, hide the box. The HTML looks like this: <button>Display video</button> <div class=""hidden""> <video>  <source  src=""https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm""  type=""video/webm"" />  <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead.  </p> </video> </div> It includes: a <button> element a <div> element which initially has a class=""hidden"" attribute a <video> element nested inside the <div> element. We're using CSS to hide elements with the ""hidden"" class set. div { width: 100%; height: 100%; background-color: #eee; } .hidden { display: none; } div video { padding: 40px; display: block; width: 400px; margin: 40px auto; } The JavaScript looks like this: const btn = document.querySelector(""button""); const box = document.querySelector(""div""); const video = document.querySelector(""video""); btn.addEventListener(""click"", () => box.classList.remove(""hidden"")); video.addEventListener(""click"", () => video.play()); box.addEventListener(""click"", () => box.classList.add(""hidden"")); This adds three 'click' event listeners: one on the <button>, which shows the <div> that contains the <video> one on the <video>, which starts playing the video one on the <div>, which hides the video Let's see how this works: You should see that when you click the button, the box and the video it contains are shown. But then when you click the video, the video starts to play, but the box is hidden again! The video is inside the <div> â it is part of it â so clicking the video runs both the event handlers, causing this behavior.Fixing the problem with stopPropagation() As we saw in the last section, event bubbling can sometimes create problems, but there is a way to prevent it. The Event object has a function available on it called stopPropagation() which, when called inside an event handler, prevents the event from bubbling up to any other elements. We can fix our current problem by changing the JavaScript to this: const btn = document.querySelector(""button""); const box = document.querySelector(""div""); const video = document.querySelector(""video""); btn.addEventListener(""click"", () => box.classList.remove(""hidden"")); video.addEventListener(""click"", (event) => { event.stopPropagation(); video.play(); }); box.addEventListener(""click"", () => box.classList.add(""hidden"")); All we're doing here is calling stopPropagation() on the event object in the handler for the <video> element's 'click' event. This will stop that event from bubbling up to the box. Now try clicking the button and then the video: <button>Display video</button> <div class=""hidden""> <video>  <source  src=""https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm""  type=""video/webm"" />  <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead.  </p> </video> </div> div { width: 100%; height: 100%; background-color: #eee; } .hidden { display: none; } div video { padding: 40px; display: block; width: 400px; margin: 40px auto; } Event captureAn alternative form of event propagation is event capture. This is like event bubbling but the order is reversed: so instead of the event firing first on the innermost element targeted, and then on successively less nested elements, the event fires first on the least nested element, and then on successively more nested elements, until the target is reached. Event capture is disabled by default. To enable it you have to pass the capture option in addEventListener(). This example is just like the bubbling example we saw earlier, except that we have used the capture option: <body> <div id=""container"">  <button>Click me!</button> </div> <pre id=""output""></pre> </body> const output = document.querySelector(""#output""); function handleClick(e) { output.textContent += `You clicked on a ${e.currentTarget.tagName} element `; } const container = document.querySelector(""#container""); const button = document.querySelector(""button""); document.body.addEventListener(""click"", handleClick, { capture: true }); container.addEventListener(""click"", handleClick, { capture: true }); button.addEventListener(""click"", handleClick); In this case, the order of messages is reversed: the <body> event handler fires first, followed by the <div> event handler, followed by the <button> event handler: You clicked on a BODY element You clicked on a DIV element You clicked on a BUTTON element Why bother with both capturing and bubbling? In the bad old days, when browsers were much less cross-compatible than now, Netscape only used event capturing, and Internet Explorer used only event bubbling. When the W3C decided to try to standardize the behavior and reach a consensus, they ended up with this system that included both, which is what modern browsers implement. By default almost all event handlers are registered in the bubbling phase, and this makes more sense most of the time.Event delegationIn the last section, we looked at a problem caused by event bubbling and how to fix it. Event bubbling isn't just annoying, though: it can be very useful. In particular, it enables event delegation. In this practice, when we want some code to run when the user interacts with any one of a large number of child elements, we set the event listener on their parent and have events that happen on them bubble up to their parent rather than having to set the event listener on every child individually. Let's go back to our first example, where we set the background color of the whole page when the user clicked a button. Suppose that instead, the page is divided into 16 tiles, and we want to set each tile to a random color when the user clicks that tile. Here's the HTML: <div id=""container""> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> <div class=""tile""></div> </div> We have a little CSS, to set the size and position of the tiles: .tile { height: 100px; width: 25%; float: left; } Now in JavaScript, we could add a click event handler for every tile. But a much simpler and more efficient option is to set the click event handler on the parent, and rely on event bubbling to ensure that the handler is executed when the user clicks on a tile: function random(number) { return Math.floor(Math.random() * number); } function bgChange() { const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`; return rndCol; } const container = document.querySelector(""#container""); container.addEventListener(""click"", (event) => { event.target.style.backgroundColor = bgChange(); }); The output is as follows (try clicking around on it): Note: In this example, we're using event.target to get the element that was the target of the event (that is, the innermost element). If we wanted to access the element that handled this event (in this case the container) we could use event.currentTarget. Note: See useful-eventtarget.html for the full source code; also see it running live here. It's not just web pages Events are not unique to JavaScript â most programming languages have some kind of event model, and the way the model works often differs from JavaScript's way. In fact, the event model in JavaScript for web pages differs from the event model for JavaScript as it is used in other environments.  For example, Node.js is a very popular JavaScript runtime that enables developers to use JavaScript to build network and server-side applications. The Node.js event model relies on listeners to listen for events and emitters to emit events periodically â it doesn't sound that different, but the code is quite different, making use of functions like on() to register an event listener, and once() to register an event listener that unregisters after it has run once. The HTTP connect event docs provide a good example.  You can also use JavaScript to build cross-browser add-ons â browser functionality enhancements â using a technology called WebExtensions. The event model is similar to the web events model, but a bit different â event listeners' properties are camel-cased (such as onMessage rather than onmessage), and need to be combined with the addListener function. See the runtime.onMessage page for an example. You don't need to understand anything about other such environments at this stage in your learning; we just wanted to make it clear that events can differ in different programming environments.Test your skills!You've reached the end of this article, but can you remember the most important information? To verify you've retained this information before you move on â see Test your skills: Events.Conclusion You should now know all you need to know about web events at this early stage. As mentioned, events are not really part of the core JavaScript â they are defined in browser Web APIs.  Also, it is important to understand that the different contexts in which JavaScript is used have different event models â from Web APIs to other areas such as browser WebExtensions and Node.js (server-side JavaScript). We are not expecting you to understand all of these areas now, but it certainly helps to understand the basics of events as you forge ahead with learning web development. If there is anything you didn't understand, feel free to read through the article again, or contact us to ask for help.See also domevents.dev â a very useful interactive playground app that enables learning about the behavior of the DOM Event system through exploration. Event reference Event order (discussion of capturing and bubbling) â an excellently detailed piece by Peter-Paul Koch. Event accessing (discussion of the event object) â another excellently detailed piece by Peter-Paul Koch. Previous Overview: Building blocks Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 9, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
180,developer.mozilla.org/en-US/docs/Web/Apps/Build/Manifest#orientation,"developer.mozilla.org/en-US/docs/Web/Apps/Build/Manifest#orientation. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
181,developer.mozilla.org/en-US/docs/Glossary/Transient/activation,"developer.mozilla.org/en-US/docs/Glossary/Transient/activation. Transient activation - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsTransient activationArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoTransient activationTransient activation (or ""transient user activation"") is a window state that indicates a user has recently pressed a button, moved a mouse, used a menu, or performed some other user interaction. This state is sometimes used as a mechanism for ensuring that a web API can only function if triggered by user interaction. For example, scripts cannot arbitrarily launch a popup that requires transient activation â âit must be triggered from a UI element's event handler. See Features gated by user activation for examples of APIs that require transient activation. See the UserActivation.isActive property to programmatically access the current window's transient activation state. Note: Transient activation expires after a timeout (if not renewed by further interaction), and may also be ""consumed"" by some APIs. See Sticky activation for a user activation that doesn't reset after it has been set initially. See also HTML Living Standard > Transient activation Sticky activation UserActivation.isActive Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
182,developer.mozilla.org/en-US/docs/Web/API/UIEvent/UIEvent,"developer.mozilla.org/en-US/docs/Web/API/UIEvent/UIEvent. UIEvent: UIEvent() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUIEventUIEvent()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilitySee alsoUI EventsUIEventConstructorUIEvent() Instance propertiesdetailsourceCapabilities Experimental viewwhich Deprecated Instance methodsinitUIEvent() Deprecated Inheritance:EventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseEventMouseScrollEventMutationEventWheelEventIn this articleSyntaxSpecificationsBrowser compatibilitySee alsoUIEvent: UIEvent() constructorThe UIEvent() constructor creates a new UIEvent object. Note: If you construct a synthetic event using this constructor, that event will not be trusted, for security reasons.  Only browser-generated UIEvent objects are trusted and only trusted events trigger default actions. Syntaxnew UIEvent(type) new UIEvent(type, options) Parameters type   A string with the name of the event.  It is case-sensitive and browsers set it to load, unload, abort, error, or select.  options Optional An object that, in addition of the properties defined in Event(), can have the following properties: detail Optional    A number that is an event-dependent value associated with the event.   It defaults to 0 and UIEvent.detail lists the semantic for standard events.   view Optional The Window associated with the event. Its default value is null. sourceCapabilities Optional Non-standard    An InputDeviceCapabilities object which provides information   about the physical device responsible for generating a touch event.    Result valueA new UIEvent object.SpecificationsSpecificationUI Events # dom-uievent-uieventBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also UIEvent, the interface of the objects it constructs. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
183,developer.mozilla.org/en-US/docs/Web/API/UserActivation/hasBeenActive,"developer.mozilla.org/en-US/docs/Web/API/UserActivation/hasBeenActive. UserActivation: hasBeenActive property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsUserActivationhasBeenActiveArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIUserActivationInstance propertieshasBeenActive isActiveRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUserActivation: hasBeenActive propertyThe read-only hasBeenActive property of the UserActivation interface indicates whether the current window has sticky user activation (see sticky activation).ValueA boolean.ExamplesChecking if a user gesture was ever performedUse the hasBeenActive property to check whether the user has ever interacted with the page. if (navigator.userActivation.hasBeenActive) { // proceed with auto-playing an animation, for example } SpecificationsSpecificationHTML Standard # dom-useractivation-hasbeenactiveBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also UserActivation UserActivation.isActive Features gated by user activation Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
184,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for. for - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStatements and declarationsforArticle ActionsEnglish (US)In this articleTry itSyntaxExamplesSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itSyntaxExamplesSpecificationsBrowser compatibilitySee alsoforThe for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.Try itSyntaxfor (initialization; condition; afterthought) statement initialization Optional An expression (including assignment expressions) or variable declaration evaluated once before the loop begins. Typically used to initialize a counter variable. This expression may optionally declare new variables with var or let keywords. Variables declared with var are not local to the loop, i.e. they are in the same scope the for loop is in. Variables declared with let are local to the statement. The result of this expression is discarded. condition Optional An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. If the expression evaluates to false, execution exits the loop and goes to the first statement after the for construct. This conditional test is optional. If omitted, the condition always evaluates to true. afterthought Optional An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable. statement A statement that is executed as long as the condition evaluates to true. You can use a block statement to execute multiple statements. To execute no statement within the loop, use an empty statement (;). ExamplesUsing forThe following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. for (let i = 0; i < 9; i++) { console.log(i); // more statements } Initialization block syntaxThe initialization block accepts both expressions and variable declarations. However, expressions cannot use the in operator unparenthesized, because that is ambiguous with a for...in loop. for (let i = ""start"" in window ? window.start : 0; i < 9; i++) { console.log(i); } // SyntaxError: 'for-in' loop variable declaration may not have an initializer. // Parenthesize the whole initializer for (let i = (""start"" in window ? window.start : 0); i < 9; i++) { console.log(i); } // Parenthesize the `in` expression for (let i = (""start"" in window) ? window.start : 0; i < 9; i++) { console.log(i); } Optional for expressionsAll three expressions in the head of the for loop are optional. For example, it is not required to use the initialization block to initialize variables: let i = 0; for (; i < 9; i++) { console.log(i); // more statements } Like the initialization block, the condition part is also optional. If you are omitting this expression, you must make sure to break the loop in the body in order to not create an infinite loop. for (let i = 0; ; i++) { console.log(i); if (i > 3) break; // more statements } You can also omit all three expressions. Again, make sure to use a break statement to end the loop and also modify (increase) a variable, so that the condition for the break statement is true at some point. let i = 0; for (;;) { if (i > 3) break; console.log(i); i++; } However, in the case where you are not fully using all three expression positions â especially if you are not declaring variables with the first expression but mutating something in the upper scope â consider using a while loop instead, which makes the intention clearer. let i = 0; while (i <= 3) { console.log(i); i++; } Lexical declarations in the initialization blockDeclaring a variable within the initialization block has important differences from declaring it in the upper scope, especially when creating a closure within the loop body. For example, for the code below: for (let i = 0; i < 3; i++) { setTimeout(() => {  console.log(i); }, 1000); } It logs 0, 1, and 2, as expected. However, if the variable is defined in the upper scope: let i = 0; for (; i < 3; i++) { setTimeout(() => {  console.log(i); }, 1000); } It logs 3, 3, and 3. The reason is that each setTimeout creates a new closure that closes over the i variable, but if the i is not scoped to the loop body, all closures will reference the same variable when they eventually get called â and due to the asynchronous nature of setTimeout, it will happen after the loop has already exited, causing the value of i in all queued callbacks' bodies to have the value of 3. This also happens if you use a var statement as the initialization, because variables declared with var are only function-scoped, but not lexically scoped (i.e. they can't be scoped to the loop body). for (var i = 0; i < 3; i++) { setTimeout(() => {  console.log(i); }, 1000); } // Logs 3, 3, 3 The scoping effect of the initialization block can be understood as if the declaration happens within the loop body, but just happens to be accessible within the condition and afterthought parts. More precisely, let declarations are special-cased by for loops â if initialization is a let declaration, then every time, after the loop body is evaluated, the following happens: A new lexical scope is created with new let-declared variables. The binding values from the last iteration are used to re-initialize the new variables. afterthought is evaluated in the new scope. So re-assigning the new variables within afterthought does not affect the bindings from the previous iteration. Creating closures allows you to get hold of a binding during any particular iteration. This explains why closures created within the initialization section do not get updated by re-assignments of i in the afterthought. for (let i = 0, getI = () => i; i < 3; i++) { console.log(getI()); } // Logs 0, 0, 0 This does not log ""0, 1, 2"", like what would happen if getI is declared in the loop body. This is because getI is not re-evaluated on each iteration â rather, the function is created once and closes over the i variable, which refers to the variable declared when the loop was first initialized. Subsequent updates to the value of i actually create new variables called i, which getI does not see. A way to fix this is to re-compute getI every time i updates: for (let i = 0, getI = () => i; i < 3; i++, getI = () => i) { console.log(getI()); } // Logs 0, 1, 2 In fact, you can capture the initial binding of the i variable and re-assign it later, and this updated value will not be visible to the loop body, which sees the next new binding of i. for ( let i = 0, getI = () => i, incrementI = () => i++; getI() < 3; incrementI() ) { console.log(i); } // Logs 0, 0, 0 This logs ""0, 0, 0"", because the i variable in each loop evaluation is actually a separate variable, but getI and incrementI both read and write the initial binding of i, not what was subsequently declared.Using for without a bodyThe following for cycle calculates the offset position of a node in the afterthought section, and therefore it does not require the use of a statement section, a semicolon is used instead. function showOffsetPos(id) { let left = 0; let top = 0; for (  let itNode = document.getElementById(id); // initialization  itNode; // condition  left += itNode.offsetLeft,  top += itNode.offsetTop,  itNode = itNode.offsetParent // afterthought ); // semicolon console.log(  `Offset position of ""${id}"" element: left: ${left}px; top: ${top}px;`, ); } showOffsetPos(""content""); // Logs: // Offset position of ""content"" element: // left: 0px; // top: 153px; Note that the semicolon after the for statement is mandatory, because it stands as an empty statement. Otherwise, the for statement acquires the following console.log line as its statement section, which makes the log execute multiple times.Using for with two iterating variablesYou can create two counters that are updated simultaneously in a for loop using the comma operator. Multiple let and var declarations can also be joined with commas. const arr = [1, 2, 3, 4, 5, 6]; for (let l = 0, r = arr.length - 1; l < r; l++, r--) { console.log(arr[l], arr[r]); } // 1 6 // 2 5 // 3 4 SpecificationsSpecificationECMAScript Language Specification # sec-for-statementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also empty statement break continue while do...while for...in for...of Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
185,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/value,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/value. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
186,developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer,"developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer. DragEvent: dataTransfer property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDragEventdataTransferArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityHTML Drag and Drop APIDragEventConstructorDragEvent()Instance propertiesdataTransfer Inheritance:MouseEventUIEventEventRelated pages for HTML Drag and Drop APIDataTransferDataTransferItemDataTransferItemListIn this articleValueExamplesSpecificationsBrowser compatibilityDragEvent: dataTransfer property The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object). This property is Read only .ValueA DataTransfer object which contains the drag event's data.Examples This example illustrates accessing the drag and drop data within the dragend event handler. function processData(d) { // Process the data â¦ } dragTarget.addEventListener( ""dragend"", (ev) => {  // Call the drag and drop data processor  if (ev.dataTransfer !== null) processData(ev.dataTransfer); }, false ); SpecificationsSpecificationHTML Standard # dom-dragevent-datatransfer-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
187,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/glyphRef,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/glyphRef. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
188,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isSafeInteger,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/isSafeInteger. Number.isSafeInteger() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsNumberNumber.isSafeInteger()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsNumberConstructorNumber() constructorPropertiesNumber.EPSILONNumber.MAX_SAFE_INTEGERNumber.MAX_VALUENumber.MIN_SAFE_INTEGERNumber.MIN_VALUENumber.NaNNumber.NEGATIVE_INFINITYNumber.POSITIVE_INFINITYMethodsNumber.isFinite()Number.isInteger()Number.isNaN()Number.isSafeInteger()Number.parseFloat()Number.parseInt()Number.prototype.toExponential()Number.prototype.toFixed()Number.prototype.toLocaleString()Number.prototype.toPrecision()Number.prototype.toString()Number.prototype.valueOf()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoNumber.isSafeInteger()The Number.isSafeInteger() static method determines whether the provided value is a number that is a safe integer.Try itSyntaxNumber.isSafeInteger(testValue) Parameters testValue The value to be tested for being a safe integer. Return valueThe boolean value true if the given value is a number that is a safe integer. Otherwise false.DescriptionThe safe integers consist of all integers from -(253 - 1) to 253 - 1, inclusive (Â±9,007,199,254,740,991). A safe integer is an integer that: can be exactly represented as an IEEE-754 double precision number, and whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation. For example, 253 - 1 is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, 253 is not a safe integer: it can be exactly represented in IEEE-754, but the integer 253 + 1 can't be directly represented in IEEE-754 but instead rounds to 253 under round-to-nearest and round-to-zero rounding. Handling values larger or smaller than ~9 quadrillion with full precision requires using an arbitrary precision arithmetic library. See What Every Programmer Needs to Know about Floating Point Arithmetic for more information on floating point representations of numbers. For larger integers, consider using the BigInt type.ExamplesUsing isSafeInteger()Number.isSafeInteger(3); // true Number.isSafeInteger(2 ** 53); // false Number.isSafeInteger(2 ** 53 - 1); // true Number.isSafeInteger(NaN); // false Number.isSafeInteger(Infinity); // false Number.isSafeInteger(""3""); // false Number.isSafeInteger(3.1); // false Number.isSafeInteger(3.0); // true SpecificationsSpecificationECMAScript Language Specification # sec-number.issafeintegerBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Number.isSafeInteger in core-js The Number object it belongs to. Number.MIN_SAFE_INTEGER Number.MAX_SAFE_INTEGER BigInt Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
189,developer.mozilla.org/en-US/docs/Glossary/String,"developer.mozilla.org/en-US/docs/Glossary/String. String - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsStringArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoStringIn any computer programming language, a string is a sequence of characters used to represent text. In JavaScript, a String is one of the primitive values and the String object is a wrapper around a String primitive.See also String (computer science) on Wikipedia JavaScript data types and data structures Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
190,developer.mozilla.org/en-US/docs/Web/API/NodeList/item,"developer.mozilla.org/en-US/docs/Web/API/NodeList/item. NodeList: item() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodeListitem()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilityDocument Object ModelNodeListInstance propertieslengthInstance methodsentries()forEach()item() keys()values()Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilityNodeList: item() method Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments. A value of null is returned if the index is out of range, and a TypeError is thrown if no argument is provided. Syntaxitem(index)  JavaScript also offers an array-like bracketed syntax for obtaining an item from a NodeList by index: nodeItem = nodeList[index]; Parameters index is the index of the node to be fetched. The index is zero-based. Return valueThe indexth node in the nodeList returned by the item method.Exceptions TypeError Thrown if no argument is provided. Examplesconst tables = document.getElementsByTagName(""table""); const firstTable = tables.item(1); // or tables[1] - returns the second table in the DOM SpecificationsSpecificationDOM Standard # ref-for-dom-nodelist-itemâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
191,developer.mozilla.org/en-US/docs/Web/SVG/Attribute,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute. SVG Attribute reference - SVG: Scalable Vector Graphics | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesSVG: Scalable Vector GraphicsSVG Attribute referenceArticle ActionsEnglish (US)In this articleSVG attributes A to ZSVG attributes by categorySee also SVG Tutorials Introducing SVG from scratch Introduction Getting started Positions Basic shapes Paths Fills and Strokes Gradients in SVG Patterns Texts Basic transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG image element Tools for SVG SVG and CSS Reference Elements <a><animate><animateMotion><animateTransform><circle><clipPath><cursor> Deprecated <defs><desc><ellipse><feBlend><feColorMatrix><feComponentTransfer><feComposite><feConvolveMatrix><feDiffuseLighting><feDisplacementMap><feDistantLight><feDropShadow><feFlood><feFuncA><feFuncB><feFuncG><feFuncR><feGaussianBlur><feImage><feMerge><feMergeNode><feMorphology><feOffset><fePointLight><feSpecularLighting><feSpotLight><feTile><feTurbulence><filter><font-face-format> Deprecated <font-face-name> Deprecated <font-face-src> Deprecated <font-face-uri> Deprecated <font-face> Deprecated <font> Deprecated <foreignObject><g><glyph> Deprecated <glyphRef> Deprecated <hkern> Deprecated <image><line><linearGradient><marker><mask><metadata><missing-glyph> Deprecated <mpath><path><pattern><polygon><polyline><radialGradient><rect><script><set><stop><style><svg><switch><symbol><text><textPath><title> â the SVG accessible name element<tref> Deprecated <tspan><use><view><vkern> Deprecated  Attributes accent-height Deprecated accumulateadditivealignment-baselinealphabetic Deprecated amplitudearabic-form Deprecated ascent Deprecated attributeNameattributeType Deprecated azimuthbaseFrequencybaseline-shiftbaseProfile Deprecated bbox Deprecated beginbiasbycalcModecap-height Deprecated classclip Deprecated clip-pathclip-ruleclipPathUnitscolorcolor-interpolationcolor-interpolation-filterscolor-profile Deprecated contentScriptType Deprecated contentStyleType Deprecated cursorcxcyddata-*descent Deprecated diffuseConstantdirectiondisplaydivisordominant-baselinedurdxdyedgeModeelevationenable-background Deprecated endexponentfillfill-opacityfill-rulefilterfilterRes Deprecated filterUnitsflood-colorflood-opacityfont-familyfont-sizefont-size-adjustfont-stretchfont-stylefont-variantfont-weightfrfromfxfyg1 Deprecated g2 Deprecated glyph-name Deprecated glyph-orientation-horizontal Deprecated glyph-orientation-vertical Deprecated gradientTransformgradientUnitshanging Deprecated heighthoriz-adv-x Deprecated horiz-origin-x Deprecated horiz-origin-y Deprecated hrefidideographic Deprecated image-renderinginin2interceptk Deprecated k1k2k3k4kernelMatrixkernelUnitLengthkerning Deprecated keyPointskeySplineskeyTimeslanglengthAdjustletter-spacinglighting-colorlimitingConeAnglemarker-endmarker-midmarker-startmarkerHeightmarkerUnitsmarkerWidthmaskmaskContentUnitsmaskUnitsmathematical Deprecated maxmediamethod Experimental minmodename Deprecated numOctavesonclickopacityoperatororderorientorientation Deprecated originoverflowoverline-positionoverline-thicknesspaint-orderpanose-1 Deprecated pathpathLengthpatternContentUnitspatternTransformpatternUnitspointer-eventspointspointsAtXpointsAtYpointsAtZpreserveAlphapreserveAspectRatioprimitiveUnitsrradiusrefXrefYrepeatCountrepeatDurrequiredFeatures Deprecated restartresultrotate Experimental rxryscaleseedshape-renderingside Experimental slope Deprecated spacingspecularConstantspecularExponentspreadMethodstartOffsetstdDeviationstemh Deprecated stemv Deprecated stitchTilesstop-colorstop-opacitystrikethrough-positionstrikethrough-thicknessstring Deprecated strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthstylesurfaceScaleSVG attribute: crossoriginSVG Conditional Processing AttributesSVG Core AttributesSVG Event AttributesSVG Presentation AttributesSVG Styling AttributessystemLanguagetabindextableValuestargettargetXtargetYtext-anchortext-decorationtext-renderingtextLengthtotransformtransform-origintypeu1 Deprecated u2 Deprecated underline-positionunderline-thicknessunicode Deprecated unicode-bidiunicode-range Deprecated units-per-em Deprecated v-alphabetic Deprecated v-hanging Deprecated v-ideographic Deprecated v-mathematical Deprecated valuesvector-effectversion Deprecated vert-adv-y Deprecated vert-origin-x Deprecated vert-origin-y Deprecated viewBoxviewTarget Deprecated visibilitywidthwidths Deprecated word-spacingwriting-modexx-height Deprecated x1x2xChannelSelectorxlink:arcrole Deprecated xlink:href Deprecated xlink:show Deprecated xlink:title Deprecated xlink:type Deprecated xml:base Deprecated xml:lang Deprecated xml:space Deprecated yy1y2yChannelSelectorzzoomAndPan Deprecated Guides Applying SVG effects to HTML content Content type Namespaces crash course SVG animation with SMIL SVG as an Image In this articleSVG attributes A to ZSVG attributes by categorySee alsoSVG Attribute referenceSVG elements can be modified using attributes that specify details about exactly how the element should be handled or rendered. Below is a list of all of the attributes available in SVG along with links to reference documentation to help you learn which elements support them and how they work.SVG attributes A to ZA accent-height accumulate additive alignment-baseline alphabetic amplitude arabic-form ascent attributeName attributeType azimuth B baseFrequency baseline-shift baseProfile bbox begin bias by C calcMode cap-height class clip clipPathUnits clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering contentScriptType contentStyleType crossorigin cursor cx cy D d decelerate descent diffuseConstant direction display divisor dominant-baseline dur dx dy E edgeMode elevation enable-background end exponent F fill fill-opacity fill-rule filter filterRes filterUnits flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight format from fr fx fy G g1 g2 glyph-name glyph-orientation-horizontal glyph-orientation-vertical glyphRef gradientTransform gradientUnits H hanging height href hreflang horiz-adv-x horiz-origin-x I id ideographic image-rendering in in2 intercept K k k1 k2 k3 k4 kernelMatrix kernelUnitLength kerning keyPoints keySplines keyTimes L lang lengthAdjust letter-spacing lighting-color limitingConeAngle local M marker-end marker-mid marker-start markerHeight markerUnits markerWidth mask maskContentUnits maskUnits mathematical max media method min mode N name numOctaves O offset opacity operator order orient orientation origin overflow overline-position overline-thickness P panose-1 paint-order path pathLength patternContentUnits patternTransform patternUnits ping pointer-events points pointsAtX pointsAtY pointsAtZ preserveAlpha preserveAspectRatio primitiveUnits R r radius referrerPolicy refX refY rel rendering-intent repeatCount repeatDur requiredExtensions requiredFeatures restart result rotate rx ry S scale seed shape-rendering slope spacing specularConstant specularExponent speed spreadMethod startOffset stdDeviation stemh stemv stitchTiles stop-color stop-opacity strikethrough-position strikethrough-thickness string stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width style surfaceScale systemLanguage T tabindex tableValues target targetX targetY text-anchor text-decoration text-rendering textLength to transform transform-origin type U u1 u2 underline-position underline-thickness unicode unicode-bidi unicode-range units-per-em V v-alphabetic v-hanging v-ideographic v-mathematical values vector-effect version vert-adv-y vert-origin-x vert-origin-y viewBox viewTarget visibility W width widths word-spacing writing-mode X x x-height x1 x2 xChannelSelector xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xml:lang xml:space Y y y1 y2 yChannelSelector Z z zoomAndPan SVG attributes by categoryGeneric attributes Core attributes Core attributesid, lang, tabindex, xml:base, xml:lang, xml:space Style attributes Style attributesclass, style Conditional processing attributes requiredExtensions, requiredFeatures, systemLanguage. XLink attributesxlink:href, xlink:type, xlink:role, xlink:arcrole, xlink:title, xlink:show, xlink:actuatePresentation attributes Note: All SVG presentation attributes can be used as CSS properties. alignment-baseline baseline-shift clip clip-path clip-rule color color-interpolation color-interpolation-filters color-profile color-rendering cursor direction display dominant-baseline enable-background fill fill-opacity fill-rule filter flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-orientation-horizontal glyph-orientation-vertical image-rendering kerning letter-spacing lighting-color marker-end marker-mid marker-start mask opacity overflow pointer-events shape-rendering stop-color stop-opacity stroke stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering transform transform-origin unicode-bidi vector-effect visibility word-spacing writing-mode Filters attributes Filter primitive attributes height, result, width, x, y Transfer function attributes type, tableValues, slope, intercept, amplitude, exponent, offset Animation attributes Animation target element attributes href Animation attribute target attributes attributeType, attributeName Animation timing attributes begin, dur, end, min, max, restart, repeatCount, repeatDur, fill Animation value attributes calcMode, values, keyTimes, keySplines, from, to, by, autoReverse, accelerate, decelerate Animation addition attributes additive, accumulate Event attributes Animation event attributes Animation event attributes onbegin, onend, onrepeat Document event attributes Document event attributes onabort, onerror, onresize, onscroll, onunload Global event attributes Global event attributes oncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onresize, onscroll, onseeked, onseeking, onselect, onshow, onstalled, onsubmit, onsuspend, ontimeupdate, ontoggle, onvolumechange, onwaiting Graphical event attributes Graphical event attributes onactivate, onfocusin, onfocusout See also SVG element reference SVG Tutorial SVG interface reference Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
192,developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange/event,"developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange/event. Document: readystatechange event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentreadystatechangeArticle ActionsEnglish (US)In this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilitySee alsoDocumentConstructorDocument()Instance propertiesactiveElementadoptedStyleSheetsalinkColor Deprecated all Deprecated anchors Deprecated applets Deprecated bgColor Deprecated bodycharacterSetchildElementCountchildrencompatModecontentTypecookiecurrentScriptdefaultViewdesignModedirdoctypedocumentElementdocumentURIdomain Deprecated embedsfeaturePolicy Experimental fgColor Deprecated firstElementChildfontsformsfragmentDirective Experimental fullscreen Deprecated fullscreenElementfullscreenEnabledheadhiddenimagesimplementationlastElementChildlastModifiedlastStyleSheetSet Non-standard Deprecated linkColor Deprecated linkslocationpictureInPictureElementpictureInPictureEnabledpluginspointerLockElementpreferredStyleSheetSet Non-standard Deprecated readyStatereferrerrootElement Deprecated scriptsscrollingElementselectedStyleSheetSet Non-standard Deprecated styleSheetsstyleSheetSets Non-standard Deprecated timelinetitleURLvisibilityStatevlinkColor Deprecated xmlEncoding Deprecated xmlVersion Deprecated Instance methodsadoptNode()append()caretPositionFromPoint()caretRangeFromPoint() Non-standard clear() Deprecated close()createAttribute()createAttributeNS()createCDATASection()createComment()createDocumentFragment()createElement()createElementNS()createEvent()createExpression()createNodeIterator()createNSResolver()createProcessingInstruction()createRange()createTextNode()createTouch() Non-standard Deprecated createTouchList() Non-standard Deprecated createTreeWalker()elementFromPoint()elementsFromPoint()enableStyleSheetsForSet() Non-standard Deprecated evaluate()execCommand() Deprecated exitFullscreen()exitPictureInPicture()exitPointerLock()getAnimations()getElementById()getElementsByClassName()getElementsByName()getElementsByTagName()getElementsByTagNameNS()getSelection()hasFocus()hasStorageAccess()importNode()mozSetImageElement() Non-standard open()prepend()queryCommandEnabled() Non-standard Deprecated queryCommandState() Non-standard Deprecated queryCommandSupported() Non-standard Deprecated querySelector()querySelectorAll()releaseCapture() Non-standard replaceChildren()requestStorageAccess()startViewTransition() Experimental write()writeln()Eventsafterscriptexecute Non-standard beforescriptexecute Non-standard copycutDOMContentLoadedfullscreenchangefullscreenerrorlostpointercapturepastepointerlockchangepointerlockerrorreadystatechange scrollscrollendselectionchangevisibilitychangeInheritance:NodeEventTargetIn this articleSyntaxEvent typeExamplesSpecificationsBrowser compatibilitySee alsoDocument: readystatechange eventThe readystatechange event is fired when the readyState attribute of a document has changed. This event is not cancelable and does not bubble.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""readystatechange"", (event) => {}); onreadystatechange = (event) => {}; Event typeA generic Event.ExamplesLive exampleHTML <div class=""controls""> <button id=""reload"" type=""button"">Reload</button> </div> <div class=""event-log""> <label for=""eventLog"">Event log:</label> <textarea  readonly  class=""event-log-contents""  rows=""8""  cols=""30""  id=""eventLog""></textarea> </div> CSS body { display: grid; grid-template-areas: ""control log""; } .controls { grid-area: control; display: flex; align-items: center; justify-content: center; } .event-log { grid-area: log; } .event-log-contents { resize: none; } label, button { display: block; } #reload { height: 2rem; } JavaScript const log = document.querySelector("".event-log-contents""); const reload = document.querySelector(""#reload""); reload.addEventListener(""click"", () => { log.textContent = """"; setTimeout(() => {  window.location.reload(true); }, 200); }); window.addEventListener(""load"", (event) => { log.textContent = `${log.textContent}load `; }); document.addEventListener(""readystatechange"", (event) => { log.textContent = `${log.textContent}readystate: ${document.readyState} `; }); document.addEventListener(""DOMContentLoaded"", (event) => { log.textContent = `${log.textContent}DOMContentLoaded `; }); ResultSpecificationsSpecificationHTML Standard # event-readystatechangeBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Related events: DOMContentLoaded, load, beforeunload, unload Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
193,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property/accessors#bracket/notation,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property/accessors#bracket/notation. Property accessors - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceExpressions and operatorsProperty accessorsArticle ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoProperty accessorsProperty accessors provide access to an object's properties by using the dot notation or the bracket notation.Try itSyntaxobject.propertyName object[expression] DescriptionOne can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties. There are two ways to access properties: dot notation and bracket notation.Dot notationIn the object.propertyName syntax, the propertyName must be a valid JavaScript identifier which can also be a reserved word. For example, object.$1 is valid, while object.1 is not. const variable = object.propertyName; object.propertyName = value; const object = {}; object.$1 = ""foo""; console.log(object.$1); // 'foo' const object = {}; object.1 = 'bar'; // SyntaxError console.log(object.1); // SyntaxError Here, the method named createElement is retrieved from document and is called. document.createElement(""pre""); If you use a method for a numeric literal, and the numeric literal has no exponent and no decimal point, you should leave white-space(s) before the dot preceding the method call, so that the dot is not interpreted as a decimal point. 77 .toExponential(); // or 77 .toExponential(); // or (77).toExponential(); // or 77..toExponential(); // or 77.0.toExponential(); // because 77. === 77.0, no ambiguity Bracket notationIn the object[expression] syntax, the expression should evaluate to a string or Symbol that represents the property's name. So, it can be any string literal, for example, including '1foo', '!bar!', or even ' ' (a space). const variable = object[propertyName]; object[propertyName] = value; This does the exact same thing as the previous example. document[""createElement""](""pre""); A space before bracket notation is allowed. document [""createElement""](""pre""); Passing expressions that evaluate to property name will do the same thing as directly passing the property name. const key = ""name""; const getKey = () => ""name""; const Obj = { name: ""Michel"" }; Obj[""name""]; // returns ""Michel"" Obj[key]; // evaluates to Obj[""name""], and returns ""Michel"" Obj[getKey()]; // evaluates to Obj[""name""], and returns ""Michel"" However, beware of using square brackets to access properties whose names are given by external input. This may make your code susceptible to object injection attacks.Property namesEach property name is a string or a Symbol. Any other value, including a number, is coerced to a string. This outputs 'value', since 1 is coerced into '1'. const object = {}; object[""1""] = ""value""; console.log(object[1]); This also outputs 'value', since both foo and bar are converted to the same string (""[object Object]""). const foo = { uniqueProp: 1 }; const bar = { uniqueProp: 2 }; const object = {}; object[foo] = ""value""; console.log(object[bar]); Method bindingIt's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is a property that can be called (for example, if it has a reference to a Function instance as its value). A method is not bound to the object that it is a property of. Specifically, this is not fixed in a method and does not necessarily refer to the object containing the method. Instead, this is ""passed"" by the function call. See the reference for this.ExamplesBracket notation vs. eval()JavaScript novices often make the mistake of using eval() where the bracket notation can be used instead. For example, the following syntax is often seen in many scripts. const x = eval(`document.forms.form_name.elements.${strFormControl}.value`); eval() is slow and should be avoided whenever possible. Also, strFormControl would have to hold an identifier, which is not required for names and ids of form controls. It is better to use bracket notation instead: const x = document.forms.form_name.elements[strFormControl].value; SpecificationsSpecificationECMAScript Language Specification # sec-property-accessorsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Object Object.defineProperty() Optional chaining Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 30, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
194,developer.mozilla.org/en-US/docs/Web/API/Event/type,"developer.mozilla.org/en-US/docs/Web/API/Event/type. Event: type property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsEventtypeArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoEventConstructorEvent()Instance propertiesbubblescancelablecancelBubble Deprecated composedcurrentTargetdefaultPreventedeventPhaseexplicitOriginalTarget Non-standard isTrustedoriginalTarget Non-standard returnValue Deprecated srcElement Deprecated targettimeStamptype Instance methodscomposedPath()initEvent() Deprecated preventDefault()stopImmediatePropagation()stopPropagation()In this articleValueExampleSpecificationsBrowser compatibilitySee alsoEvent: type property The type read-only property of the Event interface returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error. ValueA string containing the type of Event.Example This example logs the event type whenever you press a keyboard key or click a mouse button. HTML<p>Press any key or click the mouse to get the event type.</p> <p id=""log""></p> JavaScriptfunction getEventType(event) { const log = document.getElementById(""log""); log.innerText = `${event.type} ${log.innerText}`; } // Keyboard events document.addEventListener(""keydown"", getEventType, false); // first document.addEventListener(""keypress"", getEventType, false); // second document.addEventListener(""keyup"", getEventType, false); // third // Mouse events document.addEventListener(""mousedown"", getEventType, false); // first document.addEventListener(""mouseup"", getEventType, false); // second document.addEventListener(""click"", getEventType, false); // third ResultSpecificationsSpecificationDOM Standard # ref-for-dom-event-typeâ£Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also EventTarget.addEventListener() EventTarget.removeEventListener() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
195,developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount,"developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount. Document: childElementCount property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentchildElementCountArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentConstructorDocument()Instance propertiesactiveElementadoptedStyleSheetsalinkColor Deprecated all Deprecated anchors Deprecated applets Deprecated bgColor Deprecated bodycharacterSetchildElementCount childrencompatModecontentTypecookiecurrentScriptdefaultViewdesignModedirdoctypedocumentElementdocumentURIdomain Deprecated embedsfeaturePolicy Experimental fgColor Deprecated firstElementChildfontsformsfragmentDirective Experimental fullscreen Deprecated fullscreenElementfullscreenEnabledheadhiddenimagesimplementationlastElementChildlastModifiedlastStyleSheetSet Non-standard Deprecated linkColor Deprecated linkslocationpictureInPictureElementpictureInPictureEnabledpluginspointerLockElementpreferredStyleSheetSet Non-standard Deprecated readyStatereferrerrootElement Deprecated scriptsscrollingElementselectedStyleSheetSet Non-standard Deprecated styleSheetsstyleSheetSets Non-standard Deprecated timelinetitleURLvisibilityStatevlinkColor Deprecated xmlEncoding Deprecated xmlVersion Deprecated Instance methodsadoptNode()append()caretPositionFromPoint()caretRangeFromPoint() Non-standard clear() Deprecated close()createAttribute()createAttributeNS()createCDATASection()createComment()createDocumentFragment()createElement()createElementNS()createEvent()createExpression()createNodeIterator()createNSResolver()createProcessingInstruction()createRange()createTextNode()createTouch() Non-standard Deprecated createTouchList() Non-standard Deprecated createTreeWalker()elementFromPoint()elementsFromPoint()enableStyleSheetsForSet() Non-standard Deprecated evaluate()execCommand() Deprecated exitFullscreen()exitPictureInPicture()exitPointerLock()getAnimations()getElementById()getElementsByClassName()getElementsByName()getElementsByTagName()getElementsByTagNameNS()getSelection()hasFocus()hasStorageAccess()importNode()mozSetImageElement() Non-standard open()prepend()queryCommandEnabled() Non-standard Deprecated queryCommandState() Non-standard Deprecated queryCommandSupported() Non-standard Deprecated querySelector()querySelectorAll()releaseCapture() Non-standard replaceChildren()requestStorageAccess()startViewTransition() Experimental write()writeln()Eventsafterscriptexecute Non-standard beforescriptexecute Non-standard copycutDOMContentLoadedfullscreenchangefullscreenerrorlostpointercapturepastepointerlockchangepointerlockerrorreadystatechangescrollscrollendselectionchangevisibilitychangeInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument: childElementCount property The Document.childElementCount read-only property returns the number of child elements of the document. To get the number of children of a specific element, see Element.childElementCount.ValueA number.Examplesdocument.children; // HTMLCollection, usually containing an <html> element, the document's only child document.childElementCount; // 1 SpecificationsSpecificationDOM Standard # dom-parentnode-childelementcountBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.childElementCount DocumentFragment.childElementCount Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
196,developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia#audio/transcripts,"developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia#audio/transcripts. Accessible multimedia - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesAccessibilityAccessible multimediaArticle ActionsEnglish (US)In this articleMultimedia and accessibilitySimple imagesAccessible audio and video controlsAudio transcriptsVideo text tracksTest your skills!SummaryComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleMultimedia and accessibilitySimple imagesAccessible audio and video controlsAudio transcriptsVideo text tracksTest your skills!SummaryAccessible multimedia Previous Overview: Accessibility Next Another category of content that can create accessibility problems is multimedia. Video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how. Prerequisites:   Basic computer literacy, a basic understanding of HTML, CSS, and   JavaScript, and an understanding of   what accessibility is.   Objective:   To understand the accessibility issues behind multimedia, and how to   overcome them.   Multimedia and accessibilitySo far in this module, we have looked at a variety of content and what needs to be done to ensure its accessibility, ranging from simple text content to data tables, images, native controls such as form elements and buttons, and even more complex markup structures (with WAI-ARIA attributes). This article on the other hand looks at another general class of content that arguably isn't as easy to ensure accessibility for â multimedia. Images, audio tracks, videos, <canvas> elements, etc., aren't as easily understood by screen readers or navigated by the keyboard, and we need to give them a helping hand. But don't despair â here we will help you navigate through the techniques available for making multimedia more accessible.Simple imagesWe already covered simple text alternatives for HTML images in our HTML: A good basis for accessibility article â you can refer back to there for the full details. In short, you should ensure that where possible visual content has an alternative text available for screen readers to pick up and read to their users. For example: <img src=""dinosaur.png"" alt=""A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."" /> Accessible audio and video controlsImplementing controls for web-based audio/video shouldn't be a problem, right? Let's investigate.The problem with native HTML controlsHTML video and audio instances even come with a set of inbuilt controls that allow you to control the media straight out of the box. For example (see native-controls.html source code and live): <audio controls> <source src=""viper.mp3"" type=""audio/mp3"" /> <source src=""viper.ogg"" type=""audio/ogg"" /> <p>  Your browser doesn't support HTML audio. Here is a  <a href=""viper.mp3"">link to the audio</a> instead. </p> </audio> <br /> <video controls> <source src=""rabbit320.mp4"" type=""video/mp4"" /> <source src=""rabbit320.webm"" type=""video/webm"" /> <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead. </p> </video> The controls attribute provides play/pause buttons, seek bar, etc. â the basic controls you'd expect from a media player. It looks like so in Firefox and Chrome:  However, there are problems with these controls: They are not keyboard-accessible in most browsers, i.e. you can't tab between the controls inside the native player. Opera and Chrome provide this to some degree, but it still isn't ideal. Different browsers give the native controls differing styling and functionality, and they aren't stylable, meaning that they can't be easily made to follow a site style guide. To remedy this, we can create our own custom controls. Let's look at how.Creating custom audio and video controlsHTML video and audio share an API â HTML Media Element â which allows you to map custom functionality to buttons and other controls â both of which you define yourself. Let's take the video example from above and add custom controls to them. Basic setup First, grab a copy of our custom-controls-start.html, custom-controls.css, rabbit320.mp4, and rabbit320.webm files and save them in a new directory on your hard drive. Create a new file called main.js and save it in the same directory. First of all, let's look at the HTML for the video player, in the HTML: <section class=""player""> <video controls>  <source src=""rabbit320.mp4"" type=""video/mp4"" />  <source src=""rabbit320.webm"" type=""video/webm"" />  <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead.  </p> </video> <div class=""controls"">  <button class=""playpause"">Play</button>  <button class=""stop"">Stop</button>  <button class=""rwd"">Rwd</button>  <button class=""fwd"">Fwd</button>  <div class=""time"">00:00</div> </div> </section> JavaScript basic setup We've inserted some simple control buttons below our video. These controls of course won't do anything by default; to add functionality, we will use JavaScript. We will first need to store references to each of the controls â add the following to the top of your JavaScript file: const playPauseBtn = document.querySelector("".playpause""); const stopBtn = document.querySelector("".stop""); const rwdBtn = document.querySelector("".rwd""); const fwdBtn = document.querySelector("".fwd""); const timeLabel = document.querySelector("".time""); Next, we need to grab a reference to the video/audio player itself â add this line below the previous lines: const player = document.querySelector(""video""); This holds a reference to a HTMLMediaElement object, which has several useful properties and methods available on it that can be used to wire up functionality to our buttons. Before moving on to creating our button functionality, let's remove the native controls so they don't get in the way of our custom controls. Add the following, again at the bottom of your JavaScript: player.removeAttribute(""controls""); Doing it this way round rather than just not including the controls attribute in the first place has the advantage that if our JavaScript fails for any reason, the user still has some controls available. Wiring up our buttons First, let's set up the play/pause button. We can get this to toggle between play and pause with a simple conditional function, like the following. Add it to your code, at the bottom: playPauseBtn.onclick = () => { if (player.paused) {  player.play();  playPauseBtn.textContent = ""Pause""; } else {  player.pause();  playPauseBtn.textContent = ""Play""; } }; Next, add this code to the bottom, which controls the stop button: stopBtn.onclick = () => { player.pause(); player.currentTime = 0; playPauseBtn.textContent = ""Play""; }; There is no stop() function available on HTMLMediaElements, so instead we pause() it, and at the same time set the currentTime to 0. Next, our rewind and fast-forward buttons â add the following blocks to the bottom of your code: rwdBtn.onclick = () => { player.currentTime -= 3; }; fwdBtn.onclick = () => { player.currentTime += 3; if (player.currentTime >= player.duration || player.paused) {  player.pause();  player.currentTime = 0;  playPauseBtn.textContent = ""Play""; } }; These are very simple, just adding or subtracting 3 seconds to the currentTime each time they are clicked. In a real video player, you'd probably want a more elaborate seeking bar, or similar. Note that we also check to see if the currentTime is more than the total media duration or if the media is not playing when the fwdBtn is pressed. If either condition is true, we stop the video to avoid the user interface going wrong if they attempt to fast forward when the video is not playing or fast forward past the end of the video. Last of all, add the following to the end of the code, to control the time elapsed display: player.ontimeupdate = () => { const minutes = Math.floor(player.currentTime / 60); const seconds = Math.floor(player.currentTime - minutes * 60); const minuteValue = minutes < 10 ? `0${minutes}` : minutes; const secondValue = seconds < 10 ? `0${seconds}` : seconds; const mediaTime = `${minuteValue}:${secondValue}`; timeLabel.textContent = mediaTime; }; Each time the time updates (once per second), we fire this function. It works out the number of minutes and seconds from the given currentTime value (which is in seconds), adds a leading 0 if either the minute or second value is less than 10, and then creates the display readout and adds it to the time label. Further reading This gives you a basic idea of how to add custom player functionality to video/audio player instances. For more information on how to add more complex features to video/audio players, see: Audio and video delivery Video player styling basics Creating a cross-browser video player We've also created an advanced example to show how you could create an object-oriented system that finds every video and audio player on the page (no matter how many there are) and adds our custom controls to it. See custom-controls-oojs (also see the source code).Audio transcriptsTo provide deaf people with access to audio content, you need to create text transcripts. These can either be included on the same page as the audio in some way or included on a separate page and linked to. In terms of actually creating the transcript, your options are: Commercial services â You could pay a professional to do the transcription, see for example companies like Scribie, Casting Words, or Rev. Look around and ask for advice to make sure you find a reputable company that you'll be able to work with effectively. Community/grassroots/self transcription â If you are part of an active community or team in your workplace, then you could ask them for help with doing the translations. You could even have a go at doing them yourself. Automated services â There are AI services available, like Trint or Transcribear. Upload a video/audio file to the site, and it automatically transcribes it for you. On YouTube, you can choose to generate automated captions/transcripts. Depending on how clear the spoken audio is, the resulting transcript quality will vary greatly. As with most things in life, you tend to get what you pay for; different services will vary in accuracy and time taken to produce the transcript. If you pay a reputable company or AI service to do the transcription, you will probably get it done rapidly and to a high quality. If you don't want to pay for it, you are likely to get it done at a lower quality, and/or slowly. It is not OK to publish an audio resource but promise to publish the transcript later on â such promises often aren't kept, which will erode trust between you and your users. If the audio you are presenting is something like a face to face meeting or live spoken performance, it would be acceptable to take notes during the performance, publish them in full along with the audio, then seek help in cleaning up the notes afterward.Transcript examplesIf you use an automated service, then you'll probably have to use the user interface that the tool provides. For example, take a look at our Wait, ARIA Roles Have Categories? video and choose the three-dot menu (. . .) > Show Transcript. You'll see the transcript come up in a separate panel. If you are creating your own user interface to present your audio and associated transcript, you can do it however you like, but it might make sense to include it in a showable/hideable panel; see our audio-transcript-ui example (also see the source code).Audio descriptionsOn occasions where visuals are accompanying your audio, you'll need to provide audio descriptions of some kind to describe that extra content. In many cases, this will take the form of video, in which case you can implement captions using the techniques described in the next section of the article. However, there are some edge cases. You might for example have an audio recording of a meeting that refers to an accompanying resource such as a spreadsheet or chart. In such cases, you should make sure that the resources are provided along with the audio + transcript, and specifically link to them in the places where they are referred to in the transcript. This of course will help all users, not just people who are deaf. Note: An audio transcript will in general help multiple user groups. As well as giving deaf users access to the information contained in the audio, think about a user with a low bandwidth connection, who would find downloading the audio inconvenient. Think also about a user in a noisy environment like a pub or bar, who is trying to access the information but can't hear it over the noise. Video text tracksTo make video accessible for the deaf, visually impaired, or other groups of users (such as those on low bandwidth, or who don't understand the language the video is recorded in), you need to include text tracks along with your video content. Note: Text tracks are also useful for potentially any user, not just those with disabilities. For example, some users may not be able to hear the audio because they are in noisy environments (like a crowded bar when a sports game is being shown) or might not want to disturb others if they are in a quiet place (like a library). This is not a new concept â television services have had closed captioning available for quite a long time: Many countries offer English films with subtitles written in their own native languages, and different language subtitles are often available on DVDs, as shown below: There are different types of text tracks for different purposes. The main ones you'll come across are: Captions â There for the benefit of deaf users who can't hear the audio track, including the words being spoken, and contextual information such as who spoke the words, if the people were angry or sad, and what mood the music is currently creating. Subtitles â Include translations of the audio dialog, for users that don't understand the language being spoken. Descriptions â These include descriptions for visually impaired people who can't see the video, for example, what the scene looks like. Chapter titles â Chapter markers intended to help the user navigate the media resource Implementing HTML video text tracksText tracks for displaying with HTML video need to be written in WebVTT, a text format containing multiple strings of text along with metadata such as what time in the video you want each text string to be displayed, and even limited styling/positioning information. These text strings are called cues. A typical WebVTT file will look something like this: WEBVTT 1 00:00:22.230 --> 00:00:24.606 This is the first subtitle. 2 00:00:30.739 --> 00:00:34.074 This is the second. â¦ To get this displayed along with the HTML media playback, you need to: Save it as a .vtt file in a sensible place. Link to the .vtt file with the <track> element. <track> should be placed within <audio> or <video>, but after all <source> elements. Use the kind attribute to specify whether the cues are subtitles, captions, or descriptions. Furthermore, use srclang to tell the browser what language you have written the subtitles in. Here's an example: <video controls> <source src=""example.mp4"" type=""video/mp4"" /> <source src=""example.webm"" type=""video/webm"" /> <track kind=""subtitles"" src=""subtitles_en.vtt"" srclang=""en"" /> </video> This will result in a video that has subtitles displayed, kind of like this: For more details, see Adding captions and subtitles to HTML video. You can find the example that goes along with this article on GitHub, written by Ian Devlin (see the source code too.) This example uses JavaScript to allow users to choose between different subtitles. Note that to turn the subtitles on, you need to press the ""CC"" button and select an option â English, Deutsch, or EspaÃ±ol. Note: Text tracks and transcriptions also help you with SEO, since search engines especially thrive on text. Text tracks even allow search engines to link directly to a spot partway through the video. Test your skills!You've reached the end of this article, but can you remember the most important information? We've not written a new set of assessments for this article, because there are already assessments available in our HTML Multimedia and embedding module that test your knowledge of the information presented here. If you haven't already, go and try out the assessments at Test your skills: HTML images and Test your skills: Multimedia and embedding.SummaryThis chapter has provided a summary of accessibility concerns for multimedia content, along with some practical solutions. It is not always easy to make multimedia accessible. If for example, you are dealing with an immersive 3D game or virtual reality app, it is quite difficult to provide text alternatives for such an experience, and you might argue that visually impaired users are not really in the target audience bracket for such apps. You can however make sure that such an app has good enough color contrast and clear presentation so it is perceivable to those with low vision/color blindness, and also make it keyboard accessible. Remember that accessibility is about doing as much as you can, rather than striving for 100% accessibility all the time, which is often impossible. Previous Overview: Accessibility Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
197,developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#forgiving/selector/list,"developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#forgiving/selector/list. Selector list - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSSelector listArticle ActionsEnglish (US)In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee alsoSelector listThe CSS selector list (,) selects all the matching nodes. A selector list is a comma-separated list of selectors.DescriptionWhen multiple selectors share the same declarations, they can be grouped together into a comma-separated list. Selector lists can also be passed as parameters to some functional CSS pseudo-classes. White space may appear before and/or after the comma. The following three declarations are equivalent: span { border: red 2px solid; } div { border: red 2px solid; } span, div { border: red 2px solid; } :is(span, div) { border: red 2px solid; } ExamplesWhen applying the same styles to elements matching different criteria, grouping the selectors in a comma-separated list can improve consistency while reducing the size of style sheets.Single line groupingThis example shows grouping selectors in a single line using a comma-separated list. h1, h2, h3, h4, h5, h6 { font-family: helvetica; } Multi line groupingThis example shows grouping selectors in multiple lines using a comma-separated list. #main, .content, article, h1 + p { font-size: 1.1em; } Valid and invalid selector listsAn invalid selector represents, and therefore matches, nothing. When a selector list contains an invalid selector, the entire style block is ignored, except for the :is() and :where() pseudo-classes that accept forgiving selector lists.Invalid selector listA downside to using a selector list is that a single unsupported selector in the selector list invalidates the entire rule. Consider the following two CSS rule sets: h1 { font-family: sans-serif; } h2:invalid-pseudo { font-family: sans-serif; } h3 { font-family: sans-serif; } h1, h2:invalid-pseudo, h3 { font-family: sans-serif; } They are not equivalent. In the first rule set, styles will be applied on the h1 and h3 elements, but the h2:invalid-pseudo rule will not be parsed. In the second rule set, because one selector in the list is invalid, the entire rule will not be parsed. Because of this, no style will be applied to the h1 and h3 elements as when any selector in a list of selectors in invalid, the entire style block will be ignored.Forgiving selector listA way to remedy the invalid selector list problem is to use the :is() or the :where() pseudo-class, which accept a forgiving selector list. Each selector in a forgiving selector list is parsed individually. So any invalid selectors in the list are ignored and the valid ones are used. Carrying on from the previous example, the following two CSS rule sets are now equivalent: h1 { font-family: sans-serif; } h2:maybe-unsupported { font-family: sans-serif; } h3 { font-family: sans-serif; } :is(h1, h2:maybe-unsupported, h3) { font-family: sans-serif; } The difference between the two is that the specificity of :is() is its most specific argument, whereas the :where() selector and the forgiving selector list parameter do not add any specificity weight.Relative selector listA relative selector list is a comma-separated selector list parsed as relative selectors, which begin with an explicit or implied combinator. h2:has(+ p, + ul.red) { font-style: italic; } In the above example, the italic style will be applied to any h2 heading that is immediately followed by <p> or <ul class=""red"">. Note that pseudo-elements and the :has() selector are not valid within the :has() relative selector list.SpecificationsSpecificationSelectors Level 4 # groupingBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The :is() and :where() pseudo-classes accept forgiving selector lists. The :not() pseudo-class accepts a regular selector list The :has() pseudo-class accepts a relative selector list. CSS selectors Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 30, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
198,developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia#other/multimedia/content,"developer.mozilla.org/en-US/docs/Learn/Accessibility/Multimedia#other/multimedia/content. Accessible multimedia - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesAccessibilityAccessible multimediaArticle ActionsEnglish (US)In this articleMultimedia and accessibilitySimple imagesAccessible audio and video controlsAudio transcriptsVideo text tracksTest your skills!SummaryComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleMultimedia and accessibilitySimple imagesAccessible audio and video controlsAudio transcriptsVideo text tracksTest your skills!SummaryAccessible multimedia Previous Overview: Accessibility Next Another category of content that can create accessibility problems is multimedia. Video, audio, and image content need to be given proper textual alternatives so that they can be understood by assistive technologies and their users. This article shows how. Prerequisites:   Basic computer literacy, a basic understanding of HTML, CSS, and   JavaScript, and an understanding of   what accessibility is.   Objective:   To understand the accessibility issues behind multimedia, and how to   overcome them.   Multimedia and accessibilitySo far in this module, we have looked at a variety of content and what needs to be done to ensure its accessibility, ranging from simple text content to data tables, images, native controls such as form elements and buttons, and even more complex markup structures (with WAI-ARIA attributes). This article on the other hand looks at another general class of content that arguably isn't as easy to ensure accessibility for â multimedia. Images, audio tracks, videos, <canvas> elements, etc., aren't as easily understood by screen readers or navigated by the keyboard, and we need to give them a helping hand. But don't despair â here we will help you navigate through the techniques available for making multimedia more accessible.Simple imagesWe already covered simple text alternatives for HTML images in our HTML: A good basis for accessibility article â you can refer back to there for the full details. In short, you should ensure that where possible visual content has an alternative text available for screen readers to pick up and read to their users. For example: <img src=""dinosaur.png"" alt=""A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."" /> Accessible audio and video controlsImplementing controls for web-based audio/video shouldn't be a problem, right? Let's investigate.The problem with native HTML controlsHTML video and audio instances even come with a set of inbuilt controls that allow you to control the media straight out of the box. For example (see native-controls.html source code and live): <audio controls> <source src=""viper.mp3"" type=""audio/mp3"" /> <source src=""viper.ogg"" type=""audio/ogg"" /> <p>  Your browser doesn't support HTML audio. Here is a  <a href=""viper.mp3"">link to the audio</a> instead. </p> </audio> <br /> <video controls> <source src=""rabbit320.mp4"" type=""video/mp4"" /> <source src=""rabbit320.webm"" type=""video/webm"" /> <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead. </p> </video> The controls attribute provides play/pause buttons, seek bar, etc. â the basic controls you'd expect from a media player. It looks like so in Firefox and Chrome:  However, there are problems with these controls: They are not keyboard-accessible in most browsers, i.e. you can't tab between the controls inside the native player. Opera and Chrome provide this to some degree, but it still isn't ideal. Different browsers give the native controls differing styling and functionality, and they aren't stylable, meaning that they can't be easily made to follow a site style guide. To remedy this, we can create our own custom controls. Let's look at how.Creating custom audio and video controlsHTML video and audio share an API â HTML Media Element â which allows you to map custom functionality to buttons and other controls â both of which you define yourself. Let's take the video example from above and add custom controls to them. Basic setup First, grab a copy of our custom-controls-start.html, custom-controls.css, rabbit320.mp4, and rabbit320.webm files and save them in a new directory on your hard drive. Create a new file called main.js and save it in the same directory. First of all, let's look at the HTML for the video player, in the HTML: <section class=""player""> <video controls>  <source src=""rabbit320.mp4"" type=""video/mp4"" />  <source src=""rabbit320.webm"" type=""video/webm"" />  <p>  Your browser doesn't support HTML video. Here is a  <a href=""rabbit320.mp4"">link to the video</a> instead.  </p> </video> <div class=""controls"">  <button class=""playpause"">Play</button>  <button class=""stop"">Stop</button>  <button class=""rwd"">Rwd</button>  <button class=""fwd"">Fwd</button>  <div class=""time"">00:00</div> </div> </section> JavaScript basic setup We've inserted some simple control buttons below our video. These controls of course won't do anything by default; to add functionality, we will use JavaScript. We will first need to store references to each of the controls â add the following to the top of your JavaScript file: const playPauseBtn = document.querySelector("".playpause""); const stopBtn = document.querySelector("".stop""); const rwdBtn = document.querySelector("".rwd""); const fwdBtn = document.querySelector("".fwd""); const timeLabel = document.querySelector("".time""); Next, we need to grab a reference to the video/audio player itself â add this line below the previous lines: const player = document.querySelector(""video""); This holds a reference to a HTMLMediaElement object, which has several useful properties and methods available on it that can be used to wire up functionality to our buttons. Before moving on to creating our button functionality, let's remove the native controls so they don't get in the way of our custom controls. Add the following, again at the bottom of your JavaScript: player.removeAttribute(""controls""); Doing it this way round rather than just not including the controls attribute in the first place has the advantage that if our JavaScript fails for any reason, the user still has some controls available. Wiring up our buttons First, let's set up the play/pause button. We can get this to toggle between play and pause with a simple conditional function, like the following. Add it to your code, at the bottom: playPauseBtn.onclick = () => { if (player.paused) {  player.play();  playPauseBtn.textContent = ""Pause""; } else {  player.pause();  playPauseBtn.textContent = ""Play""; } }; Next, add this code to the bottom, which controls the stop button: stopBtn.onclick = () => { player.pause(); player.currentTime = 0; playPauseBtn.textContent = ""Play""; }; There is no stop() function available on HTMLMediaElements, so instead we pause() it, and at the same time set the currentTime to 0. Next, our rewind and fast-forward buttons â add the following blocks to the bottom of your code: rwdBtn.onclick = () => { player.currentTime -= 3; }; fwdBtn.onclick = () => { player.currentTime += 3; if (player.currentTime >= player.duration || player.paused) {  player.pause();  player.currentTime = 0;  playPauseBtn.textContent = ""Play""; } }; These are very simple, just adding or subtracting 3 seconds to the currentTime each time they are clicked. In a real video player, you'd probably want a more elaborate seeking bar, or similar. Note that we also check to see if the currentTime is more than the total media duration or if the media is not playing when the fwdBtn is pressed. If either condition is true, we stop the video to avoid the user interface going wrong if they attempt to fast forward when the video is not playing or fast forward past the end of the video. Last of all, add the following to the end of the code, to control the time elapsed display: player.ontimeupdate = () => { const minutes = Math.floor(player.currentTime / 60); const seconds = Math.floor(player.currentTime - minutes * 60); const minuteValue = minutes < 10 ? `0${minutes}` : minutes; const secondValue = seconds < 10 ? `0${seconds}` : seconds; const mediaTime = `${minuteValue}:${secondValue}`; timeLabel.textContent = mediaTime; }; Each time the time updates (once per second), we fire this function. It works out the number of minutes and seconds from the given currentTime value (which is in seconds), adds a leading 0 if either the minute or second value is less than 10, and then creates the display readout and adds it to the time label. Further reading This gives you a basic idea of how to add custom player functionality to video/audio player instances. For more information on how to add more complex features to video/audio players, see: Audio and video delivery Video player styling basics Creating a cross-browser video player We've also created an advanced example to show how you could create an object-oriented system that finds every video and audio player on the page (no matter how many there are) and adds our custom controls to it. See custom-controls-oojs (also see the source code).Audio transcriptsTo provide deaf people with access to audio content, you need to create text transcripts. These can either be included on the same page as the audio in some way or included on a separate page and linked to. In terms of actually creating the transcript, your options are: Commercial services â You could pay a professional to do the transcription, see for example companies like Scribie, Casting Words, or Rev. Look around and ask for advice to make sure you find a reputable company that you'll be able to work with effectively. Community/grassroots/self transcription â If you are part of an active community or team in your workplace, then you could ask them for help with doing the translations. You could even have a go at doing them yourself. Automated services â There are AI services available, like Trint or Transcribear. Upload a video/audio file to the site, and it automatically transcribes it for you. On YouTube, you can choose to generate automated captions/transcripts. Depending on how clear the spoken audio is, the resulting transcript quality will vary greatly. As with most things in life, you tend to get what you pay for; different services will vary in accuracy and time taken to produce the transcript. If you pay a reputable company or AI service to do the transcription, you will probably get it done rapidly and to a high quality. If you don't want to pay for it, you are likely to get it done at a lower quality, and/or slowly. It is not OK to publish an audio resource but promise to publish the transcript later on â such promises often aren't kept, which will erode trust between you and your users. If the audio you are presenting is something like a face to face meeting or live spoken performance, it would be acceptable to take notes during the performance, publish them in full along with the audio, then seek help in cleaning up the notes afterward.Transcript examplesIf you use an automated service, then you'll probably have to use the user interface that the tool provides. For example, take a look at our Wait, ARIA Roles Have Categories? video and choose the three-dot menu (. . .) > Show Transcript. You'll see the transcript come up in a separate panel. If you are creating your own user interface to present your audio and associated transcript, you can do it however you like, but it might make sense to include it in a showable/hideable panel; see our audio-transcript-ui example (also see the source code).Audio descriptionsOn occasions where visuals are accompanying your audio, you'll need to provide audio descriptions of some kind to describe that extra content. In many cases, this will take the form of video, in which case you can implement captions using the techniques described in the next section of the article. However, there are some edge cases. You might for example have an audio recording of a meeting that refers to an accompanying resource such as a spreadsheet or chart. In such cases, you should make sure that the resources are provided along with the audio + transcript, and specifically link to them in the places where they are referred to in the transcript. This of course will help all users, not just people who are deaf. Note: An audio transcript will in general help multiple user groups. As well as giving deaf users access to the information contained in the audio, think about a user with a low bandwidth connection, who would find downloading the audio inconvenient. Think also about a user in a noisy environment like a pub or bar, who is trying to access the information but can't hear it over the noise. Video text tracksTo make video accessible for the deaf, visually impaired, or other groups of users (such as those on low bandwidth, or who don't understand the language the video is recorded in), you need to include text tracks along with your video content. Note: Text tracks are also useful for potentially any user, not just those with disabilities. For example, some users may not be able to hear the audio because they are in noisy environments (like a crowded bar when a sports game is being shown) or might not want to disturb others if they are in a quiet place (like a library). This is not a new concept â television services have had closed captioning available for quite a long time: Many countries offer English films with subtitles written in their own native languages, and different language subtitles are often available on DVDs, as shown below: There are different types of text tracks for different purposes. The main ones you'll come across are: Captions â There for the benefit of deaf users who can't hear the audio track, including the words being spoken, and contextual information such as who spoke the words, if the people were angry or sad, and what mood the music is currently creating. Subtitles â Include translations of the audio dialog, for users that don't understand the language being spoken. Descriptions â These include descriptions for visually impaired people who can't see the video, for example, what the scene looks like. Chapter titles â Chapter markers intended to help the user navigate the media resource Implementing HTML video text tracksText tracks for displaying with HTML video need to be written in WebVTT, a text format containing multiple strings of text along with metadata such as what time in the video you want each text string to be displayed, and even limited styling/positioning information. These text strings are called cues. A typical WebVTT file will look something like this: WEBVTT 1 00:00:22.230 --> 00:00:24.606 This is the first subtitle. 2 00:00:30.739 --> 00:00:34.074 This is the second. â¦ To get this displayed along with the HTML media playback, you need to: Save it as a .vtt file in a sensible place. Link to the .vtt file with the <track> element. <track> should be placed within <audio> or <video>, but after all <source> elements. Use the kind attribute to specify whether the cues are subtitles, captions, or descriptions. Furthermore, use srclang to tell the browser what language you have written the subtitles in. Here's an example: <video controls> <source src=""example.mp4"" type=""video/mp4"" /> <source src=""example.webm"" type=""video/webm"" /> <track kind=""subtitles"" src=""subtitles_en.vtt"" srclang=""en"" /> </video> This will result in a video that has subtitles displayed, kind of like this: For more details, see Adding captions and subtitles to HTML video. You can find the example that goes along with this article on GitHub, written by Ian Devlin (see the source code too.) This example uses JavaScript to allow users to choose between different subtitles. Note that to turn the subtitles on, you need to press the ""CC"" button and select an option â English, Deutsch, or EspaÃ±ol. Note: Text tracks and transcriptions also help you with SEO, since search engines especially thrive on text. Text tracks even allow search engines to link directly to a spot partway through the video. Test your skills!You've reached the end of this article, but can you remember the most important information? We've not written a new set of assessments for this article, because there are already assessments available in our HTML Multimedia and embedding module that test your knowledge of the information presented here. If you haven't already, go and try out the assessments at Test your skills: HTML images and Test your skills: Multimedia and embedding.SummaryThis chapter has provided a summary of accessibility concerns for multimedia content, along with some practical solutions. It is not always easy to make multimedia accessible. If for example, you are dealing with an immersive 3D game or virtual reality app, it is quite difficult to provide text alternatives for such an experience, and you might argue that visually impaired users are not really in the target audience bracket for such apps. You can however make sure that such an app has good enough color contrast and clear presentation so it is perceivable to those with low vision/color blindness, and also make it keyboard accessible. Remember that accessibility is about doing as much as you can, rather than striving for 100% accessibility all the time, which is often impossible. Previous Overview: Accessibility Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
199,developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo,"developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo. Window: scrollTo() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsWindowscrollTo()Article ActionsEnglish (US)In this articleSyntaxExamplesNotesSpecificationsBrowser compatibilityWindowInstance propertiesapplicationCache Non-standard Deprecated closedconsolecredentialless Experimental Non-standard customElementsdefaultStatus Deprecated devicePixelRatiodocumentevent Deprecated external Deprecated frameElementframesfullScreen Non-standard historyinnerHeightinnerWidthlaunchQueue Experimental lengthlocalStoragelocationlocationbarmenubarmozInnerScreenX Non-standard mozInnerScreenY Non-standard namenavigation Experimental navigatorondragdrop Deprecated openerorientation Deprecated outerHeightouterWidthpageXOffsetpageYOffsetparentpersonalbarschedulerscreenscreenLeftscreenTopscreenXscreenYscrollbarsscrollMaxX Non-standard scrollMaxY Non-standard scrollXscrollYselfsessionStoragesidebar Non-standard Deprecated speechSynthesisstatus Deprecated statusbartoolbartopvisualViewportwindowInstance methodsalert()back() Non-standard Deprecated blur()cancelAnimationFrame()cancelIdleCallback()captureEvents() Deprecated clearImmediate()close()confirm()convertPointFromNodeToPage() Non-standard dump() Non-standard find() Non-standard focus()forward() Non-standard Deprecated getComputedStyle()getDefaultComputedStyle() Non-standard getSelection()matchMedia()moveBy()moveTo()open()postMessage()print()prompt()queryLocalFonts() Experimental releaseEvents() Deprecated requestAnimationFrame()requestFileSystem() Non-standard Deprecated requestIdleCallback()resizeBy()resizeTo()scroll()scrollBy()scrollByLines() Non-standard scrollByPages() Non-standard scrollTo() setImmediate()showDirectoryPicker() Experimental showModalDialog() Non-standard Deprecated showOpenFilePicker() Experimental showSaveFilePicker() Experimental sizeToContent() Non-standard stop()updateCommands() Non-standard webkitConvertPointFromPageToNode() Non-standard Deprecated EventsafterprintappinstalledbeforeinstallpromptbeforeprintbeforeunloadblurcopycutdevicemotiondeviceorientationdeviceorientationabsoluteDOMContentLoadederrorfocusgamepadconnectedgamepaddisconnectedhashchangelanguagechangeloadmessagemessageerrorofflineonlineorientationchange Deprecated pagehidepageshowpastepopstaterejectionhandledresizestorageunhandledrejectionunloadvrdisplayactivate Non-standard Deprecated vrdisplayconnect Non-standard Deprecated vrdisplaydeactivate Non-standard Deprecated vrdisplaydisconnect Non-standard Deprecated vrdisplaypresentchange Non-standard Deprecated Inheritance:EventTargetIn this articleSyntaxExamplesNotesSpecificationsBrowser compatibilityWindow: scrollTo() method Window.scrollTo() scrolls to a particular set of coordinates in the document. SyntaxscrollTo(x-coord, y-coord) scrollTo(options) Parameters x-coord is the pixel along the horizontal axis of the  document that you want displayed in the upper left.  y-coord is the pixel along the vertical axis of the document  that you want displayed in the upper left.  - or - options A dictionary containing the following parameters: top Specifies the number of pixels along the Y axis to scroll the window or element. left Specifies the number of pixels along the X axis to scroll the window or element. behavior Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values: smooth: scrolling should animate smoothly instant: scrolling should happen instantly in a single jump auto: scroll behavior is determined by the computed value of scroll-behavior  Return valueNone (undefined).Exampleswindow.scrollTo(0, 1000); Using options: window.scrollTo({ top: 100, left: 100, behavior: ""smooth"", }); Notes Window.scroll() is effectively the same as this method. For relative scrolling, see Window.scrollBy(), Window.scrollByLines(), and Window.scrollByPages().  For scrolling elements, see Element.scrollTop and Element.scrollLeft. SpecificationsSpecificationCSSOM View Module # dom-window-scrolltoBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
200,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Array/slice,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Array/slice. Array.prototype.slice() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsArrayArray.prototype.slice()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsArrayConstructorArray() constructorPropertiesArray[@@species]Array.prototype[@@unscopables]Array: lengthMethodsArray.prototype[@@iterator]()Array.prototype.at()Array.prototype.concat()Array.prototype.copyWithin()Array.prototype.entries()Array.prototype.every()Array.prototype.fill()Array.prototype.filter()Array.prototype.find()Array.prototype.findIndex()Array.prototype.findLast()Array.prototype.findLastIndex()Array.prototype.flat()Array.prototype.flatMap()Array.prototype.forEach()Array.from()Array.fromAsync() Experimental Array.prototype.group() Experimental Array.prototype.groupToMap() Experimental Array.prototype.includes()Array.prototype.indexOf()Array.isArray()Array.prototype.join()Array.prototype.keys()Array.prototype.lastIndexOf()Array.prototype.map()Array.of()Array.prototype.pop()Array.prototype.push()Array.prototype.reduce()Array.prototype.reduceRight()Array.prototype.reverse()Array.prototype.shift()Array.prototype.slice()Array.prototype.some()Array.prototype.sort()Array.prototype.splice()Array.prototype.toLocaleString()Array.prototype.toReversed()Array.prototype.toSorted()Array.prototype.toSpliced()Array.prototype.toString()Array.prototype.unshift()Array.prototype.values()Array.prototype.with()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoArray.prototype.slice() The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified. Try itSyntaxslice() slice(start) slice(start, end) Parameters start Optional Zero-based index at which to start extraction, converted to an integer. Negative index counts back from the end of the array â if start < 0, start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length, nothing is extracted. end Optional Zero-based index at which to end extraction, converted to an integer. slice() extracts up to but not including end. Negative index counts back from the end of the array â if end < 0, end + array.length is used. If end < -array.length, 0 is used. If end >= array.length or end is omitted, array.length is used, causing all elements until the end to be extracted. If end is positioned before or at start after normalization, nothing is extracted. Return valueA new array containing the extracted elements.DescriptionThe slice() method is a copying method. It does not alter this but instead returns a shallow copy that contains some of the same elements as the ones from the original array. The slice() method preserves empty slots. If the sliced portion is sparse, the returned array is sparse as well. The slice() method is generic. It only expects the this value to have a length property and integer-keyed properties.ExamplesReturn a portion of an existing arrayconst fruits = [""Banana"", ""Orange"", ""Lemon"", ""Apple"", ""Mango""]; const citrus = fruits.slice(1, 3); // fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango'] // citrus contains ['Orange','Lemon'] Using slice In the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change. // Using slice, create newCar from myCar. const myHonda = { color: ""red"", wheels: 4, engine: { cylinders: 4, size: 2.2 }, }; const myCar = [myHonda, 2, ""cherry condition"", ""purchased 1997""]; const newCar = myCar.slice(0, 2); console.log(""myCar ="", myCar); console.log(""newCar ="", newCar); console.log(""myCar[0].color ="", myCar[0].color); console.log(""newCar[0].color ="", newCar[0].color); // Change the color of myHonda. myHonda.color = ""purple""; console.log(""The new color of my Honda is"", myHonda.color); console.log(""myCar[0].color ="", myCar[0].color); console.log(""newCar[0].color ="", newCar[0].color); This script writes: myCar = [ { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } }, 2, 'cherry condition', 'purchased 1997' ] newCar = [ { color: 'red', wheels: 4, engine: { cylinders: 4, size: 2.2 } }, 2 ] myCar[0].color = red newCar[0].color = red The new color of my Honda is purple myCar[0].color = purple newCar[0].color = purple Calling slice() on non-array objectsThe slice() method reads the length property of this. It then reads the integer-keyed properties from start to end and defines them on a newly created array. const arrayLike = { length: 3, 0: 2, 1: 3, 2: 4, }; console.log(Array.prototype.slice.call(arrayLike, 1, 3)); // [ 3, 4 ] Using slice() to convert array-like objects to arraysThe slice() method is often used with bind() and call() to create a utility method that converts an array-like object into an array. // slice() is called with `this` passed as the first argument const slice = Function.prototype.call.bind(Array.prototype.slice); function list() { return slice(arguments); } const list1 = list(1, 2, 3); // [1, 2, 3] Using slice() on sparse arraysThe array returned from slice() may be sparse if the source is sparse. console.log([1, 2, , 4, 5].slice(1, 4)); // [2, empty, 4] SpecificationsSpecificationECMAScript Language Specification # sec-array.prototype.sliceBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Array.prototype.slice in core-js Indexed collections Array Array.prototype.pop() Array.prototype.shift() Array.prototype.concat() Array.prototype.splice() TypedArray.prototype.slice() String.prototype.slice() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 17, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
201,developer.mozilla.org/en-US/docs/Web/Progressive/web/apps/Responsive/responsive/design/building/blocks,"developer.mozilla.org/en-US/docs/Web/Progressive/web/apps/Responsive/responsive/design/building/blocks. The building blocks of responsive design - Progressive web apps (PWAs) | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesProgressive web apps (PWAs)The building blocks of responsive designArticle ActionsEnglish (US)In this articleFluid gridsFlexible replaced elementsMedia queriesViewportResponsive images/videoSee alsoIn this articleFluid gridsFlexible replaced elementsMedia queriesViewportResponsive images/videoSee alsoThe building blocks of responsive designIn this article we will discuss the main essential components of responsive design, with some links to further information where necessary. For Web developers, it is now fairly common to be called upon to create a website or app that changes its user interface depending on the browser or device accessing the site to provide an optimized experience. One approach to this is to create different versions of your site/app for different platforms or browsers and serve them appropriately after detecting which browser or platform is looking at your site. But this is increasingly inefficient: browser sniffing is inherently error prone, and maintaining multiple copies of your code can turn out to be a nightmare. It is usually much better to create a single version of your code which doesn't care about what browser or platform is accessing the site, but instead uses feature tests to find out what code features the browser supports or what the values of certain browser features are, and then adjusts the code appropriately. Responsive design is the term commonly used for describing that approach. Responsive design is much more reliable, more maintainable, and more future proof than maintaining multiple copies of your code for different browsers and platforms. With responsive design, you don't get caught in the situation of having to bring out more new site versions as more new browsers and platforms come out, and adjust code as feature support in existing browsers changes. There are disadvantages to responsive-design approach, however. If the content, layout, and functionality need to change greatly for different devices, it may not be such a good approach. Also, taking an existing site and adding responsiveness to it, to make it mobile/tablet friendly, can be a lot more effort than just creating a separate mobile site or app, especially if it is a sprawling enterprise site. Read more about responsive design advantages and disadvantages. Note: You can also read our discussion on the basics of responsive design, if you need some more background information and basics. Fluid gridsThe best place to start is with fluid measurements for our application layout â essentially, this means using a combination of percentages and ems/rems to size your containers and text, not fixed widths such as pixels. This has a lot of advantages in that the layout will adapt to different viewport dimensions. Let's look at an example. We've written a simple-but-fun prototype for an application called Snapshot, which takes a video stream from your webcam (using getUserMedia()) then allows you to capture stills from that video stream (using HTML <canvas>), and save them to a gallery. You can then view previously-captured images and delete them. Other articles will discuss the functionality in more detail, but here we're interested in the layout. Note: You can find the Snapshot app on GitHub; check out the code and help improve it. You can also see Snapshot running live. Note that getUserMedia() is an experimental technology, which currently only works in Google Chrome and Firefox desktop. More functionality and a clean up of the styling of Snapshot are planned for a future date. Our desktop layout for Snapshot is three columns, containing the camera viewer, image capture view, and gallery, respectively. The markup is as follows: <x-deck selected-index=""0""> <x-card> â¦ </x-card> <x-card> â¦ </x-card> <x-card> â¦ </x-card> </x-deck> Note: These weird x- elements may be unfamiliar; they are part of Brick, Mozilla's UI element library for mobile web apps. We have used Brick to create the mobile layout for Snapshot, which you will read more about below. To get these sitting side-by-side we have used the following rules: x-card { width: 100%; } x-card:nth-child(1), x-card:nth-child(2) { width: 30%; float: left; padding: 2rem; } x-card:nth-child(3) { width: 40%; float: left; height: 100%; overflow: auto; padding: 2rem; } So we're giving the first two columns a width of 30%, and the third a width of 40%, floating the columns all left. This way they end up side-by-side, and their proportions remain the same as the browser window size varies. This is just a simple grid example, but you can apply this principle to more complex grid layouts as required.border-box sizingThe padding does not affect the overall width and height of the containers because we have set the box-sizing of all elements to border-box: *, *:before, *:after { box-sizing: border-box; } This basically means that width and height will now set the dimensions of an element all the way up to and including the border, not just the content. So if you set width: 40%, the box width will always be 40% of its parent, and any padding and border widths set on the box will be subtracted from the content width, not added to it. Very useful! Read more about this at * { Box-sizing: Border-box } FTW, by Paul Irish.Flexible replaced elementsThings are working fairly well now, but there are still some issues just waiting to present themselves. For a start, let's have a look at what happens when we include the <video> and <img> elements inside our first two columns, naked and unstyled. Because the size of replaced elements is dictated by the size of the media inserted into them, and the media is a fixed size, they explode out of their containing elements and make a mess of the layout. This is pretty horrible, but generally this kind of problem is easily fixed with some simple CSS: img, video { max-width: 100%; } This tells the replaced elements to remain constrained inside their container's widths, no matter what. However, if they aren't as wide as their containers, they will not stretch to fill them. In the snapshot example, we ended up with slightly different code: x-card:nth-child(1) video, x-card:nth-child(2) img { width: 100%; /* â¦ */ } This is because in our case, we do in fact want the video and image to stretch to always fill their containers no matter what â a subtle but important difference from max-width â and therefore always be the same size. The video always resizes dynamically, but the screen captures taken from it do not, so upon resizing the screen it was possible to end up with a messy layout with different sized elements when using max-width: 100%, such as: Media queriesFluid grids are a great start, but you'll notice that at certain points (known as breakpoints) the layout starts to break down. At these points you'll want to change the layout to rectify the layout problem, and this can be done using media queries. Note: Media queries are a CSS feature that allow you to selectively apply CSS depending on the results of media feature tests â for more on the basics, read Media queries. Typical desktop layoutIn our example, we have a desktop layout, as we've already seen. This is created using the CSS rules included at the top of the stylesheet, before any media queries are encountered. Mid-width layoutWe also have a mid-width layout, which is aimed at working well on tablets and narrow laptop screens. This is created by all of the CSS inside the first media query: @media all and (max-width: 1024px) { x-card:nth-child(1), x-card:nth-child(2) {  width: 50%; } x-card:nth-child(3) {  width: 100%;  clear: left; } x-card:nth-child(3) img {  width: 20%; } } So here we're altering the widths of the columns and removing the float of the third column (and adding clearing to guard against any float funny business). We've also altered the width of the images inside the third container (no longer a column â this is the gallery) so that now you get five per line (it was previously three per line). Narrow screen/mobile layoutWe then have a narrow screen layout, designed to fit the bill for a mobile app/open Web app experience. This is created in multiple parts. First of all, as expected, there is a media query in our main CSS, which is quite weighty, so we'll go through it in parts: @media all and (max-width: 480px) { x-card:nth-child(1), x-card:nth-child(2), x-card:nth-child(3) {  width: 100%;  float: none;  padding: 0; } button {  margin-top: 0;  border-radius: 0; } x-card:nth-child(1) video, x-card:nth-child(2) img {  border-radius: 0px;  border: none;  padding: 0;  background-color: 0; } This first block resets a number of different things from the widescreen layouts that weren't required for the mobile app. x-card:nth-child(1) video, x-card:nth-child(2) img, x-card:nth-child(3) { margin-top: 17.5vw; } x-card:nth-child(1) button, x-card:nth-child(2) button { position: absolute; bottom: 0; } x-card:nth-child(2) button:nth-of-type(2) { bottom: 5.9rem; } x-card:nth-child(1) button { font-size: 7vw; } x-card:nth-child(2) button { font-size: 7vw; } The next rules do some sizing on the buttons inside the first two cards, and give all card contents a top margin so that their content won't be lost under the navigation buttons (see below). This was necessary because Mozilla Brick (also see below) forces its components to be 100% of the screen width and height. We have used vw (viewport width) units for these â 1vw is equivalent to 1% of the viewport width. This makes the dimensions scale up and down nicely along with the viewport width. Last for this section, we absolutely positioned all buttons at the bottom of the cards they are in, so the layout looks OK at different viewport size variations. We then add a rule that positions the second button in any card a button's width higher up the card. When you click on an image in the gallery it brings up options to delete or cancel deletion of the card, and you don't want two buttons on top of one another. x-card:nth-child(3) img { width: 50%; } This rule changes the width of the gallery images so now there are two per line. nav {  width: 100%;  position: absolute;  z-index: 1000;  display: flex; } nav button {  font-size: 6.8vw;  flex: 1;  border-left: 1px solid rgba(100,100,100,0.4); } nav button:first-child {  border-left: 0; } } In this last set of rules, we change the display value of the <nav> to flex to make it show (it was set to none in the default CSS at the top of the stylesheet, as it wasn't needed for the other views.) We then use absolute positioning and z-index to make it take up no space in the document flow, and sit on top of the x-cards (this is why we gave the x-cards that top-margin earlier). Next up, the font-size of the buttons is set to 6.8vw. Why? Because the top-margin of the x-cards was set to 17vw earlier on. All buttons in the app have been set to have a line-height of 2.5, in the default CSS at the top of the stylesheet (check if you don't believe me.) And 6.8 x 2.5 = 17. Last, we have used flex: 1; to make the buttons always take up the same proportion of space on the line. Let's have a look at the mobile layout, in the below image. But there are more tricks up our sleeves for this mobile app layout! As mentioned above, we used Mozilla Brick, a collection of ready-rolled mobile UI components, in the making of the mobile app layout. In particular, we used the deck component for the nice transition effect between cards when the buttons are pressed. What's more relevant to this article is that we didn't want the Brick CSS and JavaScript files being applied to the markup unless we were looking at the mobile app view. To achieve this, we applied the Brick CSS to the page using a separate <link> element with a media attribute: <link href=""dist/brick.css"" rel=""stylesheet"" media=""all and (max-width: 480px)"" /> This says that the whole stylesheet will not be linked to the HTML unless the viewport width is 480px or less. Moving on to the JavaScript, <script> elements don't accept media attributes, so I had to do this a different way. Fortunately there is a JavaScript construct called window.matchMedia(), which can conditionally run JavaScript constructs depending on whether a media query returns true or not. We opened up the brick.js file and wrapped the whole lot in the following: if (window.matchMedia(""(max-width: 480px)"").matches) { // The whole of brick.js goes here! } This causes nothing inside the brick.js file to be run unless the viewport width is 480px or less. Problem solved.Really wide screensOne thing you might notice is that when the viewport gets very wide (such as on a cinema display), the layout stops getting wider, and just centers in the space available. This is pretty simple to achieve. You could use a min-width media query to fix the <body> width at a certain point: @media all and (min-width: 1400px) { body {  width: 1400px;  margin: 0 auto; } } But it's actually easier to just set the following rule instead, and get rid of the media query altogether: body { max-width: 1400px; margin: 0 auto; } Orientation failWe also came across some problems with orientation: the mobile-app layout of our example app is designed for portrait orientation, and looks terrible when viewed on a device in landscape orientation. To fix this, we added in a media query that only applies its contents to the markup when device is viewed in landscape orientation: @media all and (max-width: 480px) and (orientation: landscape) { nav {  width: auto;  flex-direction: column; } nav button {  font-size: 6.8vh; } nav button {  border-left: 0; } x-card:nth-child(1) video, x-card:nth-child(2) img, x-card:nth-child(3) {  margin-top: 0; } x-card:nth-child(1) button, x-card:nth-child(2) button {  font-size: 2rem; } } This does the following: Adjusts the nav buttons, changing the direction the flexbox is laid out in, and altering the font size and borders so they sit vertically instead of horizontally. Removes the top margin from the x-card contents so you don't end up with an unsightly gap at the top of the screen in landscape mode. Changes the sizing of the control buttons (e.g. Take Picture, Delete Photo) so they don't look too big and sit properly on the screen. This results in the following layout:  Note: Another solution with respect to orientation might be to just lock the orientation of your app, to portrait or landscape. If you are working on an installed app, you can easily do this with the orientation manifest field. If you want a solution that works across general web apps, you could use the Screen orientation API, and/or provide a message asking the user to rotate their screen if they are using the wrong orientation (for example, if window.innerWidth is larger than window.innerHeight, assume the  game is landscape mode and show a ""please rotate"" message.) ViewportOne last problem to mention for our example app is concerned with mobile browsers and media queries. If we viewed my example in a mobile browser in its current state, we wouldn't see our nice mobile layout. Instead, we'd see the below image. I'm sure you'll agree that this really isn't what we wanted â why is this happening? In short, mobile browsers lie. They don't render web pages at their true viewport width. Instead, they render pages at a higher assumed viewport width (something approaching a laptop screen), and then shrink the result down to fit inside the mobile screen. This is a sensible defensive mechanism â most old school sites that don't have media queries would look terrible when rendered at say, 320px or 480px wide. But this doesn't help us responsible web developers, who have written small screen layouts into our CSS using media queries and want mobile devices to display those! There is a way to override this mobile rendering behavior â viewport, which is inserted into our HTML pages in the form of a <meta> tag. In my example, let's add the following into our HTML <head>: <meta name=""viewport"" content=""width=480"" /> This causes our browser to render our mobile app layout properly â width=480 tells the browser ""render this markup at 480 pixels wide"", hence the media queries kick in appropriately. There are many more options available in the viewport meta tag.Responsive images/videoAnother problem that comes up more and more these days is making image/video weight (size in KB) responsive as well as the dimensions of the image on screen. Yes, you want the images to be contained inside the app UI whether you are using it on desktop or mobile, but you should also consider that mobile apps have much smaller viewport dimensions available than desktop apps, so you should try to give mobile devices a smaller image to download. Mobiles in general (more commonly in some parts of the world than others) are on lower bandwidth connections and have less memory available than desktop devices, so yes, those extra kilobytes really do count. Another challenge is dealing with high resolution screens â raster graphics designed for low resolutions are in danger of appearing tiny when displayed on a high resolution screen, so devices often apply a default zoom factor to rendered pages to avoid this. The trouble with this, then, is that raster images are zoomed in and as a result can start to look pixelated.CSS background imagesFor CSS background images this is a fairly easy problem to solve. If you use the mobile first methodology, you will be creating your mobile layout inside your default CSS, before any media queries have been applied. The media queries then supply CSS that is only applied to the markup when the viewport is above a certain width. Let's look at a quick example: header { height: 300px; width: 100%; background: url(images/small-header.jpg) center; } @media all and (min-width: 480px) { header {  background: url(images/large-header.jpg) center; } } This means that mobile browsers only download the mobile background image asset â not the desktop mobile assets â because they fail the media query tests and therefore ignore the media queries. You can also serve a larger graphic to a higher resolution device using a resolution media query, like so: button { background: url(images/low-res-header.jpg) 1rem center; } @media only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx) { button {  background: url(images/high-res-header.jpg) 1rem center; } } This looks rather complicated, but really it's not â we are providing a number of media query options, as at this time different browsers support different resolution media query types and even units. Brett Jankord has a good explanation at Cross Browser Retina/High Resolution Media Queries.<video>HTML video is fairly well catered for in terms of responsive capabilities. If you wish, you can point to multiple video files via <source> attributes, each with their own source and MIME type: <video controls> <source src=""videos/720/crystal720.mp4"" type=""video/mp4"" /> <source src=""videos/720/crystal720.webm"" type=""video/webm"" /> </video> But you can go one step further. You can include media attributes on the <source> element containing media queries â the video loaded in the browser will depend on both the format the browser supports, and the results of the media tests. So for example: <video controls> <source  src=""videos/320/crystal320.mp4""  type=""video/mp4""  media=""all and (max-width: 480px)"" /> <source  src=""videos/320/crystal320.webm""  type=""video/webm""  media=""all and (max-width: 480px)"" /> <source  src=""videos/720/crystal720.mp4""  type=""video/mp4""  media=""all and (min-width: 481px)"" /> <source  src=""videos/720/crystal720.webm""  type=""video/webm""  media=""all and (min-width: 481px)"" /> </video> This allows your site to serve different video files based on the available space, in order to optimize the user's experience.<img>HTML images are a more difficult proposition. There is no mechanism inherent in HTML images for serving different image files dependent on viewport size, and, due to a number of irksome browser behavior realities, solutions are more difficult to hack together than you would imagine. There are currently some standards proposals in the works that would provide this â the W3C responsive images community group discussed this problem for ages and arrived at the <picture> element, which provides a similar markup structure to <video>, with <source> alternatives selectable via media query results. Another proposal, srcset, was put forward by Apple and takes a slightly different approach, instead providing a new srcset attribute for <img> inside which image references are placed along with ""hints"" that the browser can use to work out which image is most suitable to display given its viewport size, resolution, etc. These are not intended to be mutually exclusive. This all sounds good. But those solutions are definitely not ready for production yet â both are in a very early stage of standardization, and have no support across browsers. Currently we have to rely on various polyfills and other solutions, none of which are perfect for all situations, so you need to decide which one is right for your particular situation. Some available solutions are as follows: HiSRC A jQuery plugin that allows you to create small, medium, and large versions of an image, and then serves the appropriate one according to the browser's resolution and available network speed. Picturefill A JavaScript-based polyfill for <picture>, which works nicely, but it does require a lot of custom markup. Adaptive images A server-side solution, which records the viewport size in a cookie, then resizes images via a combination of PHP and .htaccess to a more appropriate size, if appropriate. This doesn't require markup or scripting, but has a number of limitations. SVG and other vector graphicsFor some image requirements (not photographs, but icons and user interface elements are a good fit), a good solution is to use vector graphics. Because vector images are calculated based on mathematical algorithms rather than containing separate data on every pixel in the image, they tend to be smaller in file size, and are infinitely scalable when zoomed or viewed on high resolution devices (at least, in theory). Some ideas follow, which also help to keep the number of HTTP requests down â another key factor in mobile app performance: You should try to use [CSS](/en-US/docs/Web/CSS) features to programmatically generate graphical effects where possible, rather than relying on image files. These include rounded corners, gradients, and drop shadows. These scale as the resolution changes or the browser zooms. You could also try using SVG to create interface elements. SVG produces vector graphics and is supported well across modern browsers, with polyfills available for older browser support. Using Web fonts for displaying icons is an effective technique for keeping file size and HTTP requests down, and this is supported well across modern and older browsers. See also Web development Mobile Web development Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
202,developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI,"developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI. Attr: namespaceURI property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrnamespaceURIArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelAttrInstance propertieslocalNamenamenamespaceURI ownerElementprefixspecified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoAttr: namespaceURI property The read-only namespaceURI property of the Attr interface returns the namespace URI of the attribute, or null if the element is not in a namespace.  The namespace URI is set at the Attr creation and cannot be changed. An attribute with a namespace can be created using Element.setAttributeNS(). Note: an attribute does not inherit its namespace from the element it is attached to.  If an attribute is not explicitly given a namespace, it has no namespace.  The browser does not handle or enforce namespace validation per se. It is up to the JavaScript application to do any necessary validation. Note, too, that the namespace prefix, once it is associated with a particular attribute node, cannot be changed. ValueA string containing the URI of the namespace, or null if the attribute is not in a namespace.Example The following example shows the results for a prefixed attribute in a case of an HTML element, and of a SVG element. As HTML doesn't handle namespaces, it will always return null in that case. In the case of the SVG element, it will return the URI of the XML namespace, http://www.w3.org/XML/1998/namespace. HTML<svg xml:lang=""en-US"" class=""struct"" height=""1"" width=""1"">Click me</svg> <label xml:lang=""en-US"" class=""struct""></label> <p> <button>Show value for &lt;svg&gt;</button> <button>Show value for &lt;label&gt;</button> </p> <p> Namespace URI of the attribute <code>xml:lang</code>: <output id=""result"">None.</output> </p> JavaScriptconst elements = document.querySelectorAll("".struct""); const buttons = document.querySelectorAll(""button""); const outputEl = document.querySelector(""#result""); let i = 0; for (const button of buttons) { const element = elements[i]; button.addEventListener(""click"", () => {  const attribute = element.attributes[0];  outputEl.value = attribute.namespaceURI; }); i++; } SpecificationsSpecificationDOM Standard # dom-attr-namespaceuriBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The properties Attr.name, returning the qualified name of the attribute, Attr.localName, the local part of the name, and Attr.prefix, the namespace prefix. The Element.namespaceURI property, equivalent to this one but for an Element. The Element.setAttributeNS() method, creating an attribute with a given namespace. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
203,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/getOwnPropertyNames,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Object/getOwnPropertyNames. Object.getOwnPropertyNames() - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsObjectObject.getOwnPropertyNames()Article ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsObjectConstructorObject() constructorPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.assign()Object.create()Object.defineProperties()Object.defineProperty()Object.entries()Object.freeze()Object.fromEntries()Object.getOwnPropertyDescriptor()Object.getOwnPropertyDescriptors()Object.getOwnPropertyNames()Object.getOwnPropertySymbols()Object.getPrototypeOf()Object.hasOwn()Object.prototype.hasOwnProperty()Object.is()Object.isExtensible()Object.isFrozen()Object.prototype.isPrototypeOf()Object.isSealed()Object.keys()Object.preventExtensions()Object.prototype.propertyIsEnumerable()Object.seal()Object.setPrototypeOf()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()Object.values()In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoObject.getOwnPropertyNames()The Object.getOwnPropertyNames() static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.Try itSyntaxObject.getOwnPropertyNames(obj) Parameters obj The object whose enumerable and non-enumerable properties are to be returned. Return valueAn array of strings that corresponds to the properties found directly in the given object.DescriptionObject.getOwnPropertyNames() returns an array whose elements are strings corresponding to the enumerable and non-enumerable properties found directly in a given object obj. The ordering of the enumerable properties in the array is consistent with the ordering exposed by a for...in loop (or by Object.keys()) over the properties of the object. The non-negative integer keys of the object (both enumerable and non-enumerable) are added in ascending order to the array first, followed by the string keys in the order of insertion. In ES5, if the argument to this method is not an object (a primitive), then it will cause a TypeError. In ES2015, a non-object argument will be coerced to an object. Object.getOwnPropertyNames(""foo""); // TypeError: ""foo"" is not an object (ES5 code) Object.getOwnPropertyNames(""foo""); // [""0"", ""1"", ""2"", ""length""] (ES2015 code) ExamplesUsing Object.getOwnPropertyNames()const arr = [""a"", ""b"", ""c""]; console.log(Object.getOwnPropertyNames(arr).sort()); // [""0"", ""1"", ""2"", ""length""] // Array-like object const obj = { 0: ""a"", 1: ""b"", 2: ""c"" }; console.log(Object.getOwnPropertyNames(obj).sort()); // [""0"", ""1"", ""2""] Object.getOwnPropertyNames(obj).forEach((val, idx, array) => { console.log(`${val} -> ${obj[val]}`); }); // 0 -> a // 1 -> b // 2 -> c // non-enumerable property const myObj = Object.create( {}, {  getFoo: {  value() {   return this.foo;  },  enumerable: false,  }, }, ); myObj.foo = 1; console.log(Object.getOwnPropertyNames(myObj).sort()); // [""foo"", ""getFoo""] If you want only the enumerable properties, see Object.keys() or use a for...in loop (note that this will also return enumerable properties found along the prototype chain for the object unless the latter is filtered with hasOwn()). Items on the prototype chain are not listed: function ParentClass() {} ParentClass.prototype.inheritedMethod = function () {}; function ChildClass() { this.prop = 5; this.method = function () {}; } ChildClass.prototype = new ParentClass(); ChildClass.prototype.prototypeMethod = function () {}; console.log(Object.getOwnPropertyNames(new ChildClass())); // [""prop"", ""method""] Get non-enumerable properties onlyThis uses the Array.prototype.filter() function to remove the enumerable keys (obtained with Object.keys()) from a list of all keys (obtained with Object.getOwnPropertyNames()) thus giving only the non-enumerable keys as output. const target = myObject; const enumAndNonenum = Object.getOwnPropertyNames(target); const enumOnly = new Set(Object.keys(target)); const nonenumOnly = enumAndNonenum.filter((key) => !enumOnly.has(key)); console.log(nonenumOnly); SpecificationsSpecificationECMAScript Language Specification # sec-object.getownpropertynamesBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of Object.getOwnPropertyNames in core-js Enumerability and ownership of properties Object.hasOwn() Object.prototype.propertyIsEnumerable() Object.create() Object.keys() Array.prototype.forEach() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
204,developer.mozilla.org/en-US/docs/Glossary/Attribute,"developer.mozilla.org/en-US/docs/Glossary/Attribute. Attribute - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsAttributeArticle ActionsEnglish (US)In this articleReflection of an attributeSee alsoIn this articleReflection of an attributeSee alsoAttributeAn attribute extends an HTML or XML element, changing its behavior or providing metadata. An attribute always has the form name=""value"" (the attribute's identifier followed by its associated value). You may see attributes without the equals sign or a value. That is a shorthand for providing the empty string in HTML, or the attribute's name in XML. <input required /> <!-- is the same asâ¦ --> <input required="""" /> <!-- or --> <input required=""required"" /> Reflection of an attribute Attributes may be reflected into a particular property of the specific interface. It means that the value of the attribute can be read by accessing the property, and can be modified by setting the property to a different value. For example, the placeholder below is reflected into HTMLInputElement.placeholder. Considering the following HTML: <input placeholder=""Original placeholder"" /> We can check the reflection between HTMLInputElement.placeholder and the attribute using: const input = document.querySelector(""input""); const attr = input.getAttributeNode(""placeholder""); console.log(attr.value); console.log(input.placeholder); // Prints the same value as `attr.value` // Changing placeholder value will also change the value of the reflected attribute. input.placeholder = ""Modified placeholder""; console.log(attr.value); // Prints `Modified placeholder` See also HTML attribute reference Information about HTML's global attributes Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
205,developer.mozilla.org/en-US/docs/Web/API/Document/dragleave/event,"developer.mozilla.org/en-US/docs/Web/API/Document/dragleave/event. HTMLElement: dragleave event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdragleaveArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover Experimental styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover() Experimental showPopover() Experimental togglePopover() Experimental Eventsbeforeinputbeforetoggle Experimental changecopycutdragdragenddragenterdragleave dragoverdragstartdroperrorinputloadmscandidatewindowhide Non-standard mscandidatewindowshow Non-standard mscandidatewindowupdate Non-standard pastetoggle Experimental Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: dragleave eventThe dragleave event is fired when a dragged element or text selection leaves a valid drop target. This event is not cancelable.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""dragleave"", (event) => {}); ondragleave = (event) => {}; Event typeA DragEvent. Inherits from Event.   Event     UIEvent     MouseEvent     DragEvent  Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available. DragEvent.dataTransfer Read only The data that is transferred during a drag and drop interaction. ExamplesResetting drop zone styles on dragleaveIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it over the other container, and then releasing it. We give the other container a purple background while the draggable element is over it, to signal that the draggable element could be dropped on to the container. We listen for the dragleave event to reset the container background when the draggable element is dragged off the container. Note though that in this partial example we haven't implemented dropping: for a complete example of drag and drop, see the page for the drag event. HTML <div class=""dropzone""> <div id=""draggable"" draggable=""true"">This div is draggable</div> </div> <div class=""dropzone"" id=""droptarget""></div> CSS body { /* Prevent the user selecting text in the example */ user-select: none; } #draggable { text-align: center; background: white; } .dropzone { width: 200px; height: 20px; background: blueviolet; margin: 10px; padding: 10px; } .dropzone.dragover { background-color: purple; } JavaScript const target = document.getElementById(""droptarget""); target.addEventListener(""dragenter"", (event) => { // highlight potential drop target when the draggable element enters it if (event.target.classList.contains(""dropzone"")) {  event.target.classList.add(""dragover""); } }); target.addEventListener(""dragleave"", (event) => { // reset background of potential drop target when the draggable element leaves it if (event.target.classList.contains(""dropzone"")) {  event.target.classList.remove(""dragover""); } }); ResultSpecificationsSpecificationHTML Standard # ix-handler-ondragleaveHTML Standard # event-dnd-dragleaveBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Other drag and drop events:  drag dragstart dragend dragover dragenter drop This event on other targets:  Window: dragleave event Document: dragleave event SVGElement: dragleave event Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
206,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/hreflang,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/hreflang. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
207,developer.mozilla.org/en-US/docs/Glossary/BigInt,"developer.mozilla.org/en-US/docs/Glossary/BigInt. BigInt - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsBigIntArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoBigIntIn JavaScript, BigInt is a numeric data type that can represent integers in the arbitrary precision format. In other programming languages different numeric types can exist, for examples: Integers, Floats, Doubles, or Bignums.See also Numeric types on Wikipedia The JavaScript type: BigInt The JavaScript global object BigInt Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
208,developer.mozilla.org/en-US/docs/Web/API/HTML/Drag/and/Drop/API/Recommended/drag/types,"developer.mozilla.org/en-US/docs/Web/API/HTML/Drag/and/Drop/API/Recommended/drag/types. Recommended Drag Types - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTML Drag and Drop APIRecommended Drag TypesArticle ActionsEnglish (US)In this articleDragging TextDragging LinksDragging HTML and XMLDragging ImagesDragging NodesDragging Custom DataDragging files to an operating system folderSee alsoHTML Drag and Drop APIGuidesFile drag and dropDrag operationsRecommended Drag TypesInterfacesDataTransferDataTransferItemDataTransferItemListDragEventEventsDocument: dragDocument: dragendDocument: dragenterDocument: dragleaveDocument: dragoverDocument: dragstartDocument: dropIn this articleDragging TextDragging LinksDragging HTML and XMLDragging ImagesDragging NodesDragging Custom DataDragging files to an operating system folderSee alsoRecommended Drag TypesThe HTML Drag and Drop API supports dragging various types of data, including plain text, URLs, HTML code, files, etc. The document describes best practices for common draggable data types.Dragging TextFor dragging text, use the text/plain type. The second data parameter should be the dragged string. For example: event.dataTransfer.setData(""text/plain"", ""This is text to drag""); Dragging text in textboxes and selections on web pages is done automatically by the browser, so you do not need to handle it yourself. It is recommended to always add data of the text/plain type as a fallback for applications or drop targets that do not support other types, unless there is no logical text alternative. Always add this text/plain type last, as it is the least specific and shouldn't be preferred. Note: In older code, you may find text/unicode or the Text types. These are equivalent to text/plain, and will store and retrieve plain text data.Dragging LinksDragged hyperlinks should include data of two types: text/uri-list, and text/plain. Both types should use the link's URL for their data. For example: const dt = event.dataTransfer; dt.setData(""text/uri-list"", ""https://www.mozilla.org""); dt.setData(""text/plain"", ""https://www.mozilla.org""); As usual, set the text/plain type last, as a fallback for the text/uri-list type. Note: the URL type is uri-list with an I, not an L. To drag multiple links, separate each link inside the text/uri-list data with a CRLF linebreak. Lines that begin with a number sign (#) are comments, and should not be considered URLs. You can use comments to indicate the purpose of a URL, the title associated with a URL, or other data. Warning: The text/plain fallback for multiple links should include all URLs, but no comments. For example, this sample text/uri-list data contains two links and a comment: http://www.mozilla.org #A second link http://www.example.com When retrieving a dropped link, ensure you handle when multiple links are dragged, including any comments. For convenience, the special type URL may be used to refer to the first valid link within data for the text/uri-list type. Warning: Do not add data with the URL type â attempting to do so will set the value of the text/uri-list type instead. const url = event.dataTransfer.getData(""URL""); You may also see data with the Mozilla-specific type text/x-moz-url. If it appears, it should appear before the text/uri-list type. It holds the URLs of links followed by their titles, separated by a linebreak. For example: http://www.mozilla.org Mozilla http://www.example.com Example Dragging HTML and XMLHTML content may use the text/html type. The data for this type should be serialized HTML source code. For example, it would be suitable to set its data to the value of the innerHTML property of an element. XML content may use the text/xml type, but ensure that the data is well-formed XML. You may also include a plain text representation of the HTML or XML data using the text/plain type. The data should be just the text without any of the source tags or attributes. For instance: const dt = event.dataTransfer; dt.setData(""text/html"", ""Hello there, <strong>stranger</strong>""); dt.setData(""text/plain"", ""Hello there, stranger""); Updates to DataTransfer.typesThe latest spec dictates that DataTransfer.types should return a frozen array of strings rather than a DOMStringList (this is supported in Firefox 52 and above). As a result, the contains method no longer works; the includes method should be used instead to check if a specific type of data is provided, using code like the following: if ([...event.dataTransfer.types].includes(""text/html"")) { // Do something } You could use feature detection to determine which method is supported on types, then run code as appropriate.Dragging ImagesDirect image dragging is not common. In fact, Mozilla does not support direct image dragging on Mac or Linux. Instead, images are usually dragged only by their URLs. To do this, use the text/uri-list type as with other URLs. The data should be the URL of the image, or a data: URL if the image is not stored on a website or disk. As with links, the data for the text/plain type should also contain the URL. However, a data: URL is not usually useful in a text context, so you may wish to exclude the text/plain data in this situation. In chrome or other privileged code, you may also use the image/jpeg, image/png or image/gif types, depending on the type of image. The data should be an object which implements the nsIInputStream interface. When this stream is read, it should provide the data bits for the image, as if the image was a file of that type. You should also include the application/x-moz-file type if the image is located on disk. In fact, this a common way in which image files are dragged. It is important to set the data in the right order, from most-specific to least-specific. The standard image type, such as image/jpeg, should come first, followed by the application/x-moz-file type. Next, you should set the text/uri-list data, and finally the text/plain data. For example: const dt = event.dataTransfer; dt.setData(""text/uri-list"", imageurl); dt.setData(""text/plain"", imageurl); Dragging NodesNodes and elements in a document may be dragged using the application/x-moz-node type. The data for the type should be a DOM node. This allows the drop target to receive the actual node where the drag was started from. Note that callers from a different domain will not be able to access the node even when it has been dropped. You should always include a text/plain alternative for the node.Dragging Custom DataYou can also use other types that you invent for custom purposes. Strive to always include a text/plain alternative, unless the dragged object is specific to a particular site or application. In this case, the custom type ensures that the data cannot be dropped elsewhere.Dragging files to an operating system folderYou may want to add a file to an existing drag event session, and you may also want to write the file to disk when the drop operation happens over a folder in the operating system when your code receives notification of the target folder's location. This only works in extensions (or other privileged code) and the type application/moz-file-promise should be used. The following sample offers an overview of this advanced case: // currentEvent is an existing drag operation event currentEvent.dataTransfer.setData(""text/x-moz-url"", URL); currentEvent.dataTransfer.setData(""application/x-moz-file-promise-url"", URL); currentEvent.dataTransfer.setData( ""application/x-moz-file-promise-dest-filename"", leafName ); function dataProvider() {} dataProvider.prototype = { QueryInterface(iid) {  if (  iid.equals(Components.interfaces.nsIFlavorDataProvider) ||  iid.equals(Components.interfaces.nsISupports)  )  return this;  throw Components.results.NS_NOINTERFACE; }, getFlavorData(aTransferable, aFlavor, aData, aDataLen) {  if (aFlavor === ""application/x-moz-file-promise"") {  const urlPrimitive = {};  const dataSize = {};  aTransferable.getTransferData(   ""application/x-moz-file-promise-url"",   urlPrimitive,   dataSize  );  const url = urlPrimitive.value.QueryInterface(   Components.interfaces.nsISupportsString  ).data;  console.log(`URL file original is = ${url}`);  const namePrimitive = {};  aTransferable.getTransferData(   ""application/x-moz-file-promise-dest-filename"",   namePrimitive,   dataSize  );  const name = namePrimitive.value.QueryInterface(   Components.interfaces.nsISupportsString  ).data;  console.log(`target filename is = ${name}`);  const dirPrimitive = {};  aTransferable.getTransferData(   ""application/x-moz-file-promise-dir"",   dirPrimitive,   dataSize  );  const dir = dirPrimitive.value.QueryInterface(   Components.interfaces.nsILocalFile  );  console.log(`target folder is = ${dir.path}`);  const file = Cc[""@mozilla.org/file/local;1""].createInstance(   Components.interfaces.nsILocalFile  );  file.initWithPath(dir.path);  file.appendRelativePath(name);  console.log(`output final path is = ${file.path}`);  // now you can write or copy the file yourselfâ¦  } }, }; See also HTML Drag and Drop API (Overview) Drag Operations HTML Living Standard: Drag and Drop Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
209,developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget,"developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget. MouseEvent: relatedTarget property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsMouseEventrelatedTargetArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsMouseEventConstructorMouseEvent()Static propertiesWEBKIT_FORCE_AT_FORCE_MOUSE_DOWN Non-standard WEBKIT_FORCE_AT_MOUSE_DOWN Non-standard Instance propertiesaltKeybuttonbuttonsclientXclientYctrlKeylayerX Non-standard layerY Non-standard metaKeymovementXmovementYmozInputSource Non-standard offsetXoffsetYpageXpageYrelatedTarget screenXscreenYshiftKeywebkitForce Non-standard xyInstance methodsgetModifierState()initMouseEvent() Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoMouseEvent: relatedTarget propertyThe MouseEvent.relatedTarget read-only property is the secondary target for the mouse event, if there is one. That is: Event name target relatedTarget  mouseenter The EventTarget the pointing device entered to The EventTarget the pointing device exited from mouseleave The EventTarget the pointing device exited from The EventTarget the pointing device entered to mouseout The EventTarget the pointing device exited from The EventTarget the pointing device entered to mouseover The EventTarget the pointing device entered to The EventTarget the pointing device exited from dragenter The EventTarget the pointing device entered to The EventTarget the pointing device exited from dragleave The EventTarget the pointing device exited from The EventTarget the pointing device entered to  For events with no secondary target, relatedTarget returns null. FocusEvent.relatedTarget is a similar property for focus events.ValueAn EventTarget object or null.ExamplesTry moving your mouse cursor into and out of the red and blue boxes.HTML<body id=""body""> <div id=""outer"">  <div id=""red""></div>  <div id=""blue""></div> </div> <p id=""log""></p> </body> CSS#outer { width: 250px; height: 125px; display: flex; } #red { flex-grow: 1; background: red; } #blue { flex-grow: 1; background: blue; } #log { max-height: 120px; overflow-y: scroll; } JavaScriptconst mouseoutLog = document.getElementById(""log""), red = document.getElementById(""red""), blue = document.getElementById(""blue""); red.addEventListener(""mouseover"", overListener); red.addEventListener(""mouseout"", outListener); blue.addEventListener(""mouseover"", overListener); blue.addEventListener(""mouseout"", outListener); function outListener(event) { let related = event.relatedTarget ? event.relatedTarget.id : ""unknown""; mouseoutLog.innerText = ` from ${event.target.id} into ${related} ${mouseoutLog.innerText}`; } function overListener(event) { let related = event.relatedTarget ? event.relatedTarget.id : ""unknown""; mouseoutLog.innerText = ` into ${event.target.id} from ${related} ${mouseoutLog.innerText}`; } ResultSpecificationsSpecificationUI Events # dom-mouseevent-relatedtargetBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also MouseEvent Comparison of Event Targets Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
210,developer.mozilla.org/en-US/docs/Glossary/First/input/delay,"developer.mozilla.org/en-US/docs/Glossary/First/input/delay. First input delay - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsFirst input delayArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoFirst input delayFirst input delay (FID) measures the time from when a user first interacts with your site (i.e. when they click a link, tap on a button, or use a custom, JavaScript-powered control) to the time when the browser is actually able to respond to that interaction. It is the length of time, in milliseconds, between the first user interaction on a web page and the browser's response to that interaction. Scrolling and zooming are not included in this metric. The time between when content is painted to the page and when all the functionality becomes responsive to human interaction often varies based on the size and complexity of the JavaScript needing to be downloaded, parsed, and executed on the main thread, and on the device speed or lack thereof (think low end mobile devices). The longer the delay, the worse the user experience. Reducing site initialization time and eliminating long tasks can help eliminate first input delays.See also requestIdleCallback lazy loading Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
211,developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML#meaningful/text/labels,"developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML#meaningful/text/labels. HTML: A good basis for accessibility - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesAccessibilityHTML: A good basis for accessibilityArticle ActionsEnglish (US)In this articleHTML and accessibilityGood semanticsAccessible data tablesText alternativesMore on linksTest your skills!SummaryComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleHTML and accessibilityGood semanticsAccessible data tablesText alternativesMore on linksTest your skills!SummaryHTML: A good basis for accessibility Previous Overview: Accessibility Next A great deal of web content can be made accessible just by making sure the correct Hypertext Markup Language elements are used for the correct purpose at all times. This article looks in detail at how HTML can be used to ensure maximum accessibility. Prerequisites:   Basic computer literacy, a basic understanding of HTML (see   Introduction to HTML), and an understanding of   what accessibility is.   Objective:   To gain familiarity with the features of HTML that have accessibility   benefits and how to use them appropriately in your web documents.   HTML and accessibilityAs you learn more about HTML â read more resources, look at more examples, etc. â you'll keep seeing a common theme: the importance of using semantic HTML (sometimes called POSH, or Plain Old Semantic HTML). This means using the correct HTML elements for their intended purpose as much as possible. You might wonder why this is so important. After all, you can use a combination of CSS and JavaScript to make just about any HTML element behave in whatever way you want. For example, a control button to play a video on your site could be marked up like this: <div>Play video</div> But as you'll see in greater detail later on, it makes sense to use the correct element for the job: <button>Play video</button> Not only do HTML <button>s have some suitable styling applied by default (which you will probably want to override), they also have built-in keyboard accessibility â users can navigate between buttons using the Tab key and activate their selection using Space, Return or Enter. Semantic HTML doesn't take any longer to write than non-semantic (bad) markup if you do it consistently from the start of your project. Even better, semantic markup has other benefits beyond accessibility: Easier to develop with â as mentioned above, you get some functionality for free, plus it is arguably easier to understand. Better on mobile â semantic HTML is arguably lighter in file size than non-semantic spaghetti code, and easier to make responsive. Good for SEO â search engines give more importance to keywords inside headings, links, etc. than keywords included in non-semantic <div>s, etc., so your documents will be more findable by customers. Let's get on and look at accessible HTML in more detail. Note: It is a good idea to have a screen reader set up on your local computer so that you can do some testing of the examples shown below. See our Screen readers guide for more details. Good semanticsWe've already talked about the importance of proper semantics, and why we should use the right HTML element for the job. This cannot be ignored, as it is one of the main places that accessibility is badly broken if not handled properly. Out there on the web, the truth is that people do some very strange things with HTML markup. Some abuses of HTML are due to legacy practices that have not been completely forgotten, and some are just plain ignorance. Whatever the case, you should replace such bad code. Sometimes you are not in the position to get rid of lousy markup â your pages might be generated by some kind of server-side framework over which you don't have full control, or you might have third party content on your page (such as ad banners) over which you have no control. The goal isn't ""all or nothing""; every improvement you can make will help the cause of accessibility.Text contentOne of the best accessibility aids a screen reader user can have is an excellent content structure with headings, paragraphs, lists, etc. An excellent semantic example might look something like the following: <h1>My heading</h1> <p>This is the first section of my document.</p> <p>I'll add another paragraph here too.</p> <ol> <li>Here is</li> <li>a list for</li> <li>you to read</li> </ol> <h2>My subheading</h2> <p> This is the first subsection of my document. I'd love people to be able to find this content! </p> <h2>My 2nd subheading</h2> <p> This is the second subsection of my content, which I think is more interesting than the last one. </p> We've prepared a version with longer text for you to try out with a screen reader (see good-semantics.html). If you try navigating through this, you'll see that this is pretty easy to navigate: The screen reader reads each header out as you progress through the content, notifying you what a heading is, what is a paragraph, etc. It stops after each element, letting you go at whatever pace is comfortable for you. You can jump to the next/previous heading in many screen readers. You can also bring up a list of all headings in many screen readers, allowing you to use them as a handy table of contents to find specific content. People sometimes write headings, paragraphs, etc. using line breaks and adding HTML elements purely for styling, something like the following: <span style=""font-size: 3em"">My heading</span> <br /><br /> This is the first section of my document. <br /><br /> I'll add another paragraph here too. <br /><br /> 1. Here is <br /><br /> 2. a list for <br /><br /> 3. you to read <br /><br /> <span style=""font-size: 2.5em"">My subheading</span> <br /><br /> This is the first subsection of my document. I'd love people to be able to find this content! <br /><br /> <span style=""font-size: 2.5em"">My 2nd subheading</span> <br /><br /> This is the second subsection of my content. I think is more interesting than the last one. If you try our longer version out with a screen reader (see bad-semantics.html), you'll not have a very good experience â the screen reader hasn't got anything to use as signposts, so you can't retrieve a useful table of contents, and the whole page is seen as a single giant block, so it is just read out in one go, all at once. There are other issues too beyond accessibility â it is harder to style the content using CSS, or manipulate it with JavaScript, for example, because there are no elements to use as selectors. Using clear language The language you use can also affect accessibility. In general, you should use clear language that is not overly complex and doesn't use unnecessary jargon or slang terms. This not only benefits people with cognitive or other disabilities; it benefits readers for whom the text is not written in their first language, younger peopleâ¦, everyone, in fact! Apart from this, you should try to avoid using language and characters that don't get read out clearly by the screen reader. For example: Don't use dashes if you can avoid it. Instead of writing 5â7, write 5 to 7. Expand abbreviations â instead of writing Jan, write January. Expand acronyms, at least once or twice, then use the <abbr> tag to describe them. Page layoutsIn the bad old days, people used to create page layouts using HTML tables â using different table cells to contain the header, footer, sidebar, main content column, etc. This is not a good idea because a screen reader will likely give out confusing readouts, especially if the layout is complex and has many nested tables. Try our example table-layout.html example, which looks something like this: <table width=""1200""> <!-- main heading row --> <tr id=""heading"">  <td colspan=""6"">  <h1 align=""center"">Header</h1>  </td> </tr> <!-- nav menu row --> <tr id=""nav"" bgcolor=""#ffffff"">  <td width=""200"">  <a href=""#"" align=""center"">Home</a>  </td>  <td width=""200"">  <a href=""#"" align=""center"">Our team</a>  </td>  <td width=""200"">  <a href=""#"" align=""center"">Projects</a>  </td>  <td width=""200"">  <a href=""#"" align=""center"">Contact</a>  </td>  <td width=""300"">  <form width=""300"">   <label   >Search   <input    type=""search""    name=""q""    placeholder=""Search query""    width=""300"" />   </label>  </form>  </td>  <td width=""100"">  <button width=""100"">Go!</button>  </td> </tr> <!-- spacer row --> <tr id=""spacer"" height=""10"">  <td></td> </tr> <!-- main content and aside row --> <tr id=""main"">  <td id=""content"" colspan=""4"">  <!-- main content goes here -->  </td>  <td id=""aside"" colspan=""2"" valign=""top"">  <h2>Related</h2>  <!-- aside content goes here -->  </td> </tr> <!-- spacer row --> <tr id=""spacer"" height=""10"">  <td></td> </tr> <!-- footer row --> <tr id=""footer"">  <td colspan=""6"">  <p>Â©Copyright 1996 by nobody. All rights reversed.</p>  </td> </tr> </table> If you try to navigate this using a screen reader, it will probably tell you that there's a table to be looked at (although some screen readers can guess the difference between table layouts and data tables). You'll then likely (depending on which screen reader you're using) have to go down into the table as an object and look at its features separately, then get out of the table again to carry on navigating the content. Table layouts are a relic of the past â they made sense back when CSS support was not widespread in browsers, but now they just create confusion for screen reader users. Additionally, their source code requires more markup, which makes them less flexible and more difficult to maintain. You can verify these claims by comparing your previous experience with a more modern website structure example, which could look something like this: <header> <h1>Header</h1> </header> <nav> <!-- main navigation in here --> </nav> <!-- Here is our page's main content --> <main> <!-- It contains an article --> <article>  <h2>Article heading</h2>  <!-- article content in here --> </article> <aside>  <h2>Related</h2>  <!-- aside content in here --> </aside> </main> <!-- And here is our main footer that is used across all the pages of our website --> <footer> <!-- footer content in here --> </footer> If you try our more modern structure example with a screen reader, you'll see that the layout markup no longer gets in the way and confuses the content readout. It is also much leaner and smaller in terms of code size, which means easier to maintain code, and less bandwidth for the user to download (particularly prevalent for those on slow connections). Another consideration when creating layouts is using HTML semantic elements as seen in the above example (see content sectioning) â you can create a layout using only nested <div> elements, but it is better to use appropriate sectioning elements to wrap your main navigation (<nav>), footer (<footer>), repeating content units (<article>), etc. These provide extra semantics for screen readers (and other tools) to give users extra clues about the content they are navigating (see Screen Reader Support for new HTML5 Section Elements for an idea of what screen reader support is like). Note: In addition to having good semantics and an attractive layout, your content should make logical sense in its source order â you can always place it where you want using CSS later on, but you should get the source order right to start with, so what screen reader users get read out to them will make sense. UI controlsBy UI controls, we mean the main parts of web documents that users interact with â most commonly buttons, links, and form controls. In this section, we'll look at the basic accessibility concerns to be aware of when creating such controls. Later articles on WAI-ARIA and multimedia will look at other aspects of UI accessibility. One key aspect of the accessibility of UI controls is that by default, browsers allow them to be manipulated by the keyboard. You can try this out using our native-keyboard-accessibility.html example (see the source code). Open this in a new tab, and try pressing the tab key; after a few presses, you should see the tab focus start to move through the different focusable elements. The focused elements are given a highlighted default style in every browser (it differs slightly between different browsers) so that you can tell what element is focused.  Note: You can enable an overlay that shows the page tabbing order in your developer tools. For more information see: Accessibility Inspector > Show web page tabbing order. You can then press Enter/Return to follow a focused link or press a button (we've included some JavaScript to make the buttons alert a message), or start typing to enter text in a text input. Other form elements have different controls; for example, the <select> element can have its options displayed and cycled between using the up and down arrow keys. Note: Different browsers may have different keyboard control options available. See Using native keyboard accessibility for more details. You essentially get this behavior for free, just by using the appropriate elements, e.g. <h1>Links</h1> <p>This is a link to <a href=""https://www.mozilla.org"">Mozilla</a>.</p> <p> Another link, to the <a href=""https://developer.mozilla.org"">Mozilla Developer Network</a>. </p> <h2>Buttons</h2> <p> <button data-message=""This is from the first button"">Click me!</button> <button data-message=""This is from the second button"">Click me too!</button> <button data-message=""This is from the third button"">And me!</button> </p> <h2>Form</h2> <form> <div>  <label for=""name"">Fill in your name:</label>  <input type=""text"" id=""name"" name=""name"" /> </div> <div>  <label for=""age"">Enter your age:</label>  <input type=""text"" id=""age"" name=""age"" /> </div> <div>  <label for=""mood"">Choose your mood:</label>  <select id=""mood"" name=""mood"">  <option>Happy</option>  <option>Sad</option>  <option>Angry</option>  <option>Worried</option>  </select> </div> </form> This means using links, buttons, form elements, and labels appropriately (including the <label> element for form controls). However, it is again the case that people sometimes do strange things with HTML. For example, you sometimes see buttons marked up using <div>s, for example: <div data-message=""This is from the first button"">Click me!</div> <div data-message=""This is from the second button"">Click me too!</div> <div data-message=""This is from the third button"">And me!</div> But using such code is not advised â you immediately lose the native keyboard accessibility you would have had if you'd just used <button> elements, plus you don't get any of the default CSS styling that buttons get. In the rare to non-existent case when you need to use a non-button element for a button, use the button role and implement all the default button behaviors, including keyboard and mouse button support. Building keyboard accessibility back in Adding such advantages back in takes a bit of work (you can see an example in our fake-div-buttons.html example â also see the source code). Here we've given our fake <div> buttons the ability to be focused (including via tab) by giving each one the attribute tabindex=""0"". We also include role=""button"" so screen reader users know they can focus on and interact with the element: <div data-message=""This is from the first button"" tabindex=""0"" role=""button""> Click me! </div> <div data-message=""This is from the second button"" tabindex=""0"" role=""button""> Click me too! </div> <div data-message=""This is from the third button"" tabindex=""0"" role=""button""> And me! </div> Basically, the tabindex attribute is primarily intended to allow tabbable elements to have a custom tab order (specified in positive numerical order), instead of just being tabbed through in their default source order. This is nearly always a bad idea, as it can cause major confusion. Use it only if you really need to, for example, if the layout shows things in a very different visual order to the source code, and you want to make things work more logically. There are two other options for tabindex: tabindex=""0"" â as indicated above, this value allows elements that are not normally tabbable to become tabbable. This is the most useful value of tabindex. tabindex=""-1"" â this allows not normally tabbable elements to receive focus programmatically, e.g., via JavaScript, or as the target of links. While the above addition allows us to tab to the buttons, it does not allow us to activate them via the Enter/Return key. To do that, we had to add the following bit of JavaScript trickery: document.onkeydown = (e) => { // The Enter/Return key if (e.key === ""Enter"") {  document.activeElement.click(); } }; Here we add a listener to the document object to detect when a button has been pressed on the keyboard. We check what button was pressed via the event object's key property; if the key pressed is Enter/Return, we run the function stored in the button's onclick handler using document.activeElement.click(). activeElement which gives us the element that is currently focused on the page. This is a lot of extra hassle to build the functionality back in. And there's bound to be other problems with it. Better to just use the right element for the right job in the first place. Meaningful text labels UI control text labels are very useful to all users, but getting them right is particularly important to users with disabilities. You should make sure that your button and link text labels are understandable and distinctive. Don't just use ""Click here"" for your labels, as screen reader users sometimes get up a list of buttons and form controls. The following screenshot shows our controls being listed by VoiceOver on Mac. Make sure your labels make sense out of context, read on their own, as well as in the context of the paragraph they are in. For example, the following shows an example of good link text: <p> Whales are really awesome creatures. <a href=""whales.html"">Find out more about whales</a>. </p> but this is bad link text: <p> Whales are really awesome creatures. To find out more about whales, <a href=""whales.html"">click here</a>. </p> Note: You can find a lot more about link implementation and best practices in our Creating hyperlinks article. You can also see some good and bad examples at good-links.html and bad-links.html. Form labels are also important for giving you a clue about what you need to enter into each form input. The following seems like a reasonable enough example: Fill in your name: <input type=""text"" id=""name"" name=""name"" /> However, this is not so useful for disabled users. There is nothing in the above example to associate the label unambiguously with the form input and make it clear how to fill it in if you cannot see it. If you access this with some screen readers, you may only be given a description along the lines of ""edit text."" The following is a much better example: <div> <label for=""name"">Fill in your name:</label> <input type=""text"" id=""name"" name=""name"" /> </div> With code like this, the label will be clearly associated with the input; the description will be more like ""Fill in your name: edit text."" As an added bonus, in most browsers associating a label with a form input means that you can click the label to select or activate the form element. This gives the input a bigger hit area, making it easier to select. Note: You can see some good and bad form examples in good-form.html and bad-form.html. You can find a nice explanation of the importance of proper text labels, and how to investigate text label issues using the Firefox Accessibility Inspector, in the following video:Accessible data tablesA basic data table can be written with very simple markup, for example: <table> <tr>  <td>Name</td>  <td>Age</td>  <td>Pronouns</td> </tr> <tr>  <td>Gabriel</td>  <td>13</td>  <td>he/him</td> </tr> <tr>  <td>Elva</td>  <td>8</td>  <td>she/her</td> </tr> <tr>  <td>Freida</td>  <td>5</td>  <td>she/her</td> </tr> </table> But this has problems â there is no way for a screen reader user to associate rows or columns together as groupings of data. To do this, you need to know what the header rows are and if they are heading up rows, columns, etc. This can only be done visually for the above table (see bad-table.html and try the example out yourself). Now have a look at our punk bands table example â you can see a few accessibility aids at work here: Table headers are defined using <th> elements â you can also specify if they are headers for rows or columns using the scope attribute. This gives you complete groups of data that can be consumed by screen readers as single units. The <caption> element and the <table> element's summary attribute both do similar jobs â they act as alt text for a table, giving a screen reader user a useful quick summary of the table's contents. The <caption> element is generally preferred as it makes it's content accessible to sighted users too, who might also find it useful. You don't really need both. Note: See our HTML table advanced features and accessibility article for more details about accessible data tables. Text alternativesWhereas textual content is inherently accessible, the same cannot necessarily be said for multimedia content â image and video content cannot be seen by visually-impaired people, and audio content cannot be heard by hearing-impaired people. We cover video and audio content in detail in the Accessible multimedia, but for this article we'll look at accessibility for the humble <img> element. We have a simple example written up, accessible-image.html, which features four copies of the same image: <img src=""dinosaur.png"" /> <img src=""dinosaur.png"" alt=""A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."" /> <img src=""dinosaur.png"" alt=""A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."" title=""The Mozilla red dinosaur"" /> <img src=""dinosaur.png"" aria-labelledby=""dino-label"" /> <p id=""dino-label""> The Mozilla red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth. </p> The first image, when viewed by a screen reader, doesn't really offer the user much help â VoiceOver for example reads out ""/dinosaur.png, image"". It reads out the filename to try to provide some help. In this example the user will at least know it is a dinosaur of some kind, but often files may be uploaded with machine-generated file names (e.g. from a digital camera) and these file names would likely provide no context to the image's content. Note: This is why you should never include text content inside an image â screen readers can't access it. There are other disadvantages too â you can't select it and copy/paste it. Just don't do it! When a screen reader encounters the second image, it reads out the full alt attribute â ""A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth."". This highlights the importance of not only using meaningful file names in case so-called alt text is not available, but also making sure that alt text is provided in alt attributes wherever possible. Note that the contents of the alt attribute should always provide a direct representation of the image and what it conveys visually. The alt should be brief and concise and include all the information conveyed in the image that is not duplicated in the surrounding text. The content of the alt attribute for a single image differs based on the context. For example, if the photo of Fluffy is an avatar next to a review for Yuckymeat dog food, alt=""Fluffy"" is appropriate. If the photo is part of Fluffy's adoption page for the animal rescue society, information conveyed in the image that is relevant for a prospective dog parent that is not duplicated in the surrounding text should be included. A longer description, such as alt=""Fluffy, a tri-color terrier with very short hair, with a tennis ball in her mouth."" is appropriate. As the surrounding text likely has Fluffy's size and breed, that is not included in the alt. However, as the dog's biography likely doesn't include hair length, colors, or toy preferences, which the potential parent needs to know, it is included. Is the image outdoors, or does Fluffy have a red collar with a blue leash? Not important in terms of adopting the pet and therefore not included. All information image conveys that a sited user can access and is relevant to the context is what needs to be conveyed; nothing more. Keep it short, precise, and useful. Any personal knowledge or extra description shouldn't be included here, as it is not useful for people who have not seen the image before. If the ball is Fluffy's favorite toy or if the sited user can't know that from the image, then don't include it. One thing to consider is whether your images have meaning inside your content, or whether they are purely for visual decoration, and thus have no meaning. If they are decorative, it is better to write an empty text as a value for alt attribute (see Empty alt attributes) or to just include them in the page as CSS background images. Note: Read Images in HTML and Responsive images for a lot more information about image implementation and best practices. If you do want to provide extra contextual information, you should put it in the text surrounding the image, or inside a title attribute, as shown above. In this case, most screen readers will read out the alt text, the title attribute, and the filename. In addition, browsers display title text as tooltips when moused over. Let's have another quick look at the fourth method: <img src=""dinosaur.png"" aria-labelledby=""dino-label"" /> <p id=""dino-label"">The Mozilla red Tyrannosaurusâ¦</p> In this case, we are not using the alt attribute at all â instead, we have presented our description of the image as a regular text paragraph, given it an id, and then used the aria-labelledby attribute to refer to that id, which causes screen readers to use that paragraph as the alt text/label for that image. This is especially useful if you want to use the same text as a label for multiple images â something that isn't possible with alt. Note: aria-labelledby is part of the WAI-ARIA spec, which allows developers to add in extra semantics to their markup to improve screen reader accessibility where needed. To learn more about how it works, read our WAI-ARIA Basics article. Figures and figure captionsHTML includes two elements â <figure> and <figcaption> â which associate a figure of some kind (it could be anything, not necessarily an image) with a figure caption: <figure> <img  src=""dinosaur.png""  alt=""The Mozilla Tyrannosaurus""  aria-describedby=""dinodescr"" /> <figcaption id=""dinodescr"">  A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a  human, with small arms, and a large head with lots of sharp teeth. </figcaption> </figure> While there is mixed screen reader support of associating figure captions with their figures, including aria-labelledby or aria-describedby creates the association if none is present. That said, the element structure is useful for CSS styling, plus it provides a way to place a description of the image next to it in the source.Empty alt attributes<h3> <img src=""article-icon.png"" alt="""" /> Tyrannosaurus Rex: the king of the dinosaurs </h3> There may be times where an image is included in a page's design, but its primary purpose is for visual decoration. You'll notice in the code example above that the image's alt attribute is empty â this is to make screen readers recognize the image, but not attempt to describe the image (instead they'd just say ""image"", or similar). The reason to use an empty alt instead of not including it is because many screen readers announce the whole image URL if no alt is provided. In the above example, the image is acting as a visual decoration to the heading it's associated with. In cases like this, and in cases where an image is only decoration and has no content value, you should include an empty alt in your img elements. Another alternative is to use the aria role attribute role=""presentation"" as this also stops screen readers from reading out alternative text. Note: If possible you should use CSS to display images that are only decorative. More on linksLinks (the <a> element with an href attribute), depending on how they are used, can help or harm accessibility. By default, links are accessible in appearance. They can improve accessibility by helping a user quickly navigate to different sections of a document. They can also harm accessibility if their accessible styling is removed or if JavaScript causes them to behave in unexpected ways.Link stylingBy default, links are visually different from other text in both color and text-decoration, with links being blue and underlined by default, purple and underlined if visited, and with a focus-ring when they receive keyboard focus. Color should not be used as the sole method of distinguishing links from non-linking content. Link text color, like all text, has to be significantly different from the background color (a 4.5:1 contrast). In addition, links should visually be significantly different from non-linking text, with a minimum contrast requirement of 3:1 between link text and surrounding text and between default, visited, and focus/active states and a 4.5:1 contrast between all those state colors and the background color.onclick eventsAnchor tags are often abused with the onclick event to create pseudo-buttons by setting href to ""#"" or ""javascript:void(0)"" to prevent the page from refreshing. These values cause unexpected behavior when copying or dragging links, opening links in a new tab or window, bookmarking, and when JavaScript is still downloading, errors out, or is disabled. This also conveys incorrect semantics to assistive technologies (e.g., screen readers). In these cases, it is recommended to use a <button> instead. In general you should only use an anchor for navigation using a proper URL.External links and linking to non-HTML resourcesLinks that open in a new tab or window via the target=""_blank"" declaration and links to whose href value points to a file resource should include an indicator about the behavior that will occur when the link is activated. People experiencing low vision conditions, who are navigating with the aid of screen reading technology, or who have cognitive concerns may become confused when the new tab, window, or application is opened unexpectedly. Older versions of screen reading software may not even announce the behavior. Link that opens a new tab or window <a target=""_blank"" href=""https://www.wikipedia.org/"" >Wikipedia (opens in a new window)</a > Link to a non-HTML resource <a target=""_blank"" href=""2017-annual-report.ppt"" >2017 Annual Report (PowerPoint)</a > If an icon is used in place of text to signify this kind of links behavior, make sure it includes an alternate description. WebAIM: Links and Hypertext - Hypertext Links MDN Understanding WCAG, Guideline 3.2 explanations G200: Opening new windows and tabs from a link only when necessary | W3C Techniques for WCAG 2.0 G201: Giving users advanced warning when opening a new window | W3C Techniques for WCAG 2.0 Skip linksA skip link, also known as skipnav, is an a element placed as close as possible to the opening <body> element that links to the beginning of the page's main content. This link allows people to bypass content repeated throughout multiple pages on a website, such as a website's header and primary navigation. Skip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be a laborious task. WebAIM: ""Skip Navigation"" Links Howâto: Use Skip Navigation links - The A11Y Project MDN Understanding WCAG, Guideline 2.4 explanations Understanding Success Criterion 2.4.1 | W3C Understanding WCAG 2.0 ProximityLarge amounts of interactive contentâincluding anchorsâplaced in close visual proximity to each other should have space inserted to separate them. This spacing is beneficial for people who suffer from fine motor control issues and may accidentally activate the wrong interactive content while navigating. Spacing may be created using CSS properties such as margin. Hand tremors and the giant-button-problem - Axess Lab Test your skills!You've reached the end of this article, but can you remember the most important information? See Test your skills: HTML Accessibility to verify that you've retained this information before you move on.SummaryYou should now be well-versed in writing accessible HTML for most occasions. Our WAI-ARIA basics article will help to fill gaps in this knowledge, but this article has taken care of the basics. Next up we'll explore CSS and JavaScript, and how accessibility is affected by their good or bad use. Previous Overview: Accessibility Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 9, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
212,developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature,"developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature. DOMImplementation: hasFeature() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDOMImplementationhasFeature()Article ActionsEnglish (US)In this articleSyntaxSpecificationsBrowser compatibilitySee alsoDocument Object ModelDOMImplementationInstance methodscreateDocument()createDocumentType()createHTMLDocument()hasFeature() Deprecated Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxSpecificationsBrowser compatibilitySee alsoDOMImplementation: hasFeature() methodDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The DOMImplementation.hasFeature() method returns a boolean flag indicating if a given feature is supported. It is deprecated and modern browsers return true in all cases.  The different implementations fairly diverged in what kind of features were reported. The latest version of the spec settled to force this method to always return true, where the functionality was accurate and in use. SyntaxhasFeature(feature, version) Parameters feature A string representing the feature name. version   A string representing the version of the specification defining  the feature.  Return valueNone (undefined).SpecificationsSpecificationDOM Standard # dom-domimplementation-hasfeatureBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOMImplementation interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
213,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyIdentifier. KeyboardEvent: keyIdentifier property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventkeyIdentifierArticle ActionsEnglish (US)In this articleSpecificationsBrowser compatibilityUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposingkeykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleSpecificationsBrowser compatibilityKeyboardEvent: keyIdentifier propertyNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.Deprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The deprecated KeyboardEvent.keyIdentifier read-only property returns a ""key identifier"" string that can be used to determine what key was pressed. Its non-deprecated replacement is KeyboardEvent.key.SpecificationsNot part of any current specification. This property was part of an old draft of the DOM Level 3 Events Specification, but it was removed in later drafts in favor of KeyboardEvent.key.Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
214,developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#selector/list,"developer.mozilla.org/en-US/docs/Web/CSS/Selector/list#selector/list. Selector list - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSSelector listArticle ActionsEnglish (US)In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleDescriptionExamplesValid and invalid selector listsSpecificationsBrowser compatibilitySee alsoSelector listThe CSS selector list (,) selects all the matching nodes. A selector list is a comma-separated list of selectors.DescriptionWhen multiple selectors share the same declarations, they can be grouped together into a comma-separated list. Selector lists can also be passed as parameters to some functional CSS pseudo-classes. White space may appear before and/or after the comma. The following three declarations are equivalent: span { border: red 2px solid; } div { border: red 2px solid; } span, div { border: red 2px solid; } :is(span, div) { border: red 2px solid; } ExamplesWhen applying the same styles to elements matching different criteria, grouping the selectors in a comma-separated list can improve consistency while reducing the size of style sheets.Single line groupingThis example shows grouping selectors in a single line using a comma-separated list. h1, h2, h3, h4, h5, h6 { font-family: helvetica; } Multi line groupingThis example shows grouping selectors in multiple lines using a comma-separated list. #main, .content, article, h1 + p { font-size: 1.1em; } Valid and invalid selector listsAn invalid selector represents, and therefore matches, nothing. When a selector list contains an invalid selector, the entire style block is ignored, except for the :is() and :where() pseudo-classes that accept forgiving selector lists.Invalid selector listA downside to using a selector list is that a single unsupported selector in the selector list invalidates the entire rule. Consider the following two CSS rule sets: h1 { font-family: sans-serif; } h2:invalid-pseudo { font-family: sans-serif; } h3 { font-family: sans-serif; } h1, h2:invalid-pseudo, h3 { font-family: sans-serif; } They are not equivalent. In the first rule set, styles will be applied on the h1 and h3 elements, but the h2:invalid-pseudo rule will not be parsed. In the second rule set, because one selector in the list is invalid, the entire rule will not be parsed. Because of this, no style will be applied to the h1 and h3 elements as when any selector in a list of selectors in invalid, the entire style block will be ignored.Forgiving selector listA way to remedy the invalid selector list problem is to use the :is() or the :where() pseudo-class, which accept a forgiving selector list. Each selector in a forgiving selector list is parsed individually. So any invalid selectors in the list are ignored and the valid ones are used. Carrying on from the previous example, the following two CSS rule sets are now equivalent: h1 { font-family: sans-serif; } h2:maybe-unsupported { font-family: sans-serif; } h3 { font-family: sans-serif; } :is(h1, h2:maybe-unsupported, h3) { font-family: sans-serif; } The difference between the two is that the specificity of :is() is its most specific argument, whereas the :where() selector and the forgiving selector list parameter do not add any specificity weight.Relative selector listA relative selector list is a comma-separated selector list parsed as relative selectors, which begin with an explicit or implied combinator. h2:has(+ p, + ul.red) { font-style: italic; } In the above example, the italic style will be applied to any h2 heading that is immediately followed by <p> or <ul class=""red"">. Note that pseudo-elements and the :has() selector are not valid within the :has() relative selector list.SpecificationsSpecificationSelectors Level 4 # groupingBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The :is() and :where() pseudo-classes accept forgiving selector lists. The :not() pseudo-class accepts a regular selector list The :has() pseudo-class accepts a relative selector list. CSS selectors Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 30, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
215,developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item,"developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item. HTMLCollection: item() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLCollectionitem()Article ActionsEnglish (US)In this articleSyntaxUsage notesExamplesBrowser compatibilitySee alsoHTML DOM APIHTMLCollectionInstance propertieslengthInstance methodsitem() namedItem()Related pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleSyntaxUsage notesExamplesBrowser compatibilitySee alsoHTMLCollection: item() method The HTMLCollection method item() returns the node located at the specified offset into the collection. Note: Because the contents of an HTMLCollection are  live, changes to the underlying DOM can and will cause the position of individual  nodes in the collection to change, so the index value will not necessarily remain  constant for a given node. Syntaxitem(index) Parameters index   The position of the Node to be returned. Elements appear in an  HTMLCollection in the same order in which they appear in the document's  source.  Return value The Node at the specified index, or null if index is less than zero or greater than or equal to the length property. Usage notes The item() method returns a numbered element from an HTMLCollection. In JavaScript, it is easier to treat the HTMLCollection as an array and to index it using array notation. See the example below. Examplesconst images = document.images; // This is an HTMLCollection const img0 = images.item(0); // You can use the item() method this way const img1 = images[1]; // But this notation is easier and more common Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also NodeList.item() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
216,developer.mozilla.org/en-US/docs/Learn/Tools/and/testing/Cross/browser/testing/HTML/and/CSS#ie/conditional/comments,"developer.mozilla.org/en-US/docs/Learn/Tools/and/testing/Cross/browser/testing/HTML/and/CSS#ie/conditional/comments. Handling common HTML and CSS problems - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesTools and testingCross browser testingHandling common HTML and CSS problemsArticle ActionsEnglish (US)In this articleThe trouble with HTML and CSSFirst things first: fixing general problemsCommon cross browser problemsFinding helpSummaryComplete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityIn this articleThe trouble with HTML and CSSFirst things first: fixing general problemsCommon cross browser problemsFinding helpSummaryHandling common HTML and CSS problems Previous Overview: Cross browser testing Next With the scene set, we'll now look specifically at the common cross-browser problems you will come across in HTML and CSS code, and what tools can be used to prevent problems from happening, or fix problems that occur. This includes linting code, handling CSS prefixes, using browser dev tools to track down problems, using polyfills to add support into browsers, tackling responsive design problems, and more. Prerequisites:   Familiarity with the core HTML,   CSS, and   JavaScript languages; an idea   of the high level   principles of cross browser testing.   Objective:   To be able to diagnose common HTML and CSS cross browser problems, and   use appropriate tools and techniques to fix them.   The trouble with HTML and CSSSome of the trouble with HTML and CSS lies with the fact that both languages are fairly simple, and often developers don't take them seriously, in terms of making sure the code is well-crafted, efficient, and semantically describes the purpose of the features on the page. In the worst cases, JavaScript is used to generate the entire web page content and style, which makes your pages inaccessible, and less performant (generating DOM elements is expensive). In other cases, nascent features are not supported consistently across browsers, which can make some features and styles not work for some users. Responsive design problems are also common â a site that looks good in a desktop browser might provide a terrible experience on a mobile device, because the content is too small to read, or perhaps the site is slow because of expensive animations. Let's go forth and look at how we can reduce cross browser errors that result from HTML/CSS.First things first: fixing general problemsWe said in the first article of this series that a good strategy to begin with is to test in a couple of modern browsers on desktop/mobile, to make sure your code is working generally, before going on to concentrate on the cross browser issues. In our Debugging HTML and Debugging CSS articles, we provided some really basic guidance on debugging HTML/CSS â if you are not familiar with the basics, you should definitely study these articles before carrying on. Basically, it is a matter of checking whether your HTML and CSS code is well formed and doesn't contain any syntax errors. Note: One common problem with CSS and HTML arises when different CSS rules begin to conflict with one another. This can be especially problematic when you are using third party code. For example, you might use a CSS framework and find that one of the class names it uses clashes with one you've already used for a different purpose. Or you might find that HTML generated by some kind of third party API (generating ad banners, for example) includes a class name or ID that you are already using for a different purpose. To ensure this doesn't happen, you need to research the tools you are using first and design your code around them. It is also worth ""namespacing"" CSS, e.g. if you have a widget, make sure it has a distinct class, and then start the selectors that select elements inside the widget with this class, so conflicts are less likely. For example .audio-player ul a. ValidationFor HTML, validation involves making sure all your tags are properly closed and nested, you are using a DOCTYPE, and you are using tags for their correct purpose. A good strategy is to validate your code regularly. One service that can do this is the W3C Markup Validation Service, which allows you to point to your code, and returns a list of errors: CSS has a similar story â you need to check that your property names are spelled correctly, property values are spelled correctly and are valid for the properties they are used on, you are not missing any curly braces, and so on. The W3C has a CSS Validator available too, for this purpose.LintersAnother good option to choose is a so-called Linter application, which not only points out errors, but can also flag up warnings about bad practices in your CSS, and other points besides. Linters can generally be customized to be stricter or more relaxed in their error/warning reporting. There are many online linter applications, the best of which are probably Dirty Markup (HTML, CSS, JavaScript), and CSS Lint (CSS only). These allows you to paste your code into a window, and it will flag up any errors with crosses, which can then be hovered to get an error message informing you what the problem is. Dirty Markup also allows you to make fixes to your markup using the Clean button. However, it is not very convenient to have to copy and paste your code over to a web page to check its validity several times. What you really want is a linter that will fit into your standard workflow with the minimum of hassle. Many code editors have linter plugins. GitHub's Atom code editor for example has a rich plugin ecosystem available, with many linting options. To show you an example of how such plugins generally work: Install Atom (if you haven't got an up-to-date version already installed) â download it from the Atom page linked above. Go to Atom's Preferencesâ¦ dialog (e.g. by Choosing Atom > Preferencesâ¦ on Mac, or File > Preferencesâ¦ on Windows/Linux) and choose the Install option in the left-hand menu. In the Search packages text field, type ""lint"" and press Enter/Return to search for linting-related packages. You should see a package called lint at the top of the list. Install this first (using the Install button), as other linters rely on it to work. After that, install the linter-csslint plugin for linting CSS, and the linter-tidy plugin for linting HTML. After the packages have finished installing, try loading up an HTML file and a CSS file: you'll see any issues highlighted with green (for warnings) and red (for errors) circles next to the line numbers, and a separate panel at the bottom provides line numbers, error messages, and sometimes suggested values or other fixes.  Other popular editors have similar linting packages available. For example, see: SublimeLinter for Sublime Text Notepad++ linter VSCode linters Browser developer toolsThe developer tools built into most browsers also feature useful tools for hunting down errors, mainly for CSS. Note: HTML errors don't tend to show up so easily in dev tools, as the browser will try to correct badly-formed markup automatically; the W3C validator is the best way to find HTML errors â see Validation above. As an example, in Firefox the CSS inspector will show CSS declarations that aren't applied crossed out, with a warning triangle. Hovering the warning triangle will provide a descriptive error message: Other browser devtools have similar features.Common cross browser problemsNow let's move on to look at some of the most common cross browser HTML and CSS problems. The main areas we'll look at are lack of support for modern features, and layout issues.Browsers not supporting modern featuresThis is a common problem, especially when you need to support old browsers or you are using features that are implemented in some browsers but not yet in all. In general, most core HTML and CSS functionality (such as basic HTML elements, CSS basic colors and text styling) works across all the browsers you'll want to support; more problems are uncovered when you start wanting to use newer HTML, CSS, and APIs. MDN displays browser compatibility data for each feature documented; for example, see the browser support table for the :has() pseudo-class. Once you've identified a list of technologies you will be using that are not universally supported, it is a good idea to research what browsers they are supported in, and what related techniques are useful. See Finding help below. HTML fallback behavior Some problems can be solved by just taking advantage of the natural way in which HTML/CSS work. Unrecognized HTML elements are treated by the browser as anonymous inline elements (effectively inline elements with no semantic value, similar to <span> elements). You can still refer to them by their names, and style them with CSS, for example â you just need to make sure they are behaving as you want them to. Style them just as you would any other element, including setting the display property to something other than inline if needed. More complex elements like HTML <video>, <audio>, <picture>, <object>, and <canvas> (and other features besides) have natural mechanisms for fallbacks to be added in case the resources linked to are not supported. You can add fallback content in between the opening and closing tags, and non-supporting browsers will effectively ignore the outer element and run the nested content. For example: <video id=""video"" controls preload=""metadata"" poster=""img/poster.jpg""> <source  src=""video/tears-of-steel-battle-clip-medium.webm""  type=""video/webm"" /> <!-- Offer download --> <p>  Your browser does not support WebM video; here is a link to  <a href=""video/tears-of-steel-battle-clip-medium.mp4""  >view the video directly</a  > </p> </video> This example includes a simple link allowing you to download the video if even the HTML video player doesn't work, so at least the user can still access the video. Another example is form elements. When new <input> types were introduced for inputting specific information into forms, such as times, dates, colors, numbers, etc., if a browser didn't support the new feature, the browser used the default of type=""text"". Input types were added, which are very useful, particularly on mobile platforms, where providing a pain-free way of entering data is very important for the user experience. Platforms provide different UI widgets depending on the input type, such as a calendar widget for entering dates. Should a browser not support an input type, the user can still enter the required data. The following example shows date and time inputs: <form> <div>  <label for=""date"">Enter a date:</label>  <input id=""date"" type=""date"" /> </div> <div>  <label for=""time"">Enter a time:</label>  <input id=""time"" type=""time"" /> </div> </form> The output of this code is as follows: Note: You can also see this running live as forms-test.html on GitHub (see the source code also). If you view the example, you'll see the UI features in action as you try to input data. On devices with dynamic keyboards, type-specific keypads will be displayed. On a non-supporting browser, the inputs will just default to normal text inputs, meaning the user can still enter the correct information. CSS fallback behavior CSS is arguably better at fallbacks than HTML. If a browser encounters a declaration or rule it doesn't understand, it just skips it completely without applying it or throwing an error. This might be frustrating for you and your users if such a mistake slips through to production code, but at least it means the whole site doesn't come crashing down because of one error, and if used cleverly you can use it to your advantage. Let's look at an example â a simple box styled with CSS, which has some styling provided by various CSS features:  Note: You can also see this example running live on GitHub as button-with-fallback.html (also see the source code). The button has a number of declarations that style, but the two we are most interested in are as follows: button { /* â¦ */ background-color: #ff0000; background-color: rgb(255 0 0 / 1); box-shadow: inset 1px 1px 3px rgb(255 255 255 / 0.4), inset -1px -1px 3px rgb(0   0 0 / 0.4); } button:hover { background-color: rgb(255 0 0 / 0.5); } button:active { box-shadow: inset 1px 1px 3px rgb(0 0 0 / 0.4), inset -1px -1px 3px rgb(255   255 255 / 0.4); } Here we are providing an RGBA background-color that changes opacity on hover to give the user a hint that the button is interactive, and some semi-transparent inset box-shadow shades to give the button a bit of texture and depth. While now fully supported, RGBA colors and box shadows haven't been around forever; starting in IE9. Browsers that didn't support RGBA colors would ignore the declaration meaning in old browsers the background just wouldn't show up at all so the text would be unreadable, no good at all! To sort this out, we have added a second background-color declaration, which just specifies a hex color â this is supported way back in really old browsers, and acts as a fallback if the modern shiny features don't work. What happens is a browser visiting this page first applies the first background-color value; when it gets to the second background-color declaration, it will override the initial value with this value if it supports RGBA colors. If not, it will just ignore the entire declaration and move on. Note: The same is true for other CSS features like media queries, @font-face and @supports blocks â if they are not supported, the browser just ignores them. Selector support Of course, no CSS features will apply at all if you don't use the right selectors to select the element you want to style! In a comma-separated list of selectors, if you just write a selector incorrectly, it may not match any element. If, however, a selector is invalid, the entire list of selectors is ignored, along with the entire style block. For this reason, only include a :-moz- prefixed pseudo class or pseudo-element in a forgiving selector list, such as :where(::-moz-thumb). Don't include a :-moz- prefixed pseudo class or pseudo-element within a comma-separated group of selectors outside of a :is() or :where() forgiving selector list as all browsers other than Firefox will ignore the entire block. Note that both :is() and :where() can be passed as parameters in other selector lists, including :has() and :not(). We find that it is helpful to inspect the element you are trying to style using your browser's dev tools, then look at the DOM tree breadcrumb trail that DOM inspectors tend to provide to see if your selector makes sense compared to it. For example, in the Firefox dev tools, you get this kind of output at the bottom of the DOM inspector: If for example you were trying to use this selector, you'd be able to see that it wouldn't select the input element as desired: form > #date (The date form input isn't a direct child of the <form>; you'd be better off using a general descendant selector instead of a child selector). Handling CSS prefixes Another set of problems comes with CSS prefixes â these are a mechanism originally used to allow browser vendors to implement their own version of a CSS (or JavaScript) feature while the technology is in an experimental state, so they can play with it and get it right without conflicting with other browser's implementations, or the final unprefixed implementations. For example, Firefox uses -moz- and Chrome/Edge/Opera/Safari use -webkit-. Other prefixes you may encounter in old code include -ms-, used by Internet Explorer and early versions of Edge, and -o, used in the original versions of Opera. Prefixed features were never supposed to be used in production websites â they are subject to change or removal without warning, may cause performance issues in old browser versions that require them, and have been the cause of cross-browser issues. This is particularly a problem, for example, when developers decide to use only the -webkit- version of a property, which implied that the site won't work in other browsers. This actually happened so much that other browser vendors implemented -webkit- prefixed versions of several CSS properties. While browsers still support some prefixed property names, property values, and pseudo classes, now experimental features are put behind flags so that web developers can test them during development. If using a prefix, make sure it is needed; that the property is one of the few remaining prefixed features. You can look up what browsers require prefixes on MDN reference pages, and sites like caniuse.com. If you are unsure, you can also find out by doing some testing directly in browsers. Include the standard non-prefixed version after the prefixed style declaration; it will be ignored if not supported and used when supported. .masked { -webkit-mask-image: url(MDN.svg); mask-image: url(MDN.svg); -webkit-mask-size: 50%; mask-size: 50%; } Try this simple example: Use this page, or another site that has a prominent heading or other block-level element. Right/Cmd + click on the element in question and choose Inspect/Inspect element (or whatever the option is in your browser) â this should open up the dev tools in your browser, with the element highlighted in the DOM inspector. Look for a feature you can use to select that element. For example, at the time of writing, this page on MDN has a logo with an ID of mdn-docs-logo. Store a reference to this element in a variable, for example:  const test = document.getElementById(""mdn-docs-logo""); Now try to set a new value for the CSS property you are interested in on that element; you can do this using the style property of the element, for example try typing these into the JavaScript console:  test.style.transform = ""rotate(90deg)""; As you start to type the property name representation after the second dot (note that in JavaScript, CSS property names are written in lower camel case, not hyphenated), the JavaScript console should begin to autocomplete the names of the properties that exist in the browser and match what you've written so far. This is useful for finding out what properties are implemented in that browser. If you do need to include modern features, test for feature support using @supports, which allows you to implement native feature detection tests, and nest the prefixed or new feature within the @supports block. Responsive design problems Responsive design is the practice of creating web layouts that change to suit different device form factors â for example, different screen widths, orientations (portrait or landscape), or resolutions. A desktop layout for example will look terrible when viewed on a mobile device, so you need to provide a suitable mobile layout using media queries, and make sure it is applied correctly using viewport. You can find a detailed account of such practices in The building blocks of responsive design. Resolution is a big issue too â for example, mobile devices are less likely to need big heavy images than desktop computers, and are more likely to have slower internet connections and possibly even expensive data plans that make wasted bandwidth more of a problem. In addition, different devices can have a range of different resolutions, meaning that smaller images could appear pixelated. There are a number of techniques that allow you to work around such problems, from simple mobile first media queries, to more complex responsive image techniques, including <picture> and the <image> element's srcset and sizes attributes.Finding helpThere are many other issues you'll encounter with HTML and CSS, making knowledge of how to find answers online invaluable. Among the best sources of support information are the Mozilla Developer Network (that's where you are now!), stackoverflow.com, and caniuse.com. To use the Mozilla Developer Network (MDN), most people do a search engine search of the technology they are trying to find information on, plus the term ""mdn"", for example, ""mdn HTML video"". MDN contains several useful types of content: Reference material with browser support information for client-side web technologies, e.g. the <video> reference page. Other supporting reference material, e.g. the Guide to media types and formats on the web, Useful tutorials that solve specific problems, for example, Creating a cross-browser video player. caniuse.com provides support information, along with a few useful external resource links. For example, see https://caniuse.com/#search=video (you just have to enter the feature you are searching for into the text box). stackoverflow.com (SO) is a forum site where you can ask questions and have fellow developers share their solutions, look up previous posts, and help other developers. You are advised to look and see if there is an answer to your question already, before posting a new question. For example, we searched for ""disabling autofocus on HTML dialog"" on SO, and very quickly came up with Disable showModal auto-focusing using HTML attributes. Aside from that, try searching your favorite search engine for an answer to your problem. It is often useful to search for specific error messages if you have them â other developers will be likely to have had the same problems as you.SummaryNow you should be familiar with the main types of cross browser HTML and CSS problems that you'll meet in web development, and how to go about fixing them. Previous Overview: Cross browser testing Next Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 10, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
217,developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement#methods,"developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement#methods. HTMLTableElement - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLTableElementArticle ActionsEnglish (US)In this articleInstance propertiesInstance methodsSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLTableElementInstance propertiesalign Deprecated bgColor Deprecated border Deprecated captioncellPadding Deprecated cellSpacing Deprecated frame Deprecated rowsrules Deprecated summary Deprecated tBodiestFoottHeadwidth Deprecated Instance methodscreateCaption()createTBody()createTFoot()createTHead()deleteCaption()deleteRow()deleteTFoot()deleteTHead()insertRow()Inheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleInstance propertiesInstance methodsSpecificationsBrowser compatibilitySee alsoHTMLTableElementThe HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.   EventTarget     Node     Element     HTMLElement     HTMLTableElement  Instance propertiesInherits properties from its parent, HTMLElement. HTMLTableElement.caption A HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <caption>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree as the first child of this element and the first <caption> that is a child of this element is removed from the tree, if any. HTMLTableElement.tHead A HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <thead>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element, and the first <thead> that is a child of this element is removed from the tree, if any. HTMLTableElement.tFoot A HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. When set, if the object doesn't represent a <tfoot>, a DOMException with the HierarchyRequestError name is thrown. If a correct object is given, it is inserted in the tree immediately before the first element that is neither a <caption>, a <colgroup>, nor a <thead>, or as the last child if there is no such element, and the first <tfoot> that is a child of this element is removed from the tree, if any. HTMLTableElement.rows Read only Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child of one of its <thead>, <tbody> and <tfoot> children. The rows members of a <thead> appear first, in tree order, and those members of a <tbody> last, also in tree order. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes. HTMLTableElement.tBodies Read only Returns a live HTMLCollection containing all the <tbody> of the element. The HTMLCollection is live and is automatically updated when the HTMLTableElement changes. Obsolete Properties Warning: The following properties are obsolete. You should avoid using them. HTMLTableElement.align Deprecated A string containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are ""left"", ""right"", and ""center"". HTMLTableElement.bgColor Deprecated A string containing the background color of the cells. It reflects the obsolete bgColor attribute. HTMLTableElement.border Deprecated A string containing the width in pixels of the border of the table. It reflects the obsolete border attribute. HTMLTableElement.cellPadding Deprecated A string containing the width in pixels of the horizontal and vertical space between cell content and cell borders. It reflects the obsolete cellpadding attribute. HTMLTableElement.cellSpacing Deprecated A string containing the width in pixels of the horizontal and vertical separation between cells. It reflects the obsolete cellspacing attribute. HTMLTableElement.frame Deprecated A string containing the type of the external borders of the table. It reflects the obsolete frame attribute and can take one of the following values: ""void"", ""above"", ""below"", ""hsides"", ""vsides"", ""lhs"", ""rhs"", ""box"", or ""border"". HTMLTableElement.rules Deprecated A string containing the type of the internal borders of the table. It reflects the obsolete rules attribute and can take one of the following values: ""none"", ""groups"", ""rows"", ""cols"", or ""all"". HTMLTableElement.summary Deprecated A string containing a description of the purpose or the structure of the table. It reflects the obsolete summary attribute. HTMLTableElement.width Deprecated A string containing the length in pixels or in percentage of the desired width of the entire table. It reflects the obsolete width attribute. Instance methodsInherits methods from its parent, HTMLElement. HTMLTableElement.createTHead() Returns an HTMLTableSectionElement representing the first <thead> that is a child of the element. If none is found, a new one is created and inserted in the tree immediately before the first element that is neither a <caption>, nor a <colgroup>, or as the last child if there is no such element. HTMLTableElement.deleteTHead() Removes the first <thead> that is a child of the element. HTMLTableElement.createTFoot() Returns an HTMLTableSectionElement representing the first <tfoot> that is a child of the element. If none is found, a new one is created and inserted in the tree as the last child. HTMLTableElement.deleteTFoot() Removes the first <tfoot> that is a child of the element. HTMLTableElement.createTBody() Returns a HTMLTableSectionElement representing a new <tbody> that is a child of the element. It is inserted in the tree after the last element that is a <tbody>, or as the last child if there is no such element. HTMLTableElement.createCaption() Returns an HTMLElement representing the first <caption> that is a child of the element. If none is found, a new one is created and inserted in the tree as the first child of the <table> element. HTMLTableElement.deleteCaption() Removes the first <caption> that is a child of the element. HTMLTableElement.insertRow() Returns an HTMLTableRowElement representing a new row of the table. It inserts it in the rows collection immediately before the <tr> element at the given index position. If necessary a <tbody> is created. If the index is -1, the new row is appended to the collection. If the index is smaller than -1 or greater than the number of rows in the collection, a DOMException with the value IndexSizeError is raised. HTMLTableElement.deleteRow() Removes the row corresponding to the index given in parameter. If the index value is -1 the last row is removed; if it is smaller than -1 or greater than the amount of rows in the collection, a DOMException with the value IndexSizeError is raised. SpecificationsSpecificationHTML Standard # htmltableelementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The HTML element implementing this interface: <table>. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
218,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/Number,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global/Objects/Number/Number. Number() constructor - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStandard built-in objectsNumberNumber() constructorArticle ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoStandard built-in objectsNumberConstructorNumber() constructorPropertiesNumber.EPSILONNumber.MAX_SAFE_INTEGERNumber.MAX_VALUENumber.MIN_SAFE_INTEGERNumber.MIN_VALUENumber.NaNNumber.NEGATIVE_INFINITYNumber.POSITIVE_INFINITYMethodsNumber.isFinite()Number.isInteger()Number.isNaN()Number.isSafeInteger()Number.parseFloat()Number.parseInt()Number.prototype.toExponential()Number.prototype.toFixed()Number.prototype.toLocaleString()Number.prototype.toPrecision()Number.prototype.toString()Number.prototype.valueOf()Inheritance:FunctionConstructorFunction() constructorPropertiesFunction.prototype.arguments Non-standard Deprecated Function.prototype.caller Non-standard Deprecated Function: displayName Non-standard Function: lengthFunction: nameFunction: prototypeMethodsFunction.prototype[@@hasInstance]()Function.prototype.apply()Function.prototype.bind()Function.prototype.call()Function.prototype.toString()ObjectPropertiesObject.prototype.constructorObject.prototype.__proto__ Deprecated MethodsObject.prototype.__defineGetter__() Deprecated Object.prototype.__defineSetter__() Deprecated Object.prototype.__lookupGetter__() Deprecated Object.prototype.__lookupSetter__() Deprecated Object.prototype.hasOwnProperty()Object.prototype.isPrototypeOf()Object.prototype.propertyIsEnumerable()Object.prototype.toLocaleString()Object.prototype.toString()Object.prototype.valueOf()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoNumber() constructorThe Number() constructor creates Number objects. When called as a function, it returns primitive values of type Number.Syntaxnew Number(value) Number(value) Note: Number() can be called with or without new, but with different effects. See Return value. Parameters value The numeric value of the object being created. Return valueWhen Number is called as a constructor (with new), it creates a Number object, which is not a primitive. When Number is called as a function, it coerces the parameter to a number primitive. BigInts are converted to numbers. If the value can't be converted, it returns NaN. Warning: You should rarely find yourself using Number as a constructor. ExamplesCreating Number objectsconst a = new Number(""123""); // a === 123 is false const b = Number(""123""); // b === 123 is true a instanceof Number; // is true b instanceof Number; // is false typeof a; // ""object"" typeof b; // ""number"" Using Number() to convert a BigInt to a numberNumber() is the only case where a BigInt can be converted to a number without throwing, because it's very explicit. +1n; // TypeError: Cannot convert a BigInt value to a number 0 + 1n; // TypeError: Cannot mix BigInt and other types, use explicit conversions Number(1n); // 1 Note that this may result in loss of precision, if the BigInt is too large to be safely represented. BigInt(Number(2n ** 54n + 1n)) === 2n ** 54n + 1n; // false SpecificationsSpecificationECMAScript Language Specification # sec-number-constructorBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Polyfill of modern Number behavior (with support binary and octal literals) in core-js NaN The Math global object Integers with arbitrary precision: BigInt Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 12, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
219,developer.mozilla.org/en-US/docs/Web/CSS/At-rule,"developer.mozilla.org/en-US/docs/Web/CSS/At-rule. At-rules - CSS: Cascading Style Sheets | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesCSSAt-rulesArticle ActionsEnglish (US)In this articleSyntaxConditional group rulesIndexSpecificationsSee also CSS Tutorials CSS basics CSS first steps CSS first steps overview What is CSS? Getting started with CSS How CSS is structured How CSS works Assessment: Styling a biography page  CSS building blocks CSS building blocks overview CSS selectors Type, class, and ID selectors Attribute selectors Pseudo-classes and pseudo-elements Combinators Cascade, specificity, and inheritance Cascade layers The box model Backgrounds and borders Handling different text directions Overflowing content CSS values and units Sizing items in CSS Images, media, and form elements Styling tables Debugging CSS Organizing your CSS Assessment: Fundamental CSS comprehension Assessment: Creating fancy letterheaded paper Assessment: A cool-looking box  Styling text Styling text overview Fundamental text and font styling Styling lists Styling links Web fonts Assessment: Typesetting a community school homepage  CSS layout CSS layout overview Introduction to CSS layout Normal Flow Flexbox Grids Floats Positioning Multiple-column layout Responsive design Beginner's guide to media queries Legacy layout methods Supporting older browsers Assessment: Fundamental layout comprehension Reference ModulesCSS animationsCSS backgrounds and bordersCSS basic user interfaceCSS box alignmentCSS box modelCSS cascading variablesCSS charsetsCSS color adjustmentCSS colorsCSS compositing and blendingCSS conditional rulesCSS containmentCSS counter stylesCSS displayCSS filter effectsCSS flexible box layoutCSS fontsCSS fragmentationCSS generated contentCSS Grid LayoutCSS imagesCSS ListsCSS logical properties and valuesCSS maskingMedia queriesCSS miscellaneousCSS motion pathCSS multi-column layoutCSS namespacesCSS overflowCSS Paged MediaCSS positioned layoutCSS Ruby LayoutCSS scroll snapCSS scrollbars stylingCSS shapesCSS tableCSS textCSS text decorationCSS transformsCSS transitionsCSS writing modesCSSOM viewPaged media Properties-moz-*-moz-float-edge Non-standard Deprecated -moz-force-broken-image-icon Non-standard Deprecated -moz-image-region Non-standard -moz-orient Non-standard -moz-user-focus Non-standard -moz-user-input Non-standard Deprecated -webkit-*-webkit-border-before Non-standard -webkit-box-reflect Non-standard -webkit-line-clamp-webkit-mask-attachment Non-standard -webkit-mask-box-image Non-standard -webkit-mask-composite Non-standard -webkit-mask-position-x Non-standard -webkit-mask-position-y Non-standard -webkit-mask-repeat-x Non-standard -webkit-mask-repeat-y Non-standard -webkit-overflow-scrolling Non-standard -webkit-tap-highlight-color Non-standard -webkit-text-fill-color-webkit-text-security Non-standard -webkit-text-stroke-webkit-text-stroke-color-webkit-text-stroke-width-webkit-touch-callout Non-standard accent-coloralign-*align-contentalign-itemsalign-selfalign-tracks Experimental allanimation-*animationanimation-compositionanimation-delayanimation-directionanimation-durationanimation-fill-modeanimation-iteration-countanimation-nameanimation-play-stateanimation-timeline Experimental animation-timing-functionappearanceaspect-ratiobackdrop-filterbackface-visibilitybackground-*backgroundbackground-attachmentbackground-blend-modebackground-clipbackground-colorbackground-imagebackground-originbackground-positionbackground-position-xbackground-position-ybackground-repeatbackground-sizeblock-sizeborder-*borderborder-blockborder-block-colorborder-block-endborder-block-end-colorborder-block-end-styleborder-block-end-widthborder-block-startborder-block-start-colorborder-block-start-styleborder-block-start-widthborder-block-styleborder-block-widthborder-bottomborder-bottom-colorborder-bottom-left-radiusborder-bottom-right-radiusborder-bottom-styleborder-bottom-widthborder-collapseborder-colorborder-end-end-radiusborder-end-start-radiusborder-imageborder-image-outsetborder-image-repeatborder-image-sliceborder-image-sourceborder-image-widthborder-inlineborder-inline-colorborder-inline-endborder-inline-end-colorborder-inline-end-styleborder-inline-end-widthborder-inline-startborder-inline-start-colorborder-inline-start-styleborder-inline-start-widthborder-inline-styleborder-inline-widthborder-leftborder-left-colorborder-left-styleborder-left-widthborder-radiusborder-rightborder-right-colorborder-right-styleborder-right-widthborder-spacingborder-start-end-radiusborder-start-start-radiusborder-styleborder-topborder-top-colorborder-top-left-radiusborder-top-right-radiusborder-top-styleborder-top-widthborder-widthbottombox-*box-align Non-standard Deprecated box-decoration-breakbox-direction Non-standard Deprecated box-flex Non-standard Deprecated box-flex-group Non-standard Deprecated box-lines Non-standard Deprecated box-ordinal-group Non-standard Deprecated box-orient Non-standard Deprecated box-pack Non-standard Deprecated box-shadowbox-sizingbreak-*break-afterbreak-beforebreak-insidecaption-sidecaret-colorclearclip Deprecated clip-pathcolorcolor-schemecolumn-*column-countcolumn-fillcolumn-gapcolumn-rulecolumn-rule-colorcolumn-rule-stylecolumn-rule-widthcolumn-spancolumn-widthcolumnscontain-*containcontain-intrinsic-block-sizecontain-intrinsic-heightcontain-intrinsic-inline-sizecontain-intrinsic-sizecontain-intrinsic-widthcontainer-*containercontainer-namecontainer-typecontentcontent-visibility Experimental counter-*counter-incrementcounter-resetcounter-setcursordirectiondisplayempty-cellsfilterflex-*flexflex-basisflex-directionflex-flowflex-growflex-shrinkflex-wrapfloatfont-*fontfont-familyfont-feature-settingsfont-kerningfont-language-overridefont-optical-sizingfont-palettefont-sizefont-size-adjustfont-smooth Non-standard font-stretchfont-stylefont-synthesisfont-variantfont-variant-alternatesfont-variant-capsfont-variant-east-asianfont-variant-emojifont-variant-ligaturesfont-variant-numericfont-variant-positionfont-variation-settingsfont-weightforced-color-adjustgapgrid-*gridgrid-areagrid-auto-columnsgrid-auto-flowgrid-auto-rowsgrid-columngrid-column-endgrid-column-startgrid-rowgrid-row-endgrid-row-startgrid-templategrid-template-areasgrid-template-columnsgrid-template-rowshanging-punctuationheighthyphenate-characterhyphenate-limit-charshyphensimage-*image-orientationimage-renderingimage-resolution Experimental initial-letter Experimental initial-letter-align Experimental inline-sizeinset-*insetinset-blockinset-block-endinset-block-startinset-inlineinset-inline-endinset-inline-startisolationjustify-*justify-contentjustify-itemsjustify-selfjustify-tracks Experimental leftletter-spacingline-*line-breakline-heightline-height-step Experimental list-*list-stylelist-style-imagelist-style-positionlist-style-typemargin-*marginmargin-blockmargin-block-endmargin-block-startmargin-bottommargin-inlinemargin-inline-endmargin-inline-startmargin-leftmargin-rightmargin-topmargin-trim Experimental mask-*maskmask-bordermask-border-modemask-border-outsetmask-border-repeatmask-border-slicemask-border-sourcemask-border-widthmask-clipmask-compositemask-imagemask-modemask-originmask-positionmask-repeatmask-sizemask-typemasonry-auto-flow Experimental math-*math-depth Experimental math-shift Experimental math-stylemax-*max-block-sizemax-heightmax-inline-sizemax-widthmin-*min-block-sizemin-heightmin-inline-sizemin-widthmix-blend-modeobject-fitobject-positionoffset-*offsetoffset-anchoroffset-distanceoffset-pathoffset-position Experimental offset-rotateopacityorderorphansoutline-*outlineoutline-coloroutline-offsetoutline-styleoutline-widthoverflow-*overflowoverflow-anchoroverflow-blockoverflow-clip-marginoverflow-inlineoverflow-wrapoverflow-xoverflow-yoverscroll-*overscroll-behavioroverscroll-behavior-blockoverscroll-behavior-inlineoverscroll-behavior-xoverscroll-behavior-ypadding-*paddingpadding-blockpadding-block-endpadding-block-startpadding-bottompadding-inlinepadding-inline-endpadding-inline-startpadding-leftpadding-rightpadding-toppage-*pagepage-break-afterpage-break-beforepage-break-insidepaint-orderperspectiveperspective-originplace-*place-contentplace-itemsplace-selfpointer-eventspositionprint-color-adjustquotesresizerightrotaterow-gapruby-align Experimental ruby-positionscalescroll-*scroll-behaviorscroll-marginscroll-margin-blockscroll-margin-block-endscroll-margin-block-startscroll-margin-bottomscroll-margin-inlinescroll-margin-inline-endscroll-margin-inline-startscroll-margin-leftscroll-margin-rightscroll-margin-topscroll-paddingscroll-padding-blockscroll-padding-block-endscroll-padding-block-startscroll-padding-bottomscroll-padding-inlinescroll-padding-inline-endscroll-padding-inline-startscroll-padding-leftscroll-padding-rightscroll-padding-topscroll-snap-alignscroll-snap-coordinate Non-standard Deprecated scroll-snap-destination Non-standard Deprecated scroll-snap-points-x Non-standard Deprecated scroll-snap-points-y Non-standard Deprecated scroll-snap-stopscroll-snap-typescroll-snap-type-x Non-standard Deprecated scroll-snap-type-y Non-standard Deprecated scroll-timeline Experimental scroll-timeline-axis Experimental scroll-timeline-name Experimental scrollbar-*scrollbar-colorscrollbar-gutterscrollbar-widthshape-*shape-image-thresholdshape-marginshape-outsidetab-sizetable-layouttext-*text-aligntext-align-lasttext-combine-uprighttext-decorationtext-decoration-colortext-decoration-linetext-decoration-skip Experimental text-decoration-skip-inktext-decoration-styletext-decoration-thicknesstext-emphasistext-emphasis-colortext-emphasis-positiontext-emphasis-styletext-indenttext-justifytext-orientationtext-overflowtext-renderingtext-shadowtext-size-adjust Experimental text-transformtext-underline-offsettext-underline-positiontoptouch-actiontransform-*transformtransform-boxtransform-origintransform-styletransition-*transitiontransition-delaytransition-durationtransition-propertytransition-timing-functiontranslateunicode-bidiuser-modify Non-standard Deprecated user-selectvertical-alignview-transition-name Experimental visibilitywhite-spacewidowswidthwill-changeword-breakword-spacingwriting-modez-indexzoom Non-standard SelectorsAttribute selectorsClass selectorsID selectorsType selectorsUniversal selectors CombinatorsAdjacent sibling combinatorChild combinatorColumn combinator Experimental Descendant combinatorGeneral sibling combinatorSelector list Pseudo-classes:-moz-broken Non-standard :-moz-drag-over Non-standard :-moz-first-node Non-standard :-moz-focusring Non-standard :-moz-handler-blocked Non-standard :-moz-handler-crashed Non-standard :-moz-handler-disabled Non-standard :-moz-last-node Non-standard :-moz-loading Non-standard :-moz-locale-dir(ltr) Non-standard :-moz-locale-dir(rtl) Non-standard :-moz-only-whitespace Non-standard :-moz-submit-invalid Non-standard :-moz-suppressed Non-standard :-moz-user-disabled Non-standard :-moz-window-inactive Non-standard :active:any-link:autofill:blank Experimental :checked:current:default:defined:dir():disabled:empty:enabled:first:first-child:first-of-type:focus:focus-visible:focus-within:fullscreen:future Experimental :has():host:host-context():host():hover:in-range:indeterminate:invalid:is():lang():last-child:last-of-type:left:link:local-link:modal:not():nth-child():nth-col():nth-last-child():nth-last-col():nth-last-of-type():nth-of-type():only-child:only-of-type:optional:out-of-range:past Experimental :paused:picture-in-picture:placeholder-shown:playing:popover-open Experimental :read-only:read-write:required:right:root:scope:target:target-within Experimental :user-invalid (:-moz-ui-invalid):user-valid (:-moz-ui-valid):valid:visited:where() Pseudo-elements::-moz-color-swatch Non-standard ::-moz-focus-inner Non-standard ::-moz-list-bullet Non-standard ::-moz-list-number Non-standard ::-moz-page Non-standard ::-moz-page-sequence Non-standard ::-moz-progress-bar Non-standard ::-moz-range-progress Non-standard ::-moz-range-thumb Non-standard ::-moz-range-track Non-standard ::-moz-scrolled-page-sequence Non-standard ::-webkit-inner-spin-button Non-standard ::-webkit-meter-bar Non-standard ::-webkit-meter-even-less-good-value Non-standard ::-webkit-meter-inner-element Non-standard ::-webkit-meter-optimum-value Non-standard ::-webkit-meter-suboptimum-value Non-standard ::-webkit-outer-spin-button Non-standard ::-webkit-progress-bar Non-standard ::-webkit-progress-inner-element Non-standard ::-webkit-progress-value Non-standard ::-webkit-scrollbar Non-standard ::-webkit-search-cancel-button Non-standard ::-webkit-search-results-button Non-standard ::-webkit-slider-runnable-track Non-standard ::-webkit-slider-thumb Non-standard ::after::backdrop::before::cue::cue-region::file-selector-button::first-letter::first-line::grammar-error Experimental ::highlight() Experimental ::marker::part()::placeholder::selection::slotted()::spelling-error Experimental ::target-text Experimental ::view-transition Experimental ::view-transition-group Experimental ::view-transition-image-pair Experimental ::view-transition-new Experimental ::view-transition-old Experimental At-rules@charset@color-profile@container@counter-style@document Non-standard Deprecated @font-face@font-feature-values@font-palette-values@import@keyframes@layer@media@namespace@page@property@supports Functions-moz-image-rect Experimental Non-standard abs() Experimental acos()asin()atan()atan2()attr()calc()clamp()cos()counter()counters()cross-fade()element() Experimental env()exp()fit-content()hypot()log()max()min()minmax()mod() Experimental path()pow()ray() Experimental rem() Experimental repeat()round() Experimental sign() Experimental sin()sqrt()symbols()tan()url()var() Types<alpha-value><angle><angle-percentage><basic-shape><blend-mode><calc-constant><calc-sum><color><custom-ident><dashed-ident><dimension><display-box><display-inside><display-internal><display-legacy><display-listitem><display-outside><easing-function><filter-function><flex><frequency><frequency-percentage><gradient><hex-color><hue><ident><image><integer><length><length-percentage><line-style><named-color><number><overflow><percentage><position><ratio><resolution><shape> Deprecated <string><system-color><time><time-percentage><transform-function> Guides Animations Using CSS animations  Backgrounds and Borders Using multiple backgrounds Resizing background images  Box alignment Box alignment in block layout Box alignment in flexbox Box alignment in grid layout Box alignment in multi-column layout  Box model Introduction to the CSS basic box model Mastering margin collapsing  Columns Basic concepts of Multicol Styling columns Spanning and balancing Handling overflow in Multicol Content breaks in Multicol  Conditional rules Using feature queries  CSSOM view Coordinate systems  Flexbox Basic concepts of Flexbox Comparison with other layout methods Aligning items in a flex container Ordering flex items Controlling flex item ratios Mastering wrapping of flex items Typical use cases of Flexbox Backwards compatibility of Flexbox  Flow layout Block and Inline layout in normal flow In flow and Out of flow Formatting contexts explained Flow layout and writing modes Flow layout and overflow  Fonts OpenType font features guide Variable fonts guide  Grid Basics concepts of grid layout Relationship to other layout methods Line-based placement Grid template areas Layout using named grid lines Auto-placement in grid layout Box alignment in grid layout Grids, logical values and writing modes Grid layout and accessibility Grid Layout and progressive enhancement Realizing common layouts using grids Subgrid Masonry layout  Images Using CSS gradients  Lists and counters Using CSS counters Consistent list indentation  Logical properties Basic concepts Floating and positioning Margins, borders and padding Sizing  Media queries Using media queries Using media queries for accessibility Testing media queries programmatically  Positioning Understanding CSS z-index  Scroll snap Basic concepts of scroll snap  Shapes Overview of shapes Shapes from box values Basic shapes Shapes from images  Text Wrapping and breaking text  Transforms Using transforms  Transitions Using transitions Layout cookbook Media objects Columns Center an element Sticky footers Split navigation Breadcrumb navigation List group with badges Pagination Card Grid wrapper Tools Color picker Box shadow generator Border image generator In this articleSyntaxConditional group rulesIndexSpecificationsSee alsoAt-rulesAt-rules are CSS statements that instruct CSS how to behave. They begin with an at sign, '@' (U+0040 COMMERCIAL AT), followed by an identifier and includes everything up to the next semicolon, ';' (U+003B SEMICOLON), or the next CSS block, whichever comes first.SyntaxRegular/* General structure */ @identifier (RULE); /* Example: tells browser to use UTF-8 character set */ @charset ""utf-8""; There are several regular at-rules, designated by their identifiers, each with a different syntax: @charset â Defines the character set used by the style sheet. @import â Tells the CSS engine to include an external style sheet. @namespace â Tells the CSS engine that all its content must be considered prefixed with an XML namespace. Nested@identifier (RULE) { } A subset of nested statements, which can be used as a statement of a style sheet as well as inside of conditional group rules. @media â A conditional group rule that will apply its content if the device meets the criteria of the condition defined using a media query. @supports â A conditional group rule that will apply its content if the browser meets the criteria of the given condition. @document Deprecated â A conditional group rule that will apply its content if the document in which the style sheet is applied meets the criteria of the given condition. @page â Describes the aspect of layout changes that will be applied when printing the document. @font-face â Describes the aspect of an external font to be downloaded. @keyframes â Describes the aspect of intermediate steps in a CSS animation sequence. @counter-style â Defines specific counter styles that are not part of the predefined set of styles. @font-feature-values (plus @swash, @ornaments, @annotation, @stylistic, @styleset and @character-variant) â Define common names in font-variant-alternates for feature activated differently in OpenType. @property â Describes the aspect of custom properties and variables. @layer â Declares a cascade layer and defines the order of precedence in case of multiple cascade layers. Conditional group rulesMuch like the values of properties, each at-rule has a different syntax. Nevertheless, several of them can be grouped into a special category named conditional group rules. These statements share a common syntax and each of them can include nested statementsâeither rulesets or nested at-rules. Furthermore, they all convey a common semantic meaningâthey all link some type of condition, which at any time evaluates to either true or false. If the condition evaluates to true, then all of the statements within the group will be applied. Conditional group rules are: @media, @supports, @document. (deferred to Level 4 of CSS Spec) Since each conditional group may also contain nested statements, there may be an unspecified amount of nesting.Index @charset @color-profile @container @counter-style @document Deprecated @font-face @font-feature-values @font-palette-values @import @keyframes @layer @media @namespace @page @property @supports SpecificationsSpecificationCSS Conditional Rules Module Level 3 Compatibility Standard # css-at-rulesSee also CSS key concepts:  CSS syntax Comments Specificity Inheritance Box model Layout modes Visual formatting models Margin collapsing Values   Initial values Computed values Used values Actual values Value definition syntax Shorthand properties Replaced elements Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 29, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
220,developer.mozilla.org/en-US/docs/Learn/Performance/Mobile,"developer.mozilla.org/en-US/docs/Learn/Performance/Mobile. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
221,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Events#animation/event/attributes,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/Events#animation/event/attributes. SVG Event Attributes - SVG: Scalable Vector Graphics | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesSVG: Scalable Vector GraphicsSVG Attribute referenceSVG Event AttributesArticle ActionsEnglish (US)In this articleAttributesBrowser compatibility SVG Tutorials Introducing SVG from scratch Introduction Getting started Positions Basic shapes Paths Fills and Strokes Gradients in SVG Patterns Texts Basic transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG image element Tools for SVG SVG and CSS Reference Elements <a><animate><animateMotion><animateTransform><circle><clipPath><cursor> Deprecated <defs><desc><ellipse><feBlend><feColorMatrix><feComponentTransfer><feComposite><feConvolveMatrix><feDiffuseLighting><feDisplacementMap><feDistantLight><feDropShadow><feFlood><feFuncA><feFuncB><feFuncG><feFuncR><feGaussianBlur><feImage><feMerge><feMergeNode><feMorphology><feOffset><fePointLight><feSpecularLighting><feSpotLight><feTile><feTurbulence><filter><font-face-format> Deprecated <font-face-name> Deprecated <font-face-src> Deprecated <font-face-uri> Deprecated <font-face> Deprecated <font> Deprecated <foreignObject><g><glyph> Deprecated <glyphRef> Deprecated <hkern> Deprecated <image><line><linearGradient><marker><mask><metadata><missing-glyph> Deprecated <mpath><path><pattern><polygon><polyline><radialGradient><rect><script><set><stop><style><svg><switch><symbol><text><textPath><title> â the SVG accessible name element<tref> Deprecated <tspan><use><view><vkern> Deprecated  Attributes accent-height Deprecated accumulateadditivealignment-baselinealphabetic Deprecated amplitudearabic-form Deprecated ascent Deprecated attributeNameattributeType Deprecated azimuthbaseFrequencybaseline-shiftbaseProfile Deprecated bbox Deprecated beginbiasbycalcModecap-height Deprecated classclip Deprecated clip-pathclip-ruleclipPathUnitscolorcolor-interpolationcolor-interpolation-filterscolor-profile Deprecated contentScriptType Deprecated contentStyleType Deprecated cursorcxcyddata-*descent Deprecated diffuseConstantdirectiondisplaydivisordominant-baselinedurdxdyedgeModeelevationenable-background Deprecated endexponentfillfill-opacityfill-rulefilterfilterRes Deprecated filterUnitsflood-colorflood-opacityfont-familyfont-sizefont-size-adjustfont-stretchfont-stylefont-variantfont-weightfrfromfxfyg1 Deprecated g2 Deprecated glyph-name Deprecated glyph-orientation-horizontal Deprecated glyph-orientation-vertical Deprecated gradientTransformgradientUnitshanging Deprecated heighthoriz-adv-x Deprecated horiz-origin-x Deprecated horiz-origin-y Deprecated hrefidideographic Deprecated image-renderinginin2interceptk Deprecated k1k2k3k4kernelMatrixkernelUnitLengthkerning Deprecated keyPointskeySplineskeyTimeslanglengthAdjustletter-spacinglighting-colorlimitingConeAnglemarker-endmarker-midmarker-startmarkerHeightmarkerUnitsmarkerWidthmaskmaskContentUnitsmaskUnitsmathematical Deprecated maxmediamethod Experimental minmodename Deprecated numOctavesonclickopacityoperatororderorientorientation Deprecated originoverflowoverline-positionoverline-thicknesspaint-orderpanose-1 Deprecated pathpathLengthpatternContentUnitspatternTransformpatternUnitspointer-eventspointspointsAtXpointsAtYpointsAtZpreserveAlphapreserveAspectRatioprimitiveUnitsrradiusrefXrefYrepeatCountrepeatDurrequiredFeatures Deprecated restartresultrotate Experimental rxryscaleseedshape-renderingside Experimental slope Deprecated spacingspecularConstantspecularExponentspreadMethodstartOffsetstdDeviationstemh Deprecated stemv Deprecated stitchTilesstop-colorstop-opacitystrikethrough-positionstrikethrough-thicknessstring Deprecated strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthstylesurfaceScaleSVG attribute: crossoriginSVG Conditional Processing AttributesSVG Core AttributesSVG Event AttributesSVG Presentation AttributesSVG Styling AttributessystemLanguagetabindextableValuestargettargetXtargetYtext-anchortext-decorationtext-renderingtextLengthtotransformtransform-origintypeu1 Deprecated u2 Deprecated underline-positionunderline-thicknessunicode Deprecated unicode-bidiunicode-range Deprecated units-per-em Deprecated v-alphabetic Deprecated v-hanging Deprecated v-ideographic Deprecated v-mathematical Deprecated valuesvector-effectversion Deprecated vert-adv-y Deprecated vert-origin-x Deprecated vert-origin-y Deprecated viewBoxviewTarget Deprecated visibilitywidthwidths Deprecated word-spacingwriting-modexx-height Deprecated x1x2xChannelSelectorxlink:arcrole Deprecated xlink:href Deprecated xlink:show Deprecated xlink:title Deprecated xlink:type Deprecated xml:base Deprecated xml:lang Deprecated xml:space Deprecated yy1y2yChannelSelectorzzoomAndPan Deprecated Guides Applying SVG effects to HTML content Content type Namespaces crash course SVG animation with SMIL SVG as an Image In this articleAttributesBrowser compatibilitySVG Event AttributesEvent attributes always have their name starting with ""on"" followed by the name of the event for which they are intended. They specifies some script to run when the event of the given type is dispatched to the element on which the attributes are specified. For every event type that the browser supports, SVG supports that as an event attribute, following the same requirements as for HTML event attributes. The global event attributes are available on all SVG elements. Other event attributes are available on a case by case basis for each elements. All event attribute are not animatable.AttributesAnimation Event Attributesonbegin, onend, onrepeatDocument Event Attributesonabort, onerror, onresize, onscroll, onunloadDocument Element Event Attributesoncopy, oncut, onpasteGlobal Event Attributesoncancel, oncanplay, oncanplaythrough, onchange, onclick, onclose, oncuechange, ondblclick, ondrag, ondragend, ondragenter, ondragleave, ondragover, ondragstart, ondrop, ondurationchange, onemptied, onended, onerror, onfocus, oninput, oninvalid, onkeydown, onkeypress, onkeyup, onload, onloadeddata, onloadedmetadata, onloadstart, onmousedown, onmouseenter, onmouseleave, onmousemove, onmouseout, onmouseover, onmouseup, onmousewheel, onpause, onplay, onplaying, onprogress, onratechange, onreset, onresize, onscroll, onseeked, onseeking, onselect, onshow, onstalled, onsubmit, onsuspend, ontimeupdate, ontoggle, onvolumechange, onwaitingGraphical Event Attributesonactivate, onfocusin, onfocusoutBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
222,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas. CanvasRenderingContext2D: canvas property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DcanvasArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvas directionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetYstrokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: canvas property The CanvasRenderingContext2D.canvas property, part of the Canvas API, is a read-only reference to the HTMLCanvasElement object that is associated with a given context. It might be null if there is no associated <canvas> element. ValueA HTMLCanvasElement object.ExamplesGiven this <canvas> element: <canvas id=""canvas""></canvas>  â¦ you can get a reference to the canvas element within the CanvasRenderingContext2D by using the canvas property: const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); ctx.canvas; // HTMLCanvasElement SpecificationsSpecificationHTML Standard # dom-context-2d-canvas-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also CanvasRenderingContext2D interface Canvas API Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
223,developer.mozilla.org/en-US/docs/Web/API/Attr/name,"developer.mozilla.org/en-US/docs/Web/API/Attr/name. Attr: name property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrnameArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelAttrInstance propertieslocalNamename namespaceURIownerElementprefixspecified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoAttr: name propertyThe read-only name property of the Attr interface returns the qualified name of an attribute, that is the name of the attribute, with the namespace prefix, if any, in front of it. For example, if the local name is lang and the namespace prefix is xml, the returned qualified name is xml:lang. The qualified name is always in lower case, whatever case at the attribute creation.ValueA string representing the attribute's qualified name.ExampleThe following example displays the qualified name of the first attribute of the two first elements, when we click on the appropriate button.HTML<svg xml:lang=""en-US"" class=""struct"" height=""1"" width=""1"">Click me</svg> <label xml:lang=""en-US"" class=""struct""></label> <p> <button>Show value for &lt;svg&gt;</button> <button>Show value for &lt;label&gt;</button> </p> <p> Qualified name of the attribute <code>xml:lang</code>: <output id=""result"">None.</output> </p> JavaScriptconst elements = document.querySelectorAll("".struct""); const buttons = document.querySelectorAll(""button""); const outputEl = document.querySelector(""#result""); let i = 0; for (const button of buttons) { const element = elements[i]; button.addEventListener(""click"", () => {  const attribute = element.attributes[0];  outputEl.value = attribute.name; }); i++; } SpecificationsSpecificationDOM Standard # dom-attr-nameBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The properties Attr.localName, returning the local part of the qualified name of the attribute, and Attr.prefix, the namespace prefix. The Element.tagName() property, returning the qualified name of an Element. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
224,developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted/request/header,"developer.mozilla.org/en-US/docs/Glossary/CORS-safelisted/request/header. CORS-safelisted request header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsCORS-safelisted request headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoCORS-safelisted request headerA CORS-safelisted request header is one of the following HTTP headers: Accept, Accept-Language, Content-Language, Content-Type. When containing only these headers (and values that meet the additional requirements laid out below), a request doesn't need to send a preflight request in the context of CORS. You can safelist more headers using the Access-Control-Allow-Headers header and also list the above headers there to circumvent the following additional restrictions: Additional restrictions CORS-safelisted headers must also fulfill the following requirements in order to be a CORS-safelisted request header: For Accept-Language and Content-Language: can only have values consisting of 0-9, A-Z, a-z, space or *,-.;=. For Accept and Content-Type: can't contain a CORS-unsafe request header byte: 0x00-0x1F (except for 0x09 (HT), which is allowed), ""():<>?@[\]{}, and 0x7F (DEL). For Content-Type: needs to have a MIME type of its parsed value (ignoring parameters) of either application/x-www-form-urlencoded, multipart/form-data, or text/plain. For any header: the value's length can't be greater than 128. See also CORS-safelisted response header Forbidden header name Request header Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
225,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var/hoisting,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var/hoisting. 
226,developer.mozilla.org/en-US/docs/Web/API/MouseEvent/webkitForce,"developer.mozilla.org/en-US/docs/Web/API/MouseEvent/webkitForce. MouseEvent: webkitForce property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsMouseEventwebkitForceArticle ActionsEnglish (US)In this articleSpecificationsSee alsoUI EventsMouseEventConstructorMouseEvent()Static propertiesWEBKIT_FORCE_AT_FORCE_MOUSE_DOWN Non-standard WEBKIT_FORCE_AT_MOUSE_DOWN Non-standard Instance propertiesaltKeybuttonbuttonsclientXclientYctrlKeylayerX Non-standard layerY Non-standard metaKeymovementXmovementYmozInputSource Non-standard offsetXoffsetYpageXpageYrelatedTargetscreenXscreenYshiftKeywebkitForce Non-standard xyInstance methodsgetModifierState()initMouseEvent() Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventKeyboardEventMouseScrollEventMutationEventUIEventWheelEventIn this articleSpecificationsSee alsoMouseEvent: webkitForce propertyNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. MouseEvent.webkitForce is a proprietary, WebKit-specific numeric property whose value represents the amount of pressure that is being applied on the touchpad or touchscreen.SpecificationsNot part of any specification. Apple has a description at the Mac Developer Library.See also MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN Force Touch events Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
227,developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/align,"developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/align. HTMLTableElement: align property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLTableElementalignArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityHTML DOM APIHTMLTableElementInstance propertiesalign Deprecated bgColor Deprecated border Deprecated captioncellPadding Deprecated cellSpacing Deprecated frame Deprecated rowsrules Deprecated summary Deprecated tBodiestFoottHeadwidth Deprecated Instance methodscreateCaption()createTBody()createTFoot()createTHead()deleteCaption()deleteRow()deleteTFoot()deleteTHead()insertRow()Inheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilityHTMLTableElement: align propertyDeprecated: This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the compatibility table at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time. The HTMLTableElement.align property represents the alignment of the table. ValueOne of the following string values: left center right Examples// Set the alignment of a table const t = document.getElementById(""TableA""); t.align = ""center""; Specifications W3C DOM 2 HTML Specification HTMLTableElement.align. Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
228,developer.mozilla.org/en-US/docs/Web/JavaScript/Data/structures#accessor/property,"developer.mozilla.org/en-US/docs/Web/JavaScript/Data/structures#accessor/property. JavaScript data types and data structures - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptJavaScript data types and data structuresArticle ActionsEnglish (US)In this articleDynamic and weak typingPrimitive valuesObjectsType coercionSee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleDynamic and weak typingPrimitive valuesObjectsType coercionSee alsoJavaScript data types and data structuresProgramming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures. The language overview offers a similar summary of the common data types, but with more comparisons to other languages.Dynamic and weak typingJavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types: let foo = 42; // foo is now a number foo = ""bar""; // foo is now a string foo = true; // foo is now a boolean JavaScript is also a weakly typed language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors. const foo = 42; // foo is a number const result = foo + ""1""; // JavaScript coerces foo to a string, so it can be concatenated with the other operand console.log(result); // 421 Implicit coercions is very convenient, but can be a potential footgun if developers didn't intend to do the conversion, or intend to convert in the other direction (for example, string to number instead of number to string). For symbols and BigInts, JavaScript has intentionally disallowed certain implicit type conversions.Primitive valuesAll types except Object define immutable values represented directly at the lowest level of the language. We refer to values of these types as primitive values. All primitive types, except null, can be tested by the typeof operator. typeof null returns ""object"", so one has to use === null to test for null. All primitive types, except null and undefined, have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the Number object provides methods like toExponential(). When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead. However, accessing a property on null or undefined throws a TypeError exception, which necessitates the introduction of the optional chaining operator. Type typeof return value Object wrapper  Null ""object"" N/A Undefined ""undefined"" N/A Boolean ""boolean"" Boolean Number ""number"" Number BigInt ""bigint"" BigInt String ""string"" String Symbol ""symbol"" Symbol The object wrapper classes' reference pages contain more information about the methods and properties available for each type, as well as detailed descriptions for the semantics of the primitive types themselves.Null typeThe Null type is inhabited by exactly one value: null.Undefined typeThe Undefined type is inhabited by exactly one value: undefined. Conceptually, undefined indicates the absence of a value, while null indicates the absence of an object (which could also make up an excuse for typeof null === ""object""). The language usually defaults to undefined when something is devoid of a value: A return statement with no value (return;) implicitly returns undefined. Accessing a nonexistent object property (obj.iDontExist) returns undefined. A variable declaration without initialization (let x;) implicitly initializes the variable to undefined. Many methods, such as Array.prototype.find() and Map.prototype.get(), return undefined when no element is found. null is used much less often in the core language. The most important place is the end of the prototype chain â subsequently, methods that interact with prototypes, such as Object.getPrototypeOf(), Object.create(), etc., accept or return null instead of undefined. null is a keyword, but undefined is a normal identifier that happens to be a global property. In practice, the difference is minor, since undefined should not be redefined or shadowed.Boolean typeThe Boolean type represents a logical entity and is inhabited by two values: true and false. Boolean values are usually used for conditional operations, including ternary operators, if...else, while, etc.Number typeThe Number type is a double-precision 64-bit binary format IEEE 754 value. It is capable of storing positive floating-point numbers between 2-1074 (Number.MIN_VALUE) and 21024 (Number.MAX_VALUE) as well as negative floating-point numbers between -2-1074 and -21024, but it can only safely store integers in the range -(253 â 1) (Number.MIN_SAFE_INTEGER) to 253 â 1 (Number.MAX_SAFE_INTEGER). Outside this range, JavaScript can no longer safely represent integers; they will instead be represented by a double-precision floating point approximation. You can check if a number is within the range of safe integers using Number.isSafeInteger(). Values outside the range Â±(2-1074 to 21024) are automatically converted: Positive values greater than Number.MAX_VALUE are converted to +Infinity. Positive values smaller than Number.MIN_VALUE are converted to +0. Negative values smaller than -Number.MAX_VALUE are converted to -Infinity. Negative values greater than -Number.MIN_VALUE are converted to -0. +Infinity and -Infinity behave similarly to mathematical infinity, but with some slight differences; see Number.POSITIVE_INFINITY and Number.NEGATIVE_INFINITY for details. The Number type has only one value with multiple representations: 0 is represented as both -0 and +0 (where 0 is an alias for +0). In practice, there is almost no difference between the different representations; for example, +0 === -0 is true. However, you are able to notice this when you divide by zero: console.log(42 / +0); // Infinity console.log(42 / -0); // -Infinity NaN (""Not a Number"") is a special kind of number value that's typically encountered when the result of an arithmetic operation cannot be expressed as a number. It is also the only value in JavaScript that is not equal to itself. Although a number is conceptually a ""mathematical value"" and is always implicitly floating-point-encoded, JavaScript provides bitwise operators. When applying bitwise operators, the number is first converted to a 32-bit integer. Note: Although bitwise operators can be used to represent several Boolean values within a single number using bit masking, this is usually considered a bad practice. JavaScript offers other means to represent a set of Booleans (like an array of Booleans, or an object with Boolean values assigned to named properties). Bit masking also tends to make the code more difficult to read, understand, and maintain. It may be necessary to use such techniques in very constrained environments, like when trying to cope with the limitations of local storage, or in extreme cases (such as when each bit over the network counts). This technique should only be considered when it is the last measure that can be taken to optimize size.BigInt typeThe BigInt type is a numeric primitive in JavaScript that can represent integers with arbitrary magnitude. With BigInts, you can safely store and operate on large integers even beyond the safe integer limit (Number.MAX_SAFE_INTEGER) for Numbers. A BigInt is created by appending n to the end of an integer or by calling the BigInt() function. This example demonstrates where incrementing the Number.MAX_SAFE_INTEGER returns the expected result: // BigInt const x = BigInt(Number.MAX_SAFE_INTEGER); // 9007199254740991n x + 1n === x + 2n; // false because 9007199254740992n and 9007199254740993n are unequal // Number Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2; // true because both are 9007199254740992 You can use most operators to work with BigInts, including +, *, -, **, and % â the only forbidden one is >>>. A BigInt is not strictly equal to a Number with the same mathematical value, but it is loosely so. BigInt values are neither always more precise nor always less precise than numbers, since BigInts cannot represent fractional numbers, but can represent big integers more accurately. Neither type entails the other, and they are not mutually substitutable. A TypeError is thrown if BigInt values are mixed with regular numbers in arithmetic expressions, or if they are implicitly converted to each other.String typeThe String type represents textual data and is encoded as a sequence of 16-bit unsigned integer values representing UTF-16 code units. Each element in the string occupies a position in the string. The first element is at index 0, the next at index 1, and so on. The length of a string is the number of UTF-16 code units in it, which may not correspond to the actual number of Unicode characters; see the String reference page for more details. JavaScript strings are immutable. This means that once a string is created, it is not possible to modify it. String methods create new strings based on the content of the current string â for example: A substring of the original using substring(). A concatenation of two strings using the concatenation operator (+) or concat(). Beware of ""stringly-typing"" your code! It can be tempting to use strings to represent complex data. Doing this comes with short-term benefits: It is easy to build complex strings with concatenation. Strings are easy to debug (what you see printed is always what is in the string). Strings are the common denominator of a lot of APIs (input fields, local storage values, XMLHttpRequest responses when using responseText, etc.) and it can be tempting to only work with strings. With conventions, it is possible to represent any data structure in a string. This does not make it a good idea. For instance, with a separator, one could emulate a list (while a JavaScript array would be more suitable). Unfortunately, when the separator is used in one of the ""list"" elements, then, the list is broken. An escape character can be chosen, etc. All of this requires conventions and creates an unnecessary maintenance burden. Use strings for textual data. When representing complex data, parse strings, and use the appropriate abstraction.Symbol typeA Symbol is a unique and immutable primitive value and may be used as the key of an Object property (see below). In some programming languages, Symbols are called ""atoms"". The purpose of symbols is to create unique property keys that are guaranteed not to clash with keys from other code.ObjectsIn computer science, an object is a value in memory which is possibly referenced by an identifier. In JavaScript, objects are the only mutable values. Functions are, in fact, also objects with the additional capability of being callable.PropertiesIn JavaScript, objects can be seen as a collection of properties. With the object literal syntax, a limited set of properties are initialized; then properties can be added and removed. Object properties are equivalent to key-value pairs. Property keys are either strings or symbols. Property values can be values of any type, including other objects, which enables building complex data structures. There are two types of object properties: The data property and the accessor property. Each property has corresponding attributes. Each attribute is accessed internally by the JavaScript engine, but you can set them through Object.defineProperty(), or read them through Object.getOwnPropertyDescriptor(). You can read more about the various nuances on the Object.defineProperty() page. Data property Data properties associate a key with a value. It can be described by the following attributes: value The value retrieved by a get access of the property. Can be any JavaScript value. writable A boolean value indicating if the property can be changed with an assignment. enumerable A boolean value indicating if the property can be enumerated by a for...in loop. See also Enumerability and ownership of properties for how enumerability interacts with other functions and syntaxes. configurable A boolean value indicating if the property can be deleted, can be changed to an accessor property, and can have its attributes changed. Accessor property Associates a key with one of two accessor functions (get and set) to retrieve or store a value. Note: It's important to recognize it's accessor property â not accessor method. We can give a JavaScript object class-like accessors by using a function as a value â but that doesn't make the object a class. An accessor property has the following attributes: get A function called with an empty argument list to retrieve the property value whenever a get access to the value is performed. See also getters. May be undefined. set A function called with an argument that contains the assigned value. Executed whenever a specified property is attempted to be changed. See also setters. May be undefined. enumerable A boolean value indicating if the property can be enumerated by a for...in loop. See also Enumerability and ownership of properties for how enumerability interacts with other functions and syntaxes. configurable A boolean value indicating if the property can be deleted, can be changed to a data property, and can have its attributes changed. The prototype of an object points to another object or to null â it's conceptually a hidden property of the object, commonly represented as [[Prototype]]. Properties of the object's [[Prototype]] can also be accessed on the object itself. Objects are ad-hoc key-value pairs, so they are often used as maps. However, there can be ergonomics, security, and performance issues. Use a Map for storing arbitrary data instead. The Map reference contains a more detailed discussion of the pros & cons between plain objects and maps for storing key-value associations.DatesWhen representing dates, the best choice is to use the built-in Date utility in JavaScript.Indexed collections: Arrays and typed ArraysArrays are regular objects for which there is a particular relationship between integer-keyed properties and the length property. Additionally, arrays inherit from Array.prototype, which provides a handful of convenient methods to manipulate arrays. For example, indexOf() searches a value in the array and push() appends an element to the array. This makes Arrays a perfect candidate to represent ordered lists. Typed Arrays present an array-like view of an underlying binary data buffer, and offer many methods that have similar semantics to the array counterparts. ""Typed array"" is an umbrella term for a range of data structures, including Int8Array, Float32Array, etc. Check the typed array page for more information. Typed arrays are often used in conjunction with ArrayBuffer and DataView.Keyed collections: Maps, Sets, WeakMaps, WeakSetsThese data structures take object references as keys. Set and WeakSet represent a collection of unique values, while Map and WeakMap represent a collection of key-value associations. You could implement Maps and Sets yourself. However, since objects cannot be compared (in the sense of < ""less than"", for instance), neither does the engine expose its hash function for objects, look-up performance would necessarily be linear. Native implementations of them (including WeakMaps) can have look-up performance that is approximately logarithmic to constant time. Usually, to bind data to a DOM node, one could set properties directly on the object, or use data-* attributes. This has the downside that the data is available to any script running in the same context. Maps and WeakMaps make it easy to privately bind data to an object. WeakMap and WeakSet only allow garbage-collectable values as keys, which are either objects or non-registered symbols, and the keys may be collected even when they remain in the collection. They are specifically used for memory usage optimization.Structured data: JSONJSON (JavaScript Object Notation) is a lightweight data-interchange format, derived from JavaScript, but used by many programming languages. JSON builds universal data structures that can be transferred between different environments and even across languages. See JSON for more details.More objects in the standard libraryJavaScript has a standard library of built-in objects. Read the reference to find out more about the built-in objects.Type coercionAs mentioned above, JavaScript is a weakly typed language. This means that you can often use a value of one type where another type is expected, and the language will convert it to the right type for you. To do so, JavaScript defines a handful of coercion rules.Primitive coercionThe primitive coercion process is used where a primitive value is expected, but there's no strong preference for what the actual type should be. This is usually when a string, a number, or a BigInt are equally acceptable. For example: The Date() constructor, when it receives one argument that's not a Date instance â strings represent date strings, while numbers represent timestamps. The + operator â if one operand is a string, string concatenation is performed; otherwise, numeric addition is performed. The == operator â if one operand is a primitive while the other is an object, the object is converted to a primitive value with no preferred type. This operation does not do any conversion if the value is already a primitive. Objects are converted to primitives by calling its [@@toPrimitive]() (with ""default"" as hint), valueOf(), and toString() methods, in that order. Note that primitive conversion calls valueOf() before toString(), which is similar to the behavior of number coercion but different from string coercion. The [@@toPrimitive]() method, if present, must return a primitive â returning an object results in a TypeError. For valueOf() and toString(), if one returns an object, the return value is ignored and the other's return value is used instead; if neither is present, or neither returns a primitive, a TypeError is thrown. For example, in the following code: console.log({} + []); // ""[object Object]"" Neither {} nor [] have a [@@toPrimitive]() method. Both {} and [] inherit valueOf() from Object.prototype.valueOf, which returns the object itself. Since the return value is an object, it is ignored. Therefore, toString() is called instead. {}.toString() returns ""[object Object]"", while [].toString() returns """", so the result is their concatenation: ""[object Object]"". The [@@toPrimitive]() method always takes precedence when doing conversion to any primitive type. Primitive conversion generally behaves like number conversion, because valueOf() is called in priority; however, objects with custom [@@toPrimitive]() methods can choose to return any primitive. Date and Symbol objects are the only built-in objects that override the [@@toPrimitive]() method. Date.prototype[@@toPrimitive]() treats the ""default"" hint as if it's ""string"", while Symbol.prototype[@@toPrimitive]() ignores the hint and always returns a symbol.Numeric coercionThere are two numeric types: Number and BigInt. Sometimes the language specifically expects a number or a BigInt (such as Array.prototype.slice(), where the index must be a number); other times, it may tolerate either and perform different operations depending on the operand's type. For strict coercion processes that do not allow implicit conversion from the other type, see number coercion and BigInt coercion. Numeric coercion is nearly the same as number coercion, except that BigInts are returned as-is instead of causing a TypeError. Numeric coercion is used by all arithmetic operators, since they are overloaded for both numbers and BigInts. The only exception is unary plus, which always does number coercion.Other coercionsAll data types, except Null, Undefined, and Symbol, have their respective coercion process. See string coercion, boolean coercion, and object coercion for more details. As you may have noticed, there are three distinct paths through which objects may be converted to primitives: Primitive coercion: [@@toPrimitive](""default"") â valueOf() â toString() Numeric coercion, number coercion, BigInt coercion: [@@toPrimitive](""number"") â valueOf() â toString() String coercion: [@@toPrimitive](""string"") â toString() â valueOf() In all cases, [@@toPrimitive](), if present, must be callable and return a primitive, while valueOf or toString will be ignored if they are not callable or return an object. At the end of the process, if successful, the result is guaranteed to be a primitive. The resulting primitive is then subject to further coercions depending on the context.See also JavaScript Data Structures and Algorithms by Oleksii Trekhleb Nicholas Zakas collection of common data structure and common algorithms in JavaScript. Search Tre(i)es implemented in JavaScript Data Types and Values in the ECMAScript specification Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 3, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
229,developer.mozilla.org/en-US/docs/Web/API/Attr/ownerElement,"developer.mozilla.org/en-US/docs/Web/API/Attr/ownerElement. Attr: ownerElement property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsAttrownerElementArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilityDocument Object ModelAttrInstance propertieslocalNamenamenamespaceURIownerElement prefixspecified Deprecated valueInheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilityAttr: ownerElement propertyThe read-only ownerElement property of the Attr interface returns the Element the attribute belongs to.ValueThe Element the attribute belongs to, or null if the attribute is not linked to an element.ExampleThe following example displays the qualified name of the element of the two first elements, when we click on the appropriate button.HTML<svg xml:lang=""en-US"" class=""struct"" height=""1"" width=""1"">Click me</svg> <label xml:lang=""en-US"" class=""struct""></label> <p> <button>Show value for &lt;svg&gt;</button> <button>Show value for &lt;label&gt;</button> </p> <p> Qualified name of the owner element of the attribute <code>xml:lang</code>: <output id=""result"">None.</output> </p> JavaScriptconst elements = document.querySelectorAll("".struct""); const buttons = document.querySelectorAll(""button""); const outputEl = document.querySelector(""#result""); let i = 0; for (const button of buttons) { const element = elements[i]; button.addEventListener(""click"", () => {  const attribute = element.attributes[0];  outputEl.value = attribute.ownerElement.tagName.toLowerCase(); }); i++; } SpecificationsSpecificationDOM Standard # dom-attr-ownerelementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
230,developer.mozilla.org/en-US/docs/Web/API/Navigator/connection,"developer.mozilla.org/en-US/docs/Web/API/Navigator/connection. Navigator: connection property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNavigatorconnectionArticle ActionsEnglish (US)In this articleValueSpecificationsBrowser compatibilitySee alsoNetwork Information APINavigatorInstance propertiesactiveVRDisplays Non-standard Deprecated appCodeName Deprecated appName Deprecated appVersion Deprecated buildID Non-standard clipboardconnection Experimental contacts Experimental cookieEnabledcredentialsdeviceMemory Experimental doNotTrack Deprecated geolocationglobalPrivacyControl Experimental Non-standard gpu Experimental hardwareConcurrencyhid Experimental ink Experimental keyboard Experimental languagelanguageslocksmaxTouchPointsmediaCapabilitiesmediaDevicesmediaSessionmimeTypes Deprecated onLineoscpu Deprecated pdfViewerEnabledpermissionsplatform Deprecated plugins Deprecated presentationproduct Deprecated productSub Deprecated serial Experimental serviceWorkerstorageuserActivationuserAgentuserAgentData Experimental vendor Deprecated vendorSub Deprecated virtualKeyboard Experimental wakeLockwebdriverwindowControlsOverlayxr Experimental Instance methodscanShare()clearAppBadge()getAutoplayPolicy() Experimental getBattery()getGamepads()getUserMedia() Deprecated getVRDisplays() Non-standard Deprecated javaEnabled() Deprecated registerProtocolHandler()requestMediaKeySystemAccess()requestMIDIAccess()sendBeacon()setAppBadge()share()taintEnabled() Deprecated unregisterProtocolHandler()vibrate()Related pages for Network Information APINavigator.connectionNetworkInformationIn this articleValueSpecificationsBrowser compatibilitySee alsoNavigator: connection propertyExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The Navigator.connection read-only property returns a NetworkInformation object containing information about the system's connection, such as the current bandwidth of the user's device or whether the connection is metered. This could be used to select high definition content or low definition content based on the user's connection.ValueA NetworkInformation object.SpecificationsSpecificationNetwork Information API # connection-attributeBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Online and offline events Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
231,developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY,"developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY. CanvasRenderingContext2D: shadowOffsetY property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsCanvasRenderingContext2DshadowOffsetYArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2DInstance propertiescanvasdirectionfillStylefilterfontfontKerningfontStretch Experimental fontVariantCaps Experimental globalAlphaglobalCompositeOperationimageSmoothingEnabledimageSmoothingQualityletterSpacing Experimental lineCaplineDashOffsetlineJoinlineWidthmiterLimitshadowBlurshadowColorshadowOffsetXshadowOffsetY strokeStyletextAligntextBaselinetextRendering Experimental wordSpacing Experimental Instance methodsarc()arcTo()beginPath()bezierCurveTo()clearRect()clip()closePath()createConicGradient()createImageData()createLinearGradient()createPattern()createRadialGradient()drawFocusIfNeeded()drawImage()ellipse()fill()fillRect()fillText()getContextAttributes()getImageData()getLineDash()getTransform()isContextLost() Experimental isPointInPath()isPointInStroke()lineTo()measureText()moveTo()putImageData()quadraticCurveTo()rect()reset()resetTransform()restore()rotate()roundRect()save()scale()scrollPathIntoView() Experimental setLineDash()setTransform()stroke()strokeRect()strokeText()transform()translate()In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoCanvasRenderingContext2D: shadowOffsetY property The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that shadows will be offset vertically. Note: Shadows are only drawn if the  shadowColor property is set to  a non-transparent value. One of the shadowBlur,  shadowOffsetX, or shadowOffsetY properties must be non-zero, as  well. ValueA float specifying the distance that shadows will be offset vertically. Positive values are down, and negative are up. The default value is 0 (no vertical offset). Infinity and NaN values are ignored.ExamplesMoving a shadow vertically This example adds a blurred shadow to a rectangle. The shadowColor property sets its color, shadowOffsetY sets its offset 25 units towards the bottom, and shadowBlur gives it a blur level of 10. HTML <canvas id=""canvas""></canvas> JavaScript const canvas = document.getElementById(""canvas""); const ctx = canvas.getContext(""2d""); // Shadow ctx.shadowColor = ""red""; ctx.shadowOffsetY = 25; ctx.shadowBlur = 10; // Rectangle ctx.fillStyle = ""blue""; ctx.fillRect(20, 20, 150, 80); ResultSpecificationsSpecificationHTML Standard # dom-context-2d-shadowoffsety-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The interface defining this property: CanvasRenderingContext2D CanvasRenderingContext2D.shadowOffsetX CanvasRenderingContext2D.shadowColor CanvasRenderingContext2D.shadowBlur Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
232,developer.mozilla.org/en-US/docs/Learn/Common/questions/Design/and/accessibility/What/is/accessibility,"developer.mozilla.org/en-US/docs/Learn/Common/questions/Design/and/accessibility/What/is/accessibility. What is accessibility? - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesCommon questionsDesign and accessibilityWhat is accessibility?Article ActionsEnglish (US)In this articleSummaryActive learningDig deeperMore detailsNext steps Design and accessibilityDesign and accessibilityWhat do common web layouts contain?How can we design for all types of users?What HTML features promote accessibility?How do I start to design my website?What is accessibility?Tools and setupTools and setupWhat text editors are available?How do you make sure your website works properly?How do you host your website on Google App Engine?How much does it cost to do something on the Web?How do you set up a local testing server?How do you upload your files to a web server?How do I use GitHub Pages?What are browser developer tools?What software do I need to build a website?Web mechanicsWeb mechanicsHow does the Internet work?What is the difference between webpage, website, web server, and search engine?What are hyperlinks?What is a Domain Name?What is a URL?What is a web server? In this articleSummaryActive learningDig deeperMore detailsNext stepsWhat is accessibility?This article introduces the basic concepts behind web accessibility. Prerequisites: None. Objective: Learn what accessibility is and why it matters. SummaryBecause of physical or technical limitations, maybe your visitors can't experience your website the way you hoped. In this article we give general accessibility principles and explain a few rules.Active learningThere is no active learning available yet. Please, consider contributing.Dig deeperAccessibility: general principlesWe might associate accessibility at first with negative limitations. This building has to be accessible, so it must follow these regulations for door width and toilet size and elevator placement. That's a narrow way to think of accessibility. Think of it as a wonderful way to empower people and serve more customers. What can the people in Brazil do with your English website? Can the people with smartphones browse a heavy, cluttered website designed for a large desktop monitor and unlimited bandwidth? They'll go somewhere else. In general, we must think about our product from the viewpoints of all our target customers, and adapt accordingly. Hence accessibility.Web accessibilityIn the specific context of the web, accessibility means that anyone can benefit from your content, regardless of disability, location, technical limitations, or other circumstances. Let's consider video: Hearing impairment How does a hearing-impaired person benefit from a video? You have to provide subtitles â or even better, a full text transcript. Also, make sure people can adjust the volume to accommodate their unique needs. Visual impairment Again, provide a text transcript that a user can consult without needing to play the video, and an audio-description (an off-screen voice that describes what is happening in the video). Pausing capacity Users may have trouble understanding someone in a video. Let them pause the video to read the subtitles or process the information. Keyboard capacity Let the user tab into/out of a video, play it, and pause it without being trapped in it. The basics of Web accessibility A few necessities for basic Web accessibility include: Whenever your site needs an image to convey meaning, include text as an alternative for visually-challenged users or those with slow connections. Make sure all users can operate graphical interfaces (like unfolding menus) solely with a keyboard (e.g., with Tab and the Return key). Provide an attribute explicitly specifying your content's language, so that screen readers read your text properly. Make sure that a user can navigate to all widgets on a page solely with the keyboard, without getting trapped. (At least let them Tab in and out.) And that's just the beginning.Accessibility championsSince 1999, the W3C has operated a working group called the Web Accessibility Initiative (WAI) promoting accessibility through guidelines, support material, and international resources.More detailsPlease refer to: Wikipedia article about accessibility WAI (W3C's Web Accessibility Initiative) Next stepsAccessibility can impact both a website's design and technical structure. From a design point of view, we suggest learning about designing for all types of users. If the technical side interests you more, you could learn how to embed images in webpages. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 23, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
233,developer.mozilla.org/en-US/docs/Web/API/DocumentType/systemId,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/systemId. DocumentType: systemId property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTypesystemIdArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityDocument Object ModelDocumentTypeInstance propertiesnamepublicIdsystemId Instance methodsafter()before()remove()replaceWith()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilityDocumentType: systemId propertyThe read-only systemId property of the DocumentType returns the URL of the associated DTD. For synthetic DocumentType, this property reflects the value given in parameter to DOMImplementation.createDocumentType(). For HTML documents, browsers always set it up to html, whatever the actual DOCTYPE in the source code is. For SVG documents, for example, it can be ""http://www.w3.org/2000/svg"".ValueA string.Examplesconst docType = document.implementation.createDocumentType( ""svg"", """", ""http://www.w3.org/2000/svg"" ); console.log(docType.systemId); // Displays ""http://www.w3.org/2000/svg"" SpecificationsSpecificationDOM Standard # dom-documenttype-systemidBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 25, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
234,developer.mozilla.org/en-US/docs/Web/HTML/Element/table#frame,"developer.mozilla.org/en-US/docs/Web/HTML/Element/table#frame. <table>: The Table element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<table>Article ActionsEnglish (US)In this articleTry itAttributesExamplesAccessibility concernsSpecificationsBrowser compatibilitySee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleTry itAttributesExamplesAccessibility concernsSpecificationsBrowser compatibilitySee also<table>: The Table elementThe <table> HTML element represents tabular data â that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.Try it Content categories Flow content Permitted content In this order:   an optional <caption> element, zero or more <colgroup> elements, an optional <thead> element, either one of the following:    zero or more <tbody> elements one or more <tr> elements an optional <tfoot> element  Tag omission None, both the starting and ending tag are mandatory. Permitted parents Any element that accepts flow content Implicit ARIA role table Permitted ARIA roles Any DOM interface HTMLTableElement AttributesThis element includes the global attributes.Deprecated attributes align Deprecated This enumerated attribute indicates how the table must be aligned inside the containing document. It may have the following values: left: the table is displayed on the left side of the document; center: the table is displayed in the center of the document; right: the table is displayed on the right side of the document. Set margin-left and margin-right to auto or margin to 0 auto to achieve an effect that is similar to the align attribute. bgcolor Deprecated The background color of the table. It is a 6-digit hexadecimal RGB code, prefixed by a '#'. One of the predefined color keywords can also be used. To achieve a similar effect, use the CSS background-color property. border Deprecated This integer attribute defines, in pixels, the size of the frame surrounding the table. If set to 0, the frame attribute is set to void. To achieve a similar effect, use the CSS border shorthand property. cellpadding Deprecated This attribute defines the space between the content of a cell and its border, displayed or not. If the cellpadding's length is defined in pixels, this pixel-sized space will be applied to all four sides of the cell's content. If the length is defined using a percentage value, the content will be centered and the total vertical space (top and bottom) will represent this value. The same is true for the total horizontal space (left and right). To achieve a similar effect, apply the border-collapse property to the <table> element, with its value set to collapse, and the padding property to the <td> elements. cellspacing Deprecated This attribute defines the size of the space between two cells in a percentage value or pixels. The attribute is applied both horizontally and vertically, to the space between the top of the table and the cells of the first row, the left of the table and the first column, the right of the table and the last column and the bottom of the table and the last row. To achieve a similar effect, apply the border-spacing property to the <table> element. border-spacing does not have any effect if border-collapse is set to collapse. frame Deprecated This enumerated attribute defines which side of the frame surrounding the table must be displayed. To achieve a similar effect, use the border-style and border-width properties. rules Deprecated This enumerated attribute defines where rules, i.e. lines, should appear in a table. It can have the following values: none, which indicates that no rules will be displayed; it is the default value; groups, which will cause the rules to be displayed between row groups (defined by the <thead>, <tbody> and <tfoot> elements) and between column groups (defined by the <col> and <colgroup> elements) only; rows, which will cause the rules to be displayed between rows; cols, which will cause the rules to be displayed between columns; all, which will cause the rules to be displayed between rows and columns. To achieve a similar effect, apply the border property to the appropriate <thead>, <tbody>, <tfoot>, <col>, or <colgroup> elements. summary Deprecated This attribute defines an alternative text that summarizes the content of the table. Use the <caption> element instead. width Deprecated This attribute defines the width of the table. Use the CSS width property instead. ExamplesSimple table<table> <tr>  <td>John</td>  <td>Doe</td> </tr> <tr>  <td>Jane</td>  <td>Doe</td> </tr> </table> ResultFurther simple examples<p>Simple table with header</p> <table> <tr>  <th>First name</th>  <th>Last name</th> </tr> <tr>  <td>John</td>  <td>Doe</td> </tr> <tr>  <td>Jane</td>  <td>Doe</td> </tr> </table> <p>Table with thead, tfoot, and tbody</p> <table> <thead>  <tr>  <th>Header content 1</th>  <th>Header content 2</th>  </tr> </thead> <tbody>  <tr>  <td>Body content 1</td>  <td>Body content 2</td>  </tr> </tbody> <tfoot>  <tr>  <td>Footer content 1</td>  <td>Footer content 2</td>  </tr> </tfoot> </table> <p>Table with colgroup</p> <table> <colgroup span=""4""></colgroup> <tr>  <th>Countries</th>  <th>Capitals</th>  <th>Population</th>  <th>Language</th> </tr> <tr>  <td>USA</td>  <td>Washington, D.C.</td>  <td>309 million</td>  <td>English</td> </tr> <tr>  <td>Sweden</td>  <td>Stockholm</td>  <td>9 million</td>  <td>Swedish</td> </tr> </table> <p>Table with colgroup and col</p> <table> <colgroup>  <col style=""background-color: #0f0"" />  <col span=""2"" /> </colgroup> <tr>  <th>Lime</th>  <th>Lemon</th>  <th>Orange</th> </tr> <tr>  <td>Green</td>  <td>Yellow</td>  <td>Orange</td> </tr> </table> <p>Simple table with caption</p> <table> <caption>  Awesome caption </caption> <tr>  <td>Awesome data</td> </tr> </table> table { border-collapse: collapse; border-spacing: 0px; } table, th, td { padding: 5px; border: 1px solid black; } ResultTable sortingSorting table rows There are no native methods for sorting the rows (<tr> elements) of an HTML table. But using Array.prototype.slice(), Array.prototype.sort(), Node.removeChild(), and Node.appendChild(), you can implement your own sort() function to sort an HTMLCollection of <tr> elements. In the below example, you can see such an example. We are attaching it to the <tbody> element so that it sorts the table cells in order of increasing value, and updates the display to suit. HTML <table> <tbody>  <tr>  <td>3</td>  </tr>  <tr>  <td>2</td>  </tr>  <tr>  <td>1</td>  </tr> </tbody> </table> JavaScript HTMLTableSectionElement.prototype.sort = function (cb) { Array.from(this.rows)  .sort(cb)  .forEach((e) => this.appendChild(this.removeChild(e))); }; document .querySelector(""table"") .tBodies[0].sort((a, b) => a.textContent.localeCompare(b.textContent)); Result Sorting rows with a click on the th element The following example adds an event handler to every <th> element of every <table> in the document; it sorts all the <tbody>'s rows, basing the sorting on the td cells contained in the rows. Note: This solution assumes that the <td> elements are populated by raw text with no descendant elements. HTML <table> <thead>  <tr>  <th>Numbers</th>  <th>Letters</th>  </tr> </thead> <tbody>  <tr>  <td>3</td>  <td>A</td>  </tr>  <tr>  <td>2</td>  <td>B</td>  </tr>  <tr>  <td>1</td>  <td>C</td>  </tr> </tbody> </table> JavaScript const allTables = document.querySelectorAll(""table""); for (const table of allTables) { const tBody = table.tBodies[0]; const rows = Array.from(tBody.rows); const headerCells = table.tHead.rows[0].cells; for (const th of headerCells) {  const cellIndex = th.cellIndex;  th.addEventListener(""click"", () => {  rows.sort((tr1, tr2) => {   const tr1Text = tr1.cells[cellIndex].textContent;   const tr2Text = tr2.cells[cellIndex].textContent;   return tr1Text.localeCompare(tr2Text);  });  tBody.append(...rows);  }); } } ResultDisplaying large tables in small spacesA common issue with tables on the web is that they don't natively work very well on small screens when the amount of content is large, and the way to make them scrollable isn't obvious, especially when the markup may come from a CMS and cannot be modified to have a wrapper. This example provides one way to display tables in small spaces. We've hidden the HTML content as it is very large, and there is nothing remarkable about it. The CSS is more useful to inspect in this example. <table> <thead>  <tr>  <th>1<sup>3</sup> equals:  <th>2<sup>3</sup> equals:  <th>3<sup>3</sup> equals:  <th>4<sup>3</sup> equals:  <th>5<sup>3</sup> equals:  <th>6<sup>3</sup> equals:  <th>7<sup>3</sup> equals: <tbody>  <tr>  <td>row 1: 1  <td>row 1: 8  <td>row 1: 27  <td>row 1: 64  <td>row 1: 125  <td>row 1: 216  <td>row 1: 343  <tr>  <td>row 2: 1  <td>row 2: 8  <td>row 2: 27  <td>row 2: 64  <td>row 2: 125  <td>row 2: 216  <td>row 2: 343  <tr>  <td>row 3: 1  <td>row 3: 8  <td>row 3: 27  <td>row 3: 64  <td>row 3: 125  <td>row 3: 216  <td>row 3: 343  <tr>  <td>row 4: 1  <td>row 4: 8  <td>row 4: 27  <td>row 4: 64  <td>row 4: 125  <td>row 4: 216  <td>row 4: 343  <tr>  <td>row 5: 1  <td>row 5: 8  <td>row 5: 27  <td>row 5: 64  <td>row 5: 125  <td>row 5: 216  <td>row 5: 343  <tr>  <td>row 6: 1  <td>row 6: 8  <td>row 6: 27  <td>row 6: 64  <td>row 6: 125  <td>row 6: 216  <td>row 6: 343  <tr>  <td>row 7: 1  <td>row 7: 8  <td>row 7: 27  <td>row 7: 64  <td>row 7: 125  <td>row 7: 216  <td>row 7: 343  <tr>  <td>row 8: 1  <td>row 8: 8  <td>row 8: 27  <td>row 8: 64  <td>row 8: 125  <td>row 8: 216  <td>row 8: 343  <tr>  <td>row 9: 1  <td>row 9: 8  <td>row 9: 27  <td>row 9: 64  <td>row 9: 125  <td>row 9: 216  <td>row 9: 343  <tr>  <td>row 10: 1  <td>row 10: 8  <td>row 10: 27  <td>row 10: 64  <td>row 10: 125  <td>row 10: 216  <td>row 10: 343  <tr>  <td>row 11: 1  <td>row 11: 8  <td>row 11: 27  <td>row 11: 64  <td>row 11: 125  <td>row 11: 216  <td>row 11: 343  <tr>  <td>row 12: 1  <td>row 12: 8  <td>row 12: 27  <td>row 12: 64  <td>row 12: 125  <td>row 12: 216  <td>row 12: 343  <tr>  <td>row 13: 1  <td>row 13: 8  <td>row 13: 27  <td>row 13: 64  <td>row 13: 125  <td>row 13: 216  <td>row 13: 343  <tr>  <td>row 14: 1  <td>row 14: 8  <td>row 14: 27  <td>row 14: 64  <td>row 14: 125  <td>row 14: 216  <td>row 14: 343  <tr>  <td>row 15: 1  <td>row 15: 8  <td>row 15: 27  <td>row 15: 64  <td>row 15: 125  <td>row 15: 216  <td>row 15: 343  <tr>  <td>row 16: 1  <td>row 16: 8  <td>row 16: 27  <td>row 16: 64  <td>row 16: 125  <td>row 16: 216  <td>row 16: 343  <tr>  <td>row 17: 1  <td>row 17: 8  <td>row 17: 27  <td>row 17: 64  <td>row 17: 125  <td>row 17: 216  <td>row 17: 343  <tr>  <td>row 18: 1  <td>row 18: 8  <td>row 18: 27  <td>row 18: 64  <td>row 18: 125  <td>row 18: 216  <td>row 18: 343  <tr>  <td>row 19: 1  <td>row 19: 8  <td>row 19: 27  <td>row 19: 64  <td>row 19: 125  <td>row 19: 216  <td>row 19: 343  <tr>  <td>row 20: 1  <td>row 20: 8  <td>row 20: 27  <td>row 20: 64  <td>row 20: 125  <td>row 20: 216  <td>row 20: 343 </table> When looking at these styles you'll notice that table's display property has been set to block. While this allows scrolling, the table loses some of its integrity, and table cells try to become as small as possible. To mitigate this issue we've set white-space to nowrap on the <tbody>. However, we don't do this for the <thead> to avoid long titles forcing columns to be wider than they need to be to display the data. To keep the table headers on the page while scrolling down we've set position to sticky on the <th> elements. Note that we have not set border-collapse to collapse, as if we do the header cannot be separated correctly from the rest of the table. table, th, td { border: 1px solid; } table { width: 100%; max-width: 400px; height: 240px; margin: 0 auto; display: block; overflow-x: auto; border-spacing: 0; } tbody { white-space: nowrap; } th, td { padding: 5px 10px; border-top-width: 0; border-left-width: 0; } th { position: sticky; top: 0; background: #fff; vertical-align: bottom; } th:last-child, td:last-child { border-right-width: 0; } tr:last-child td { border-bottom-width: 0; } ResultAccessibility concernsCaptionsBy supplying a <caption> element whose value clearly and concisely describes the table's purpose, it helps the people decide if they need to read the rest of the table content or skip over it. This helps people navigating with the aid of assistive technology such as a screen reader, people experiencing low vision conditions, and people with cognitive concerns. MDN Adding a caption to your table with <caption> Caption & Summary â¢ Tables â¢ W3C WAI Web Accessibility Tutorials Scoping rows and columnsThe scope attribute on header elements is redundant in simple contexts, because scope is inferred. However, some assistive technologies may fail to draw correct inferences, so specifying header scope may improve user experiences. In complex tables, scope can be specified to provide necessary information about the cells related to a header. Examples <table> <caption>  Color names and values </caption> <tbody>  <tr>  <th scope=""col"">Name</th>  <th scope=""col"">HEX</th>  <th scope=""col"">HSLa</th>  <th scope=""col"">RGBa</th>  </tr>  <tr>  <th scope=""row"">Teal</th>  <td><code>#51F6F6</code></td>  <td><code>hsl(180 90% 64% / 1)</code></td>  <td><code>rgb(81 246 246 / 1)</code></td>  </tr>  <tr>  <th scope=""row"">Goldenrod</th>  <td><code>#F6BC57</code></td>  <td><code>hsl(38 90% 65% / 1)</code></td>  <td><code>rgba(246 188 87 / 1)</code></td>  </tr> </tbody> </table> Result Providing a declaration of scope=""col"" on a <th> element will help describe that the cell is at the top of a column. Providing a declaration of scope=""row"" on a <th> element will help describe that the cell is the first in a row. MDN Tables for visually impaired users Tables with two headers â¢ Tables â¢ W3C WAI Web Accessibility Tutorials Tables with irregular headers â¢ Tables â¢ W3C WAI Web Accessibility Tutorials H63: Using the scope attribute to associate header cells and data cells in data tables | W3C Techniques for WCAG 2.0 Complicated tablesAssistive technology such as screen readers may have difficulty parsing tables that are so complex that header cells can't be associated in a strictly horizontal or vertical way. This is typically indicated by the presence of the colspan and rowspan attributes. Ideally, consider alternate ways to present the table's content, including breaking it apart into a collection of smaller, related tables that don't have to rely on using the colspan and rowspan attributes. In addition to helping people who use assistive technology understand the table's content, this may also benefit people with cognitive concerns who may have difficulty understanding the associations the table layout is describing. If the table cannot be broken apart, use a combination of the id and headers attributes to programmatically associate each table cell with the header(s) the cell is associated with. MDN Tables for visually impaired users Tables with multi-level headers â¢ Tables â¢ W3C WAI Web Accessibility Tutorials H43: Using id and headers attributes to associate data cells with header cells in data tables | Techniques for W3C WCAG 2.0 SpecificationsSpecificationHTML Standard # the-table-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTML data table tutorial CSS properties that may be especially useful to style the <table> element:  width to control the width of the table; border, border-style, border-color, border-width, border-collapse, border-spacing to control the aspect of cell borders, rules, and frame; margin and padding to style the individual cell content; text-align and vertical-align to define the alignment of text and cell content. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 4, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
235,developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload/event,"developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload/event. Window: beforeunload event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsWindowbeforeunloadArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent handler aliasesSecurityUsage notesExamplesSpecificationsBrowser compatibilityCompatibility notesSee alsoWindowInstance propertiesapplicationCache Non-standard Deprecated closedconsolecredentialless Experimental Non-standard customElementsdefaultStatus Deprecated devicePixelRatiodocumentevent Deprecated external Deprecated frameElementframesfullScreen Non-standard historyinnerHeightinnerWidthlaunchQueue Experimental lengthlocalStoragelocationlocationbarmenubarmozInnerScreenX Non-standard mozInnerScreenY Non-standard namenavigation Experimental navigatorondragdrop Deprecated openerorientation Deprecated outerHeightouterWidthpageXOffsetpageYOffsetparentpersonalbarschedulerscreenscreenLeftscreenTopscreenXscreenYscrollbarsscrollMaxX Non-standard scrollMaxY Non-standard scrollXscrollYselfsessionStoragesidebar Non-standard Deprecated speechSynthesisstatus Deprecated statusbartoolbartopvisualViewportwindowInstance methodsalert()back() Non-standard Deprecated blur()cancelAnimationFrame()cancelIdleCallback()captureEvents() Deprecated clearImmediate()close()confirm()convertPointFromNodeToPage() Non-standard dump() Non-standard find() Non-standard focus()forward() Non-standard Deprecated getComputedStyle()getDefaultComputedStyle() Non-standard getSelection()matchMedia()moveBy()moveTo()open()postMessage()print()prompt()queryLocalFonts() Experimental releaseEvents() Deprecated requestAnimationFrame()requestFileSystem() Non-standard Deprecated requestIdleCallback()resizeBy()resizeTo()scroll()scrollBy()scrollByLines() Non-standard scrollByPages() Non-standard scrollTo()setImmediate()showDirectoryPicker() Experimental showModalDialog() Non-standard Deprecated showOpenFilePicker() Experimental showSaveFilePicker() Experimental sizeToContent() Non-standard stop()updateCommands() Non-standard webkitConvertPointFromPageToNode() Non-standard Deprecated Eventsafterprintappinstalledbeforeinstallpromptbeforeprintbeforeunload blurcopycutdevicemotiondeviceorientationdeviceorientationabsoluteDOMContentLoadederrorfocusgamepadconnectedgamepaddisconnectedhashchangelanguagechangeloadmessagemessageerrorofflineonlineorientationchange Deprecated pagehidepageshowpastepopstaterejectionhandledresizestorageunhandledrejectionunloadvrdisplayactivate Non-standard Deprecated vrdisplayconnect Non-standard Deprecated vrdisplaydeactivate Non-standard Deprecated vrdisplaydisconnect Non-standard Deprecated vrdisplaypresentchange Non-standard Deprecated Inheritance:EventTargetIn this articleSyntaxEvent typeEvent handler aliasesSecurityUsage notesExamplesSpecificationsBrowser compatibilityCompatibility notesSee alsoWindow: beforeunload eventThe beforeunload event is fired when the window, the document and its resources are about to be unloaded. The document is still visible and the event is still cancelable at this point. This event enables a web page to trigger a confirmation dialog asking the user if they really want to leave the page. If the user confirms, the browser navigates to the new page, otherwise it cancels the navigation. According to the specification, to show the confirmation dialog an event handler should call preventDefault() on the event. The HTML specification states that calls to window.alert(), window.confirm(), and window.prompt() methods may be ignored during this event. See the HTML specification for more details.SyntaxUse the event name in methods like addEventListener(), or set an event handler property. addEventListener(""beforeunload"", (event) => {}); onbeforeunload = (event) => {}; Event typeA BeforeUnloadEvent. Inherits from Event.Event handler aliasesIn addition to the Window interface, the event handler property onbeforeunload is also available on the following targets: HTMLBodyElement HTMLFrameSetElement SVGSVGElement Security Sticky activation is required. The user has to have interacted with the page in order for this feature to work. Usage notesThe beforeunload event suffers from the same problems as the unload event. Especially on mobile, the beforeunload event is not reliably fired. For example, the beforeunload event is not fired at all in the following scenario: A mobile user visits your page. The user then switches to a different app. Later, the user closes the browser from the app manager. Additionally, on Firefox, the beforeunload event is not compatible with the back/forward cache (bfcache): that is, Firefox will not place pages in the bfcache if they have beforeunload listeners, and this is bad for performance. However, unlike the unload event, there is a legitimate use case for the beforeunload event: the scenario where the user has entered unsaved data that will be lost if the page is unloaded. It is recommended that developers listen for beforeunload only in this scenario, and only when they actually have unsaved changes, so as to minimize the effect on performance. See the Examples section below for an example of this. See the bfcache guide on web.dev for more information about the problems associated with the beforeunload event.ExamplesIn this example a page listens for changes to a text input. If the element contains a value, it adds a listener for beforeunload. If the element is empty, it removes the listener: const beforeUnloadListener = (event) => { event.preventDefault(); return (event.returnValue = """"); }; const nameInput = document.querySelector(""#name""); nameInput.addEventListener(""input"", (event) => { if (event.target.value !== """") {  addEventListener(""beforeunload"", beforeUnloadListener, { capture: true }); } else {  removeEventListener(""beforeunload"", beforeUnloadListener, {  capture: true,  }); } }); SpecificationsSpecificationHTML Standard # event-beforeunloadHTML Standard # handler-window-onbeforeunloadBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Compatibility notes The HTML specification states that authors should use the Event.preventDefault() method instead of using Event.returnValue to prompt the user. However, this is not yet supported by all browsers.  When this event returns (or sets the returnValue property to) a value other than null or undefined, the user will be prompted to confirm the page unload. In older browsers, the return value of the event is displayed in this dialog. Since Firefox 44, Chrome 51, Opera 38, and Safari 9.1, a generic string not under the control of the webpage is shown instead of the returned string. For example:  Firefox displays the string, ""This page is asking you to confirm that you want to  leave - data you have entered may not be saved."" (see Firefox bug 588292). Chrome displays the string, ""Do you want to leave the site? Changes you made may not be saved."" (see Chrome Platform Status).  In some browsers, calls to window.alert(), window.confirm(), and window.prompt() may be ignored during this event. See the HTML specification for more details.  Note also, that various browsers ignore the result of the event and do not ask the user for confirmation at all. In such cases, the document will always be unloaded automatically. Firefox has a switch named dom.disable_beforeunload in about:config to enable this behavior. As of Chrome 60, the confirmation will be skipped if the user has not performed a gesture in the frame or page since it was loaded. Pressing F5 in the page seems to count as user interaction, whereas mouse-clicking the refresh arrow or pressing F5 with Chrome DevTools focused does not count as user interaction (as of Chrome 81). See also Related events: DOMContentLoaded, readystatechange, load, unload Unloading Documents â Prompt to unload a document Remove Custom Messages in onbeforeload Dialogs after Chrome 51 Don't lose user and app state, use Page Visibility explains in detail why you should use visibilitychange, not beforeunload/unload. Page Lifecycle API gives best-practices guidance on handling page lifecycle behavior in your web applications. PageLifecycle.js: a JavaScript library that deals with cross-browser inconsistencies in page lifecycle behavior. Back/forward cache explains what the back/forward cache is, and its implications for various page lifecycle events. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
236,developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo,"developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo. Element: scrollTo() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsElementscrollTo()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoElementInstance propertiesariaAtomicariaAutoCompleteariaBusyariaCheckedariaColCountariaColIndexariaColSpanariaCurrentariaDescriptionariaDisabledariaExpandedariaHasPopupariaHiddenariaKeyShortcutsariaLabelariaLevelariaLiveariaModalariaMultiLineariaMultiSelectableariaOrientationariaPlaceholderariaPosInSetariaPressedariaReadOnlyariaRelevant Non-standard ariaRequiredariaRoleDescriptionariaRowCountariaRowIndexariaRowSpanariaSelectedariaSetSizeariaSortariaValueMaxariaValueMinariaValueNowariaValueTextassignedSlotattributeschildElementCountchildrenclassListclassNameclientHeightclientLeftclientTopclientWidthelementTiming Experimental firstElementChildidinnerHTMLlastElementChildlocalNamenamespaceURInextElementSiblingouterHTMLpartprefixpreviousElementSiblingscrollHeightscrollLeftscrollLeftMax Non-standard scrollTopscrollTopMax Non-standard scrollWidthshadowRootslottagNameInstance methodsafter()animate()append()attachShadow()before()closest()computedStyleMap()getAnimations()getAttribute()getAttributeNames()getAttributeNode()getAttributeNodeNS()getAttributeNS()getBoundingClientRect()getClientRects()getElementsByClassName()getElementsByTagName()getElementsByTagNameNS()hasAttribute()hasAttributeNS()hasAttributes()hasPointerCapture()insertAdjacentElement()insertAdjacentHTML()insertAdjacentText()matches()prepend()querySelector()querySelectorAll()releasePointerCapture()remove()removeAttribute()removeAttributeNode()removeAttributeNS()replaceChildren()replaceWith()requestFullscreen()requestPointerLock()scroll()scrollBy()scrollIntoView()scrollIntoViewIfNeeded() Non-standard scrollTo() setAttribute()setAttributeNode()setAttributeNodeNS()setAttributeNS()setCapture() Non-standard Deprecated setHTML() Experimental setPointerCapture()toggleAttribute()Eventsafterscriptexecute Non-standard animationcancelanimationendanimationiterationanimationstartauxclickbeforematch Experimental beforescriptexecute Non-standard beforexrselect Experimental blurclickcompositionendcompositionstartcompositionupdatecontentvisibilityautostatechange Experimental contextmenucopycutdblclickDOMActivate Deprecated DOMMouseScroll Non-standard Deprecated focusfocusinfocusoutfullscreenchangefullscreenerrorgesturechange Non-standard gestureend Non-standard gesturestart Non-standard gotpointercapturekeydownkeypress Deprecated keyuplostpointercapturemousedownmouseentermouseleavemousemovemouseoutmouseovermouseupmousewheel Non-standard Deprecated MozMousePixelScroll Non-standard Deprecated pastepointercancelpointerdownpointerenterpointerleavepointermovepointeroutpointeroverpointerupscrollscrollendsecuritypolicyviolationtouchcanceltouchendtouchmovetouchstarttransitioncanceltransitionendtransitionruntransitionstartwebkitmouseforcechanged Non-standard webkitmouseforcedown Non-standard webkitmouseforceup Non-standard webkitmouseforcewillbegin Non-standard wheelInheritance:NodeEventTargetIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoElement: scrollTo() method The scrollTo() method of the Element interface scrolls to a particular set of coordinates inside a given element. SyntaxscrollTo(x-coord, y-coord) scrollTo(options) Parameters x-coord is the pixel along the horizontal axis of the  element that you want displayed in the upper left.  y-coord is the pixel along the vertical axis of the element  that you want displayed in the upper left.  - or - options A dictionary containing the following parameters: top Specifies the number of pixels along the Y axis to scroll the window or element. left Specifies the number of pixels along the X axis to scroll the window or element. behavior Determines whether scrolling is instant or animates smoothly. This option is a string which must take one of the following values: smooth: scrolling should animate smoothly instant: scrolling should happen instantly in a single jump auto: scroll behavior is determined by the computed value of scroll-behavior  Return valueNone (undefined).Exampleselement.scrollTo(0, 1000); Using options: element.scrollTo({ top: 100, left: 100, behavior: ""smooth"", }); SpecificationsSpecificationCSSOM View Module # dom-element-scrolltoBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.scrollTop, Element.scrollLeft Window.scrollTo() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
237,developer.mozilla.org/en-US/docs/Web/SVG/Element/svg,"developer.mozilla.org/en-US/docs/Web/SVG/Element/svg. <svg> - SVG: Scalable Vector Graphics | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesSVG: Scalable Vector GraphicsSVG element reference<svg>Article ActionsEnglish (US)In this articleExampleAttributesUsage notesSpecificationsBrowser compatibility SVG Tutorials Introducing SVG from scratch Introduction Getting started Positions Basic shapes Paths Fills and Strokes Gradients in SVG Patterns Texts Basic transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG image element Tools for SVG SVG and CSS Reference Elements <a><animate><animateMotion><animateTransform><circle><clipPath><cursor> Deprecated <defs><desc><ellipse><feBlend><feColorMatrix><feComponentTransfer><feComposite><feConvolveMatrix><feDiffuseLighting><feDisplacementMap><feDistantLight><feDropShadow><feFlood><feFuncA><feFuncB><feFuncG><feFuncR><feGaussianBlur><feImage><feMerge><feMergeNode><feMorphology><feOffset><fePointLight><feSpecularLighting><feSpotLight><feTile><feTurbulence><filter><font-face-format> Deprecated <font-face-name> Deprecated <font-face-src> Deprecated <font-face-uri> Deprecated <font-face> Deprecated <font> Deprecated <foreignObject><g><glyph> Deprecated <glyphRef> Deprecated <hkern> Deprecated <image><line><linearGradient><marker><mask><metadata><missing-glyph> Deprecated <mpath><path><pattern><polygon><polyline><radialGradient><rect><script><set><stop><style><svg><switch><symbol><text><textPath><title> â the SVG accessible name element<tref> Deprecated <tspan><use><view><vkern> Deprecated  Attributes accent-height Deprecated accumulateadditivealignment-baselinealphabetic Deprecated amplitudearabic-form Deprecated ascent Deprecated attributeNameattributeType Deprecated azimuthbaseFrequencybaseline-shiftbaseProfile Deprecated bbox Deprecated beginbiasbycalcModecap-height Deprecated classclip Deprecated clip-pathclip-ruleclipPathUnitscolorcolor-interpolationcolor-interpolation-filterscolor-profile Deprecated contentScriptType Deprecated contentStyleType Deprecated cursorcxcyddata-*descent Deprecated diffuseConstantdirectiondisplaydivisordominant-baselinedurdxdyedgeModeelevationenable-background Deprecated endexponentfillfill-opacityfill-rulefilterfilterRes Deprecated filterUnitsflood-colorflood-opacityfont-familyfont-sizefont-size-adjustfont-stretchfont-stylefont-variantfont-weightfrfromfxfyg1 Deprecated g2 Deprecated glyph-name Deprecated glyph-orientation-horizontal Deprecated glyph-orientation-vertical Deprecated gradientTransformgradientUnitshanging Deprecated heighthoriz-adv-x Deprecated horiz-origin-x Deprecated horiz-origin-y Deprecated hrefidideographic Deprecated image-renderinginin2interceptk Deprecated k1k2k3k4kernelMatrixkernelUnitLengthkerning Deprecated keyPointskeySplineskeyTimeslanglengthAdjustletter-spacinglighting-colorlimitingConeAnglemarker-endmarker-midmarker-startmarkerHeightmarkerUnitsmarkerWidthmaskmaskContentUnitsmaskUnitsmathematical Deprecated maxmediamethod Experimental minmodename Deprecated numOctavesonclickopacityoperatororderorientorientation Deprecated originoverflowoverline-positionoverline-thicknesspaint-orderpanose-1 Deprecated pathpathLengthpatternContentUnitspatternTransformpatternUnitspointer-eventspointspointsAtXpointsAtYpointsAtZpreserveAlphapreserveAspectRatioprimitiveUnitsrradiusrefXrefYrepeatCountrepeatDurrequiredFeatures Deprecated restartresultrotate Experimental rxryscaleseedshape-renderingside Experimental slope Deprecated spacingspecularConstantspecularExponentspreadMethodstartOffsetstdDeviationstemh Deprecated stemv Deprecated stitchTilesstop-colorstop-opacitystrikethrough-positionstrikethrough-thicknessstring Deprecated strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthstylesurfaceScaleSVG attribute: crossoriginSVG Conditional Processing AttributesSVG Core AttributesSVG Event AttributesSVG Presentation AttributesSVG Styling AttributessystemLanguagetabindextableValuestargettargetXtargetYtext-anchortext-decorationtext-renderingtextLengthtotransformtransform-origintypeu1 Deprecated u2 Deprecated underline-positionunderline-thicknessunicode Deprecated unicode-bidiunicode-range Deprecated units-per-em Deprecated v-alphabetic Deprecated v-hanging Deprecated v-ideographic Deprecated v-mathematical Deprecated valuesvector-effectversion Deprecated vert-adv-y Deprecated vert-origin-x Deprecated vert-origin-y Deprecated viewBoxviewTarget Deprecated visibilitywidthwidths Deprecated word-spacingwriting-modexx-height Deprecated x1x2xChannelSelectorxlink:arcrole Deprecated xlink:href Deprecated xlink:show Deprecated xlink:title Deprecated xlink:type Deprecated xml:base Deprecated xml:lang Deprecated xml:space Deprecated yy1y2yChannelSelectorzzoomAndPan Deprecated Guides Applying SVG effects to HTML content Content type Namespaces crash course SVG animation with SMIL SVG as an Image In this articleExampleAttributesUsage notesSpecificationsBrowser compatibility<svg>The svg element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document. Note: The xmlns attribute is only required on the outermost svg element of SVG documents, or inside HTML documents with XML serialization. It is unnecessary for inner svg elements or inside HTML documents with HTML serialization. Examplehtml, body, svg { height: 100%; } <svg viewBox=""0 0 300 100"" xmlns=""http://www.w3.org/2000/svg"" stroke=""red"" fill=""grey""> <circle cx=""50"" cy=""50"" r=""40"" /> <circle cx=""150"" cy=""50"" r=""4"" /> <svg viewBox=""0 0 10 10"" x=""200"" width=""100"">  <circle cx=""5"" cy=""5"" r=""4"" /> </svg> </svg> Attributes baseProfile Deprecated   The minimum SVG language profile that the document requires.  Value type: <string> ; Default value: none; Animatable: no contentScriptType Deprecated   The default scripting language used by the SVG fragment.  Value type: <string> ; Default value: application/ecmascript; Animatable: no contentStyleType Deprecated   The default style sheet language used by the SVG fragment.  Value type: <string> ; Default value: text/css; Animatable: no height   The displayed height of the rectangular viewport. (Not the height of its coordinate system.)  Value type: <length>|<percentage> ; Default value: auto; Animatable: yes preserveAspectRatio   How the svg fragment must be deformed if it is displayed with a different aspect ratio.  Value type: (none| xMinYMin| xMidYMin| xMaxYMin| xMinYMid| xMidYMid| xMaxYMid| xMinYMax| xMidYMax| xMaxYMax) (meet|slice)? ; Default value: xMidYMid meet; Animatable: yes version Deprecated   Which version of SVG is used for the inner content of the element.  Value type: <number> ; Default value: none; Animatable: no viewBox   The SVG viewport coordinates for the current SVG fragment.  Value type: <list-of-numbers> ; Default value: none; Animatable: yes width   The displayed width of the rectangular viewport. (Not the width of its coordinate system.)  Value type: <length>|<percentage> ; Default value: auto; Animatable: yes x   The displayed x coordinate of the svg container. No effect on outermost svg elements.  Value type: <length>|<percentage> ; Default value: 0; Animatable: yes y   The displayed y coordinate of the svg container. No effect on outermost svg elements.  Value type: <length>|<percentage> ; Default value: 0; Animatable: yes  Note: Starting with SVG2, x, y, width, and height are Geometry Properties, meaning these attributes can also be used as CSS properties. Global attributes Core Attributes Most notably: id, tabindex Styling Attributes class, style Conditional Processing Attributes Most notably: requiredExtensions, systemLanguage Event Attributes Global event attributes, Graphical event attributes, Document event attributes, Document element event attributes Presentation Attributes Most notably: clip-path, clip-rule, color, color-interpolation, color-rendering, cursor, display, fill, fill-opacity, fill-rule, filter, mask, opacity, pointer-events, shape-rendering, stroke, stroke-dasharray, stroke-dashoffset, stroke-linecap, stroke-linejoin, stroke-miterlimit, stroke-opacity, stroke-width, transform, vector-effect, visibility Aria Attributes aria-activedescendant, aria-atomic, aria-autocomplete, aria-busy, aria-checked, aria-colcount, aria-colindex, aria-colspan, aria-controls, aria-current, aria-describedby, aria-details, aria-disabled, aria-dropeffect, aria-errormessage, aria-expanded, aria-flowto, aria-grabbed, aria-haspopup, aria-hidden, aria-invalid, aria-keyshortcuts, aria-label, aria-labelledby, aria-level, aria-live, aria-modal, aria-multiline, aria-multiselectable, aria-orientation, aria-owns, aria-placeholder, aria-posinset, aria-pressed, aria-readonly, aria-relevant, aria-required, aria-roledescription, aria-rowcount, aria-rowindex, aria-rowspan, aria-selected, aria-setsize, aria-sort, aria-valuemax, aria-valuemin, aria-valuenow, aria-valuetext, role Usage notesCategoriesContainer element, Structural elementPermitted contentAny number of the following elements, in any order:Animation elementsDescriptive elementsShape elementsStructural elementsGradient elements<a>, <clipPath>, <color-profile>, <cursor>, <filter>, <font>, <font-face>, <foreignObject>, <image>, <marker>, <mask>, <pattern>, <script>, <style>, <switch>, <text>, <view>SpecificationsSpecificationScalable Vector Graphics (SVG) 2 # NewDocumentBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 17, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
238,developer.mozilla.org/en-US/docs/Glossary/Forbidden/response/header/name,"developer.mozilla.org/en-US/docs/Glossary/Forbidden/response/header/name. Forbidden response header name - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsForbidden response header nameArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoForbidden response header nameA forbidden response header name is an HTTP header name (Set-Cookie) that cannot be modified programmatically.See also Fetch specification: forbidden response-header name Forbidden header name (Glossary) Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
239,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/decelerate,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/decelerate. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
240,developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix,"developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix. Node: lookupPrefix() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodelookupPrefix()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSiblingtextContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix() normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoNode: lookupPrefix() method The lookupPrefix() method of the Node interface returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned. SyntaxlookupPrefix(namespace) Parameters namespace A string containing the namespace to look the prefix up. Note: This parameter is not optional but can be set to null. Return value A string containing the corresponding prefix, or null if none has been found. If namespace is null, or the empty string, lookupPrefix() returns null.  If the node is a DocumentType or a DocumentFragment, lookupPrefix() always returns null. ExamplePrefix for <code>http://www.w3.org/2000/svg</code> on &lt;output&gt;: <output>Not tested</output>.<br /> Prefix for <code>http://www.w3.org/XML/1998/namespace</code> on &lt;output&gt;: <output>Not tested</output>.<br /> Prefix for <code>http://www.w3.org/TR/html4/</code> on &lt;output&gt;: <output>Not tested</output>.<br /> Prefix for <code>https://www.w3.org/1999/xlink</code> on &lt;output&gt;: <output>Not tested</output>.<br /> Prefix for <code>http://www.w3.org/2000/svg</code> on &lt;svg&gt;: <output>Not tested</output>.<br /> Prefix for <code>https://www.w3.org/1999/xlink</code> on &lt;svg&gt;: <output>Not tested</output>.<br /> Prefix for <code>http://www.w3.org/XML/1998/namespace</code> on &lt;svg&gt;: <output>Not tested</output>.<br /> <svg xmlns:t=""http://www.w3.org/2000/svg"" height=""1""></svg> <button>Click to see the results</button> const button = document.querySelector(""button""); button.addEventListener(""click"", () => { const aHtmlElt = document.querySelector(""output""); const aSvgElt = document.querySelector(""svg""); const result = document.getElementsByTagName(""output""); result[0].value = aHtmlElt.lookupPrefix(""http://www.w3.org/2000/svg""); // true result[1].value = aHtmlElt.lookupPrefix(  ""http://www.w3.org/XML/1998/namespace"" ); // false result[2].value = aHtmlElt.lookupPrefix(""http://www.w3.org/TR/html4/""); // true result[3].value = aHtmlElt.lookupPrefix(""https://www.w3.org/1999/xlink""); // false result[4].value = aSvgElt.lookupPrefix(""http://www.w3.org/2000/svg""); // true result[5].value = aSvgElt.lookupPrefix(""https://www.w3.org/1999/xlink""); // true result[6].value = aSvgElt.lookupPrefix(  ""http://www.w3.org/XML/1998/namespace"" ); // false }); SpecificationsSpecificationDOM Standard # dom-node-lookupprefixBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also http://www.w3.org/TR/DOM-Level-3-Cor...amespacePrefix Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
241,developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/target,"developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/target. ProcessingInstruction: target property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsProcessingInstructiontargetArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelProcessingInstructionInstance propertiessheettarget Inheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoProcessingInstruction: target property The read-only target property of the ProcessingInstruction interface represent the application to which the ProcessingInstruction is targeted. For example: <?xml version=""1.0""?> is a processing instruction whose target is xml.ValueA string containing the name of the application.ExampleIn an XML document<output></output> let parser = new DOMParser(); const doc = parser.parseFromString( '<?xml version=""1.0""?><test/>', ""application/xml"" ); const pi = doc.createProcessingInstruction( ""xml-stylesheet"", 'href=""mycss.css"" type=""text/css""' ); doc.insertBefore(pi, doc.firstChild); const output = document.querySelector(""output""); output.textContent = `This processing instruction's target is: ${doc.firstChild.target}`; In an HTML documentThe processing instruction line will be considered, and represented, as a Comment object. <?xml version=""1.0""?> <pre></pre> const node = document.querySelector(""pre"").previousSibling.previousSibling; const result = `Node with the processing instruction: ${node.nodeName}: ${node.nodeValue} `; document.querySelector(""pre"").textContent = result; SpecificationsSpecificationDOM Standard # dom-processinginstruction-targetBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOM API Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
242,developer.mozilla.org/en-US/docs/Glossary/Class,"developer.mozilla.org/en-US/docs/Glossary/Class. Class - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsClassArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoClassIn object-oriented programming, a class defines an object's characteristics. Class is a template definition of an object's properties and methods, the ""blueprint"" from which other more specific instances of the object are drawn.See also Classes in JavaScript Inheritance and the prototype chain Class-based programming on Wikipedia Object-oriented programming on Wikipedia Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
243,developer.mozilla.org/en-US/docs/Web/HTML/Element/style,"developer.mozilla.org/en-US/docs/Web/HTML/Element/style. <style>: The Style Information element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<style>Article ActionsEnglish (US)In this articleTry itAttributesExamplesTechnical summarySpecificationsBrowser compatibilitySee also HTML Tutorials HTML basics Introduction to HTML Introduction to HTML overview Getting started with HTML What's in the head? Metadata in HTML HTML text fundamentals Creating hyperlinks Advanced text formatting Document and website structure Debugging HTML Assessment: Marking up a letter Assessment: Structuring a page of content  Multimedia and embedding Multimedia and embedding overview Images in HTML Video and audio content From object to iframe â other embedding technologies Adding vector graphics to the web Responsive images Assessment: Mozilla splash page  HTML tables HTML tables overview HTML table basics HTML table advanced features and accessibility Assessment: Structuring planet data References HTML elements <a><abbr><acronym> Deprecated <address><area><article><aside><audio><b><base><bdi><bdo><big> Deprecated <blockquote><body><br><button><canvas><caption><center> Deprecated <cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir> Deprecated <div><dl><dt><em><embed><fieldset><figcaption><figure><font> Deprecated <footer><form><frame> Deprecated <frameset> Deprecated <h1><head><header><hgroup><hr><html><i><iframe><image> Non-standard Deprecated <img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee> Deprecated <menu><menuitem> Non-standard Deprecated <meta><meter><nav><nobr> Deprecated <noembed> Deprecated <noframes> Deprecated <noscript><object><ol><optgroup><option><output><p><param> Deprecated <picture><plaintext> Deprecated <portal> Experimental <pre><progress><q><rb> Deprecated <rp><rt><rtc> Deprecated <ruby><s><samp><script><section><select><slot><small><source><span><strike> Deprecated <strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt> Deprecated <u><ul><var><video><wbr><xmp> Deprecated  Global attributes accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu Non-standard Deprecated data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover Experimental slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy Experimental  Attributes accept autocomplete capture crossorigin disabled elementtiming for max maxlength min minlength multiple pattern readonly rel required size step  <input> types <input type=""button""><input type=""checkbox""><input type=""color""><input type=""date""><input type=""datetime-local""><input type=""email""><input type=""file""><input type=""hidden""><input type=""image""><input type=""month""><input type=""number""><input type=""password""><input type=""radio""><input type=""range""><input type=""reset""><input type=""search""><input type=""submit""><input type=""tel""><input type=""text""><input type=""time""><input type=""url""><input type=""week""> Guides Content categories Block-level elements Inline elements Quirks Mode and Standards Mode Date and time formats used in HTML Constraint validation Microdata Microformats Viewport meta tag Allowing cross-origin use of images and canvas In this articleTry itAttributesExamplesTechnical summarySpecificationsBrowser compatibilitySee also<style>: The Style Information elementThe <style> HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the <style> element.Try it The <style> element must be included inside the <head> of the document. In general, it is better to put your styles in external stylesheets and apply them using <link> elements. If you include multiple <style> and <link> elements in your document, they will be applied to the DOM in the order they are included in the document â make sure you include them in the correct order, to avoid unexpected cascade issues. In the same manner as <link> elements, <style> elements can include media attributes that contain media queries, allowing you to selectively apply internal stylesheets to your document depending on media features such as viewport width.AttributesThis element includes the global attributes. media This attribute defines which media the style should be applied to. Its value is a media query, which defaults to all if the attribute is missing. nonce A cryptographic nonce (number used once) used to allow inline styles in a style-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial. title This attribute specifies alternative style sheet sets. blocking Experimental This attribute explicitly indicates that certain operations should be blocked on the fetching of critical subresources. @import-ed stylesheets are generally considered as critical subresources, whereas background-image and fonts are not. render: The rendering of content on the screen is blocked. Deprecated attributes type Deprecated This attribute should not be provided: if it is, the only permitted values are the empty string or a case-insensitive match for text/css. ExamplesA simple stylesheetIn the following example, we apply a very simple stylesheet to a document: <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>Test page</title>  <style>  p {   color: red;  }  </style> </head> <body>  <p>This is my paragraph.</p> </body> </html> ResultMultiple style elementsIn this example we've included two <style> elements â notice how the conflicting declarations in the later <style> element override those in the earlier one, if they have equal specificity. <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>Test page</title>  <style>  p {   color: white;   background-color: blue;   padding: 5px;   border: 1px solid black;  }  </style>  <style>  p {   color: blue;   background-color: yellow;  }  </style> </head> <body>  <p>This is my paragraph.</p> </body> </html> ResultIncluding a media queryIn this example we build on the previous one, including a media attribute on the second <style> element so it is only applied when the viewport is less than 500px in width. <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>Test page</title>  <style>  p {   color: white;   background-color: blue;   padding: 5px;   border: 1px solid black;  }  </style>  <style media=""all and (max-width: 500px)"">  p {   color: blue;   background-color: yellow;  }  </style> </head> <body>  <p>This is my paragraph.</p> </body> </html> ResultTechnical summary Content categories Metadata content, and if the scoped attribute is present:   flow content.   Permitted content   Text content matching the type attribute, that is   text/css.   Tag omission Neither tag is omissible. Permitted parents   Any element that accepts   metadata content.   Implicit ARIA role No corresponding role Permitted ARIA roles No role permitted DOM interface HTMLStyleElement SpecificationsSpecificationHTML Standard # the-style-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The <link> element, which allows us to apply external stylesheets to a document. Alternative Style Sheets Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
244,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/method,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/method. method - SVG: Scalable Vector Graphics | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesSVG: Scalable Vector GraphicsSVG Attribute referencemethodIn this articletextPathSpecifications SVG Tutorials Introducing SVG from scratch Introduction Getting started Positions Basic shapes Paths Fills and Strokes Gradients in SVG Patterns Texts Basic transformations Clipping and masking Other content in SVG Filter effects SVG fonts SVG image element Tools for SVG SVG and CSS Reference Elements <a><animate><animateMotion><animateTransform><circle><clipPath><cursor> Deprecated <defs><desc><ellipse><feBlend><feColorMatrix><feComponentTransfer><feComposite><feConvolveMatrix><feDiffuseLighting><feDisplacementMap><feDistantLight><feDropShadow><feFlood><feFuncA><feFuncB><feFuncG><feFuncR><feGaussianBlur><feImage><feMerge><feMergeNode><feMorphology><feOffset><fePointLight><feSpecularLighting><feSpotLight><feTile><feTurbulence><filter><font-face-format> Deprecated <font-face-name> Deprecated <font-face-src> Deprecated <font-face-uri> Deprecated <font-face> Deprecated <font> Deprecated <foreignObject><g><glyph> Deprecated <glyphRef> Deprecated <hkern> Deprecated <image><line><linearGradient><marker><mask><metadata><missing-glyph> Deprecated <mpath><path><pattern><polygon><polyline><radialGradient><rect><script><set><stop><style><svg><switch><symbol><text><textPath><title> â the SVG accessible name element<tref> Deprecated <tspan><use><view><vkern> Deprecated  Attributes accent-height Deprecated accumulateadditivealignment-baselinealphabetic Deprecated amplitudearabic-form Deprecated ascent Deprecated attributeNameattributeType Deprecated azimuthbaseFrequencybaseline-shiftbaseProfile Deprecated bbox Deprecated beginbiasbycalcModecap-height Deprecated classclip Deprecated clip-pathclip-ruleclipPathUnitscolorcolor-interpolationcolor-interpolation-filterscolor-profile Deprecated contentScriptType Deprecated contentStyleType Deprecated cursorcxcyddata-*descent Deprecated diffuseConstantdirectiondisplaydivisordominant-baselinedurdxdyedgeModeelevationenable-background Deprecated endexponentfillfill-opacityfill-rulefilterfilterRes Deprecated filterUnitsflood-colorflood-opacityfont-familyfont-sizefont-size-adjustfont-stretchfont-stylefont-variantfont-weightfrfromfxfyg1 Deprecated g2 Deprecated glyph-name Deprecated glyph-orientation-horizontal Deprecated glyph-orientation-vertical Deprecated gradientTransformgradientUnitshanging Deprecated heighthoriz-adv-x Deprecated horiz-origin-x Deprecated horiz-origin-y Deprecated hrefidideographic Deprecated image-renderinginin2interceptk Deprecated k1k2k3k4kernelMatrixkernelUnitLengthkerning Deprecated keyPointskeySplineskeyTimeslanglengthAdjustletter-spacinglighting-colorlimitingConeAnglemarker-endmarker-midmarker-startmarkerHeightmarkerUnitsmarkerWidthmaskmaskContentUnitsmaskUnitsmathematical Deprecated maxmediamethod Experimental minmodename Deprecated numOctavesonclickopacityoperatororderorientorientation Deprecated originoverflowoverline-positionoverline-thicknesspaint-orderpanose-1 Deprecated pathpathLengthpatternContentUnitspatternTransformpatternUnitspointer-eventspointspointsAtXpointsAtYpointsAtZpreserveAlphapreserveAspectRatioprimitiveUnitsrradiusrefXrefYrepeatCountrepeatDurrequiredFeatures Deprecated restartresultrotate Experimental rxryscaleseedshape-renderingside Experimental slope Deprecated spacingspecularConstantspecularExponentspreadMethodstartOffsetstdDeviationstemh Deprecated stemv Deprecated stitchTilesstop-colorstop-opacitystrikethrough-positionstrikethrough-thicknessstring Deprecated strokestroke-dasharraystroke-dashoffsetstroke-linecapstroke-linejoinstroke-miterlimitstroke-opacitystroke-widthstylesurfaceScaleSVG attribute: crossoriginSVG Conditional Processing AttributesSVG Core AttributesSVG Event AttributesSVG Presentation AttributesSVG Styling AttributessystemLanguagetabindextableValuestargettargetXtargetYtext-anchortext-decorationtext-renderingtextLengthtotransformtransform-origintypeu1 Deprecated u2 Deprecated underline-positionunderline-thicknessunicode Deprecated unicode-bidiunicode-range Deprecated units-per-em Deprecated v-alphabetic Deprecated v-hanging Deprecated v-ideographic Deprecated v-mathematical Deprecated valuesvector-effectversion Deprecated vert-adv-y Deprecated vert-origin-x Deprecated vert-origin-y Deprecated viewBoxviewTarget Deprecated visibilitywidthwidths Deprecated word-spacingwriting-modexx-height Deprecated x1x2xChannelSelectorxlink:arcrole Deprecated xlink:href Deprecated xlink:show Deprecated xlink:title Deprecated xlink:type Deprecated xml:base Deprecated xml:lang Deprecated xml:space Deprecated yy1y2yChannelSelectorzzoomAndPan Deprecated Guides Applying SVG effects to HTML content Content type Namespaces crash course SVG animation with SMIL SVG as an Image In this articletextPathSpecificationsmethodExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The method attribute indicates the method by which text should be rendered along the path of a <textPath> element. You can use this attribute with the following SVG elements: <textPath> textPathFor <textPath>, method indicates the method by which text should be rendered along the path. Value align | stretch Default value align Animatable Yes  align This value indicates that the characters should be rendered so that they are not stretched or warped. The characters are rotated, scaled and stretched when they are rendered. As a result, for fonts with connected characters (e.g. cursive fonts), the connections may not align properly when text is rendered along the path. stretch This value indicates that the character outlines will be converted into paths, and then stretched and possibly warped. With this approach, connected characters, such as in cursive fonts, will maintain their connections. SpecificationsSpecificationScalable Vector Graphics (SVG) 2 # TextPathElementMethodAttributeFound a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
245,developer.mozilla.org/en-US/docs/Web/SVG/Attribute/speed,"developer.mozilla.org/en-US/docs/Web/SVG/Attribute/speed. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
246,developer.mozilla.org/en-US/docs/Web/Media/Formats/Image/types#webp/image,"developer.mozilla.org/en-US/docs/Web/Media/Formats/Image/types#webp/image. Image file type and format guide - Web media technologies | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb media technologiesMedia type and format guide: image, audio, and video contentImage file type and format guideArticle ActionsEnglish (US)In this articleCommon image file typesImage file type detailsChoosing an image formatProviding image fallbacksSee also Autoplay guide for media and Web Audio APIsDASH Adaptive Streaming for HTML 5 VideoGuide to streaming audio and videoMedia type and format guide: image, audio, and video contentMedia type and format guide: image, audio, and video contentWeb audio codec guideDigital audio conceptsCodecs in common media typesMedia container formats (file types)Image file type and format guideHandling media support issues in web contentWeb video codec guideDigital video conceptsCodecs used by WebRTCUsing audio and video in HTMLUsing images in HTML In this articleCommon image file typesImage file type detailsChoosing an image formatProviding image fallbacksSee alsoImage file type and format guideIn this guide, we'll cover the image file types generally supported by web browsers, and provide insights that will help you select the most appropriate formats to use for your site's imagery.Common image file typesThe image file formats that are most commonly used on the web are listed below. Abbreviation File format MIME type File extension(s) Summary  APNG Animated Portable Network Graphics image/apng .apng   Good choice for lossless animation sequences (GIF is less performant).   AVIF and WebP have better performance but less broad browser support.Supported: Chrome, Edge, Firefox, Opera, Safari.   AVIF AV1 Image File Format image/avif .avif    Good choice for both images and animated images due to high performance and royalty free image format.   It offers much better compression than PNG or JPEG with support for higher color depths, animated frames, transparency, etc.   Note that when using AVIF, you should include fallbacks to formats with better browser support (i.e. using the   <picture> element).Supported: Chrome, Firefox (still images only: animated images not implemented), Opera, Safari.    GIF Graphics Interchange Format image/gif .gif   Good choice for simple images and animations. Prefer PNG for   lossless and indexed still images, and consider WebP, AVIF or APNG for animation sequences.Supported: Chrome, Edge, Firefox, IE, Opera, Safari.   JPEG Joint Photographic Expert Group image image/jpeg .jpg, .jpeg, .jfif,   .pjpeg, .pjp    Good choice for lossy compression of still images (currently the most   popular). Prefer PNG when more precise reproduction of the image is   required, or WebP/AVIF if both better reproduction and higher compression are required.Support: Chrome, Edge, Firefox, IE, Opera, Safari.    PNG Portable Network Graphics image/png .png    PNG is preferred over JPEG for more precise reproduction of source   images, or when transparency is needed. WebP/AVIF provide even better compression and reproduction, but browser support is more limited.Support: Chrome, Edge, Firefox, IE, Opera, Safari.    SVG Scalable Vector Graphics image/svg+xml .svg Vector image format; ideal for user interface elements, icons, diagrams, etc., that must be drawn accurately at different sizes.Support: Chrome, Edge, Firefox, IE, Opera, Safari. WebP Web Picture format image/webp .webp   Excellent choice for both images and animated images.   WebP offers much better compression than PNG or JPEG with support for higher color depths, animated frames, transparency etc.   AVIF offers slightly better compression, but is not quite as well-supported in browsers and does not support progressive rendering.Support: Chrome, Edge, Firefox, Opera, Safari   Note: The older formats like PNG, JPEG, GIF have poor performance compared to newer formats like WebP and AVIF, but enjoy broader ""historical"" browser support. The newer image formats are seeing increasing popularity as browsers without support become increasingly irrelevant (i.e. have virtually zero market share). The following list includes image formats that appear on the web, but which should be avoided for web content (generally this is because either they do not have wide browser support, or because there are better alternatives). Abbreviation File format MIME type File extension(s) Supported browsers  BMP Bitmap file image/bmp .bmp Chrome, Edge, Firefox, IE, Opera, Safari ICO Microsoft Icon image/x-icon .ico, .cur Chrome, Edge, Firefox, IE, Opera, Safari TIFF Tagged Image File Format image/tiff .tif, .tiff Safari  Note: The abbreviation for each image format links to a longer description of the format, its capabilities, and detailed browser compatibility information (including which versions introduced support and specific special features that may have been introduced later). Note: Safari 11.1 added the ability to use a video format, as an animated gif replacement.  No other browser supports this.  See the Chromium bug, and Firefox bug for more information. Image file type detailsThe following sections provide a brief overview of each of the image file types supported by web browsers. In the tables below, the term bits per component refers to the number of bits used to represent each color component. For example, an RGB color depth of 8 indicates that each of the red, green, and blue components are represented by an 8-bit value. Bit depth, on the other hand, is the total number of bits used to represent each pixel in memory. APNG (Animated Portable Network Graphics) APNG is a file format first introduced by Mozilla which extends the PNG standard to add support for animated images. Conceptually similar to the animated GIF format which has been in use for decades, APNG is more capable in that it supports a variety of color depths, whereas animated GIF supports only 8-bit indexed color.  APNG is ideal for basic animations that do not need to synchronize to other activities or to a sound track, such as progress indicators, activity throbbers, and other animated sequences. For example, APNG is one of the formats supported when creating animated stickers for Apple's iMessage application (and the Messages application on iOS). They're also commonly used for the animated portions of web browsers' user interfaces.  MIME type image/apng File extension(s) .apng Specification wiki.mozilla.org/APNG_Specification Browser compatibility Chrome 59, Edge 12, Firefox 3, Opera 46, Safari 8 Maximum dimensions 2,147,483,647Ã2,147,483,647 pixels Supported color modes  Color mode Bits per component (D) Description  Greyscale 1, 2, 4, 8, and 16 Each pixel consists of a single D-bit value indicating the brightness of the greyscale pixel. True color 8 and 16 Each pixel is represented by three D-bit values indicating the level of the red, green, and blue color components. Indexed color 1, 2, 4, and 8     Each pixel is a D-bit value indicating an index into a     color palette which is contained within a PLTE chunk in the APNG file;     the colors in the palette all use an 8-bit depth.     Greyscale with alpha 8 and 16 Each pixel is represented by two D-bit values: the intensity of the greyscale pixel and an alpha sample, indicating how opaque the pixel is. True color with alpha 8 and 16 Each pixel is comprised of four D-pixel color components: red, green, blue, and the alpha sample indicating how opaque the pixel is.  Compression Lossless Licensing   Free and open under the   Creative Commons Attribution-ShareAlike license   (CC-BY-SA) version 3.0 or later.   AVIF imageAV1 Image File Format (AVIF) is a powerful, open source, royalty-free file format that encodes AV1 bitstreams in the High Efficiency Image File Format (HEIF) container. Note: AVIF has potential to become the ""next big thing"" for sharing images in web content.  It offers state-of-the-art features and performance, without the encumbrance of complicated licensing and patent royalties that have hampered comparable alternatives.  AV1 is a coding format that was originally designed for video transmission over the Internet. The format benefits from the significant advances in video encoding in recent years, and may potentially benefit from the associated support for hardware rendering. However it also has disadvantages for some cases, as video and image encoding have some different requirements. The format offers: Excellent lossy compression compared to JPG and PNG for visually similar compression levels (e.g. lossy AVIF images are around 50% smaller than JPEG images). Generally, AVIF has better compression than WebP â median 50% vs. 30% compression for the same JPG set (source: AVIF WebP Comparison (CTRL Blog)). Lossless compression. Animation/multi-image storage (similar to animated GIFs, but with much better compression) Alpha channel support (i.e. for transparency). High Dynamic Range (HDR): support for storing images that can represent bigger contrasts between the lightest and darkest parts of the image. Wide Color Gamut: Support for images that can contain a larger range of colors.  AVIF does not support progressive rendering, so files must be fully downloaded before they can be displayed. This often has little impact on real-world user experience because AVIF files are much smaller than the equivalent JPEG or PNG files, and hence can be downloaded and displayed much faster. For larger file size the impact can become significant, and you should consider using a format that supports progressive rendering.  AVIF is supported in Chrome, Opera, Safari and Firefox (Firefox supports still images but not animations), but not on Edge or IE. As support is not yet comprehensive (and has little historical depth) you should provide a fallback in WebP, JPEG or PNG format using the <picture> element (or some other approach).  MIME type image/avif File extension(s) .avif Specification AV1 Image File Format (AVIF) Browser compatibility Chrome 85, Opera 71, Firefox 93, and Safari 16.1.      Firefox 93 supports still images, with colorspace support for both full and limited range colors, image transforms for mirroring and rotation.    The preference image.avif.compliance_strictness    can be used to adjust the compliance strictness with the specification.    Animated images are not supported.       Firefox 77 to 92 require the preference    image.avif.enable set true. Earlier versions provide only basic support.    Maximum dimensions 2,147,483,647Ã2,147,483,647 pixels Supported color modes    Color mode support information is provided in the   AV1 Bitstream & Decoding Process Specification, section 6.4.2 : Color config semantics.   A non-exhaustive summary is: Color modes: YUV444, YUV422, YUV420 Greyscale support: YUV400 Bits: 8/10/12-bit Alpha support ICC profile support NCLX support: sRGB, linear sRGB, linear Rec2020, PQ Rec2020, HLG Rec2020, PQ P3, HLG P3, etc. Tiling support  Compression Lossy and lossless. Licensing Royalty free. Licensing information is available at http://aomedia.org/license/ . BMP (Bitmap file)The BMP (Bitmap image) file type is most prevalent on Windows computers, and is generally used only for special cases in web apps and content. Warning: You should typically avoid using BMP files for website content.  The most common form of BMP file represents the data as an uncompressed raster image, resulting in large file sizes compared to png or jpg image types.  More efficient BMP formats exist but are not widely used, and rarely supported in web browsers.  BMP theoretically supports a variety of internal data representations. The simplest, and most commonly used, form of BMP file is an uncompressed raster image, with each pixel occupying 3 bytes representing its red, green, and blue components, and each row padded with 0x00 bytes to a multiple of 4 bytes wide.  While other data representations are defined in the specification, they are not widely used and often completely unimplemented. These features include: support for different bit depths, indexed color, alpha channels, and different pixel orders (by default, BMP is written from bottom-left corner toward the right and top, rather than from the top-left corner toward the right and bottom). Theoretically, several compression algorithms are supported, and the image data can also be stored in JPEG or PNG format within the BMP file. MIME type image/bmp File extension(s) .bmp Specification   No specification; however, Microsoft provides general documentation of the format at   docs.microsoft.com/en-us/windows/desktop/gdi/bitmap-storage Browser compatibility All versions of Chrome, Edge, Firefox, Internet Explorer, Opera, and Safari Maximum dimensions Either 32,767Ã32,767 or 2,147,483,647Ã2,147,483,647 pixels, depending on the format version Supported color modes  Color mode Bits per component (D) Description  Greyscale 1 Each bit represents a single pixel, which can be either black or white. True color 8 and 16 Each pixel is represented by three values representing the red, green, and blue color components; each is D bits. Indexed color 2, 4, and 8 Each pixel is represented by a value which is one 2, 4, or 8 bits, serving as an index into the color table. Greyscale with alpha n/a BMP has no distinct grayscale format. True color with alpha 8 and 16     Each pixel is represented by four values representing the red,     green, blue, and alpha color components; each is D bits.      Compression Several compression methods are supported, including lossy or lossless algorithms Licensing   Covered by the Microsoft Open Specification Promise;   while Microsoft holds patents against BMP, they have published a promise not to assert its patent rights as long as specific conditions are met.   This is not the same as a license, however. BMP is included under the Windows Metafile Format (.wmf).   GIF (Graphics Interchange Format) In 1987, the CompuServe online service provider introduced the GIF (Graphics Interchange Format) image file format to provide a compressed graphics format that all members of their service would be able to use. GIF uses the Lempel-Ziv-Welch (LZW) algorithm to losslessly compress 8-bit indexed color graphics. GIF was one of the first two graphics formats supported by HTML, along with XBM.  Each pixel in a GIF is represented by a single 8-bit value serving as an index into a palette of 24-bit colors (8 bits each of red, green, and blue). The length of a color table is always a power of 2 (that is, each palette has 2, 4, 8, 16, 32, 64, or 256 entries). To simulate more than 255 or 256 colors, dithering is generally used. It is technically possible to tile multiple image blocks, each with its own color palette, to create truecolor images, but in practice this is rarely done. Pixels are opaque, unless a specific color index is designated as transparent, in which case pixels colored that value are entirely transparent. GIF supports simple animation, in which following an initial full-size frame, a series of images reflecting the parts of the image that change with each frame are provided. GIF has been extremely popular for decades, due to its simplicity and compatibility. Its animation support caused a resurgence in its popularity in the social media era, when animated GIFs began to be widely used for short ""videos"", memes, and other simple animation sequences.  Another popular feature of GIF is support for interlacing, where rows of pixels are stored out of order so that partially-received files can be displayed in lower quality. This is particularly useful when network connections are slow.  GIF is a good choice for simple images and animations, although converting full color images to GIF can result in unsatisfactory dithering. Typically, modern content should use PNG for lossless and indexed still images, and should consider using APNG for lossless animation sequences.  MIME type image/gif File extension(s) .gif Specification GIF87a specificationGIF89a specification Browser compatibility All versions of Chrome, Edge, Firefox, Internet Explorer, Opera, and Safari Maximum dimensions 65,536Ã65,536 pixels Supported color modes  Color mode Bits per component (D) Description  Greyscale n/a GIF does not include a dedicated greyscale format. True color n/a GIF does not support true color pixels. Indexed color 8 Each color in a GIF palette is defined as 8 bits each of red, green, and blue (24 total bits per pixel). Greyscale with alpha n/a GIF does not provide a dedicated greyscale format. True color with alpha n/a GIF does not support true color pixels.  Compression Lossless (LZW) Licensing   While the GIF format itself is open, the LZW compression algorithm was covered by patents until the early 2000s.   As of July 7, 2004, all relevant patents have expired and the GIF format may be used freely   ICO (Microsoft Windows icon) The ICO (Microsoft Windows icon) file format was designed by Microsoft for desktop icons of Windows systems. However, early versions of Internet Explorer introduced the ability for a website to provide an ICO file named favicon.ico in a website's root directory to specify a favicon â an icon to be displayed in the Favorites menu, and other places where an iconic representation of the site would be useful.  An ICO file can contain multiple icons, and begins with a directory listing details about each. Following the directory comes the data for the icons. Each icon's data can be either a BMP image without the file header, or a complete PNG image (including the file header). If you use ICO files, you should use the BMP format, as support for PNG inside ICO files wasn't added until Windows Vista and may not be well supported. Warning: ICO files should not be used in web content.  Additionally, their use for favicons has subsided in favor of using a PNG file and the <link> element, as described in Providing icons for different usage contexts.  MIME type image/vnd.microsoft.icon (official),   image/x-icon (used by Microsoft)   File extension(s) .ico Specification Browser compatibility All versions of Chrome, Edge, Firefox, Internet Explorer, Opera, and Safari Maximum dimensions 256Ã256 pixels Supported color modes Icons in BMP format Color mode Bits per component (D) Description Greyscale 1 Each bit represents a single pixel, which can be either black or white. True color 8 and 16 Each pixel is represented by three values representing the red, green, and blue color components; each is D bits. Indexed color 2, 4, and 8 Each pixel is represented by a value which is one 2, 4, or 8 bits, serving as an index into the color table. Greyscale with alpha n/a BMP has no distinct grayscale format. True color with alpha 8 and 16 Each pixel is represented by four values representing the red, green, blue, and alpha color components; each is D bits.  Icons in PNG format Color mode Bits per component (D) Description Greyscale 1, 2, 4, 8, and 16 Each pixel consists of a single D-bit value indicating the brightness of the greyscale pixel. True color 8 and 16 Each pixel is represented by three D-bit values indicating the level of the red, green, and blue color components. Indexed color 1, 2, 4, and 8     Each pixel is a D-bit value indicating an index into a color palette which is contained within a     PLTE     chunk in the APNG file; the colors in the palette all use an 8-bit depth.     Greyscale with alpha 8 and 16     Each pixel is represented by two D-bit values: the     intensity of the greyscale pixel and an alpha sample, indicating how opaque the pixel is.     True color with alpha 8 and 16     Each pixel is comprised of four D-pixel color     components: red, green, blue, and the alpha sample indicating how opaque the pixel is.      Compression   BMP-format icons nearly always use lossless compression, but lossy methods are available.   PNG icons are always compressed losslessly.   Licensing â JPEG (Joint Photographic Experts Group image) The JPEG (typically pronounced ""jay-peg"") image format is currently the most widely used lossy compression format for still images. It's particularly useful for photographs; applying lossy compression to content requiring sharpness, like diagrams or charts, can produce unsatisfactory results.  JPEG is actually a data format for compressed photos, rather than a file type. The JFIF (JPEG File Interchange Format) specification describes the format of the files we think of as ""JPEG"" images.  MIME type image/jpeg File extension(s) .jpg, .jpeg, .jpe,   .jif, .jfif Specification jpeg.org/jpeg/ Browser compatibility All versions of Chrome, Edge, Firefox, Internet Explorer, Opera, and Safari Maximum dimensions 65,535Ã65,535 pixels Supported color modes  Color mode Bits per component (D) Description  Greyscale n/a True greyscale can be supported using the single luma channel (Y). True color 8 Each pixel is described by the red, blue, and green color components, each of which is 8 bits. Indexed color n/a JPEG does not offer an indexed color mode. Greyscale with alpha n/a JPEG does not support an alpha channel. True color with alpha n/a JPEG does not support an alpha channel.  Compression Lossy; based on the discrete cosine transform Licensing As of October 27, 2006, all United States patents have expired. PNG (Portable Network Graphics)The PNG (pronounced ""ping"") image format uses lossless compression, while supporting higher color depths than GIF and being more efficient, as well as featuring full alpha transparency support. PNG is widely supported, with all major browsers offering full support for its features. Internet Explorer, which introduced PNG support in versions 4â5, did not fully support it until IE 9, and had many infamous bugs for many of the intervening years, including in the once-omnipresent Internet Explorer 6. This slowed PNG adoption, but it is now commonly used, especially when precise reproduction of the source image is needed.  MIME type image/png File extension(s) .png Specification w3.org/TR/PNG Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari  Basic support 1 12 1 5 3.5.1 (Presto)15 (Blink) 1 Alpha channel 1 12 1 5 6 (Presto)All (Blink) 1 Gamma correction no yes 1 8 1 broken Color correction no yes 3 9 no no Interlacing no ? 1 broken 3.5.1 no  Maximum dimensions 2,147,483,647Ã2,147,483,647 pixels Supported color modes  Color mode Bits per component (D) Description  Greyscale 1, 2, 4, 8, and 16 Each pixel consists of a single D-bit value indicating the brightness of the greyscale pixel. True color 8 and 16     Each pixel is represented by three D-bit values     indicating the level of the red, green, and blue color components.     Indexed color 1, 2, 4, and 8     Each pixel is a D-bit value indicating an index into a color palette which is contained within a     PLTE     chunk in the APNG file; the colors in the palette all use an 8-bit depth.     Greyscale with alpha 8 and 16     Each pixel is represented by two D-bit values: the     intensity of the greyscale pixel and an alpha sample, indicating how opaque the pixel is.     True color with alpha 8 and 16 Each pixel is comprised of four D-pixel color components: red, green, blue, and the alpha sample indicating how opaque the pixel is.  Compression Lossless, optionally indexed color like GIF Licensing   Â©2003 W3C (MIT, ERCIM,   Keio), All Rights Reserved. W3C   liability,   trademark, document use   and   software licensing rules apply. No known royalty-bearing patents.   SVG (Scalable Vector Graphics) SVG is an XML-based vector graphics format that specifies the contents of an image as a set of drawing commands that create shapes, lines, apply colors, filters, and so forth. SVG files are ideal for diagrams, icons, and other images which can be accurately drawn at any size. As such, SVG is popular for user interface elements in modern Web design.  SVG files are text files containing source code that, when interpreted, draws the desired image. For instance, this example defines an drawing area with initial size 100 by 100 units, containing a line drawn diagonally through the box: <svg viewBox=""0 0 100 100"" xmlns=""http://www.w3.org/2000/svg""> <line x1=""0"" y1=""80"" x2=""100"" y2=""20"" stroke=""black"" /> </svg> SVG can be used in web content in two ways: You can directly write the <svg> element within the HTML, containing SVG elements to draw the image. You can display an SVG image anywhere you can use any of the other image types, including with the <img> and <picture> elements, the background-image CSS property, and so forth.  SVG is an ideal choice for images which can be represented using a series of drawing commands, especially if the size at which the image will be rendered is unknown or may vary, since SVG will smoothly scale to the desired size. It's not generally useful for strictly bitmap or photographic images, although it is possible to include bitmap images within an SVG.  MIME type image/svg+xml File extension(s) .svg Specification w3.org/TR/SVG2 Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari  SVG support 4 12 3 9 10 (Presto)15 (Blink) 3.2 SVG as image (<img>, etc.) 28 12 4 9 10 (Presto)15 (Blink) 9  Maximum dimensions Unlimited Supported color modes   Colors in SVG are specified using   CSS color syntax.   Compression   SVG source may be compressed during transit using   HTTP compression   techniques, or on disk as an .svgz file.   Licensing   Â©2018 W3C (MIT, ERCIM,   Keio,   Beihang), All Rights Reserved. W3C   liability,   trademark,   document use   and   software licensing   rules apply. No known royalty-bearing patents.   TIFF (Tagged Image File Format) TIFF is a raster graphics file format which was created to store scanned photos, although it can be any kind of image. It is a somewhat ""heavy"" format, in that TIFF files have a tendency to be larger than images in other formats. This is because of the metadata often included, as well as the fact that most TIFF images are either uncompressed or use compression algorithms that still leave fairly large files after compression. TIFF supports a variety of compression methods, but the most commonly used are the CCITT Group 4 (and, for older fax systems, Group 3) compression systems used for by fax software, as well as LZW and lossy JPEG compression. Every value in a TIFF file is specified using its tag (indicating what kind of information it is, such as the width of the image) and its type (indicating the format the data is stored in), followed by the length of the array of values to assign to that tag (all properties are stored in arrays, even for single values). This allows different data types to be used for the same properties. For example, the width of an image, ImageWidth, is stored using tag 0x0100, and is a one-entry array. By specifying type 3 (SHORT), the value of ImageWidth is stored as a 16-bit value:  Tag Type Size Value  0x0100 (ImageWidth) 0x0003 (SHORT) 0x00000001 (1 entry) 0x0280 (640 pixels) Specifying type 4 (LONG) stores the width as a 32-bit value: Tag Type Size Value  0x0100 (ImageWidth) 0x0004 (LONG) 0x00000001 (1 entry) 0x00000280 (640 pixels)  A single TIFF file can contain multiple images; this may be used to represent multi-page documents, for example (such as a multi-page scanned document, or a received fax). However, software reading TIFF files is only required to support the first image.  TIFF supports a variety of color spaces, not just RGB. These include CMYK, YCbCr, and others, making TIFF a good choice for storing images intended for print, film, or television media.  Long ago, some browsers supported TIFF images in web content; today, however, you need to use special libraries or browser add-ons to do so. As such, TIFF files are not useful within the context of web content, but it's common to provide downloadable TIFF files when distributing photos and other artwork intended for precision editing or printing.  MIME type image/tiff File extension(s) .tif, .tiff Specification https://www.adobe.com/devnet-apps/photoshop/fileformatashtml/#50577413_pgfId-1035272 Browser compatibility No browsers integrate support for TIFF; its value is as a download format Maximum dimensions 4,294,967,295Ã4,294,967,295 pixels (theoretical) Supported color modes  Color mode Bits per component (D) Description Bilevel 1     A bilevel TIFF stores 8 bits in each byte, one bit per pixel.     The PhotometricInterpretation field specifies which of 0 and 1 are black and which is white.     Greyscale 4 and 8 Each pixel consists of a single D-bit value indicating the brightness of the greyscale pixel. True color 8 All true color RGB images are stored using 8-bits each of red, green, and blue. Indexed color 4 and 8     Each pixel is an index into a ColorMap record,     which defines the colors used in the image. The color map lists     all of the red values, then all of the green values, then all of     the blue values (rather than rgb, rgb, rgbâ¦).     Greyscale with alpha 4 and 8     Alpha information is added by specifying that there are more     than 3 samples per pixel in the SamplesPerPixel field, and indicating the type of     alpha (1 for an associated, pre-multiplied alpha component, and     2 for unassociated alpha (a separate matte); however, alpha channels are rarely used in TIFF files and may be unsupported by the user's software.     True color with alpha 8     Alpha information is added by specifying that there are more     than 3 samples per pixel in the SamplesPerPixel field, and indicating the type of     alpha (1 for an associated, pre-multiplied alpha component, and     2 for unassociated alpha (a separate matte); however, alpha channels are rarely used in TIFF files and may be unsupported by the user's software.      Compression Most TIFF files are uncompressed, but lossless PackBits and LZW compression are supported, as is lossy JPEG compression. Licensing No license required (aside from any associated with libraries you might use); all known patents have expired. WebP image WebP supports lossy compression via predictive coding based on the VP8 video codec, and lossless compression that uses substitutions for repeating data. Lossy WebP images are on average 25â35% smaller than JPEG images of visually similar compression levels. Lossless WebP images are typically 26% smaller than the same images in PNG format.  WebP also supports animation: in a lossy WebP file, the image data is represented by a VP8 bitstream, which may contain multiple frames. Lossless WebP holds the ANIM chunk, which describes the animation, and the ANMF chunk, which represents a frame of an animation sequence. Looping is supported.  WebP now has broad support in the latest versions of major web browsers, although it does not have deep historical support. Provide a fallback in either JPEG or PNG format, such as with the <picture> element.  MIME type image/webp File extension(s) .webp Specification RIFF Container SpecificationRFC 6386: VP8 Data Format and Decoding Guide   (lossy encoding)WebP Lossless Bitstream Specification  Browser compatibility  Feature Chrome Edge Firefox Internet Explorer Opera Safari Lossy WebP support 17 18 65 no 11.10 (Presto)15 (Blink) 14 Lossless WebP 2325 on Android 18 65 no 12.10 (Presto)15 (Blink) 14 Animation 32 18 65 no 19 (Blink) 14 WebP can also be used for exporting images from a Canvas from Firefox 96 and Chrome 50 (see HTMLCanvasElement.toBlob() for more detailed support version information). Maximum dimensions 16,383Ã16,383 pixels Supported color modes   Lossy WebP stores the image in 8-bit Y'CbCr 4:2:0 (YUV420) format.   Lossless WebP uses 8-bit ARGB color, with each component taking 8 bits for a total of 32 bits per pixel.   Compression Lossless (Huffman, LZ77, or color cache codes) or lossy (VP8). Licensing No license required; source code is openly available.  Note: Despite having announced support for WebP in Safari 14, as of version 14.0 .webp images do not display natively on a macOS desktop, whereas Safari on iOS 14 does display .webp images properly. XBM (X Window System Bitmap file) XBM (X Bitmap) files were the first to be supported on the Web, but are no longer used and should be avoided, as their format has potential security concerns. Modern browsers have not supported XBM files in many years, but when dealing with older content, you may find some still around.  XBM uses a snippet of C code to represent the contents of the image as an array of bytes. Each image consists of 2 to 4 #define directives, providing the width and height of the bitmap (and optionally the hotspot, if the image is designed as a cursor), followed by an array of unsigned char, where each value contains 8 1-bit monochrome pixels.  The image must be a multiple of 8 pixels wide. For example, the following code represents an XBM image which is 8 pixels by 8 pixels, with those pixels in a black-and-white checkerboard pattern: #define square8_width 8 #define square8_height 8 static unsigned char square8_bits[] = { 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55 };  MIME type image/xbm, image-xbitmap File extension(s) .xbm Specification None Browser compatibility Firefox 1â3.5, Internet Explorer 1â5 Maximum dimensions Unlimited Supported color modes  Color mode Bits per component Description  Greyscale 1 Each byte contains eight 1-bit pixels. True color n/a n/a Indexed color n/a n/a Greyscale with alpha n/a n/a True color with alpha n/a n/a  Compression Lossless Licensing Open source Choosing an image formatPicking the best image format for your needs is likely easier than video formats, as there are fewer options with broad support, and each tends to have a specific set of use-cases.Photographs Photographs typically fare well with lossy compression (depending on the encoder's configuration). This makes JPEG and WebP good choices for photographs, with JPEG being more compatible but WebP perhaps offering better compression. To maximize quality and minimize download time, consider providing both using a fallback with WebP as the first choice and JPEG as the second. Otherwise, JPEG is the safe choice for compatibility.  Best choice Fallback  WebP or JPEG JPEG Icons For smaller images such as icons, use a lossless format to avoid loss of detail in a size-constrained image. While lossless WebP is ideal for this purpose, support is not widespread yet, so PNG is a better choice unless you offer a fallback. If your image contains fewer than 256 colors, GIF is an option, although PNG often compresses even smaller with its indexed compression option (PNG-8).  If the icon can be represented using vector graphics, consider SVG, since it scales across various resolutions and sizes, so it's perfect for responsive design. Although SVG support is good, it may be worth offering a PNG fallback for older browsers.  Best choice Fallback SVG, Lossless WebP, or PNG PNG Screenshots Unless you're willing to compromise on quality, you should use a lossless format for screenshots. This is particularly important if there's any text in your screenshot, as text easily becomes fuzzy and unclear under lossy compression. PNG is probably your best bet, but lossless WebP is arguably going to be better compressed. Best choice Fallback   Lossless WebP or PNG;JPEG if compression artifacts aren't a   concern  PNG or JPEG;GIF for screenshots with low color counts Diagrams, drawings, and charts For any image that can be represented using vector graphics, SVG is the best choice. Otherwise, you should use a lossless format like PNG. If you do choose a lossy format, such as JPEG or lossy WebP, carefully weigh the compression level to avoid causing text or other shapes to become fuzzy or unclear.  Best choice Fallback SVG PNG Providing image fallbacks While the standard HTML <img> element doesn't support compatibility fallbacks for images, the <picture> element does. <picture> is used as a wrapper for a number of <source> elements, each specifying a version of the image in a different format or under different media conditions, as well as an <img> element which defines where to display the image and the fallback to the default or ""most compatible"" version. For example, if you're displaying a diagram best displayed with SVG, but wish to offer a fallback to a PNG or GIF of the diagram, you would do something like this: <picture> <source srcset=""diagram.svg"" type=""image/svg+xml"" /> <source srcset=""diagram.png"" type=""image/png"" /> <img  src=""diagram.gif""  width=""620""  height=""540""  alt=""Diagram showing the data channels"" /> </picture> You can specify as many <source>s as you wish, though typically 2 or 3 is all you need.See also Guide to media types and formats Web media technologies Guide to video codecs used on the web The HTML <img> and <picture> elements The CSS background-image property The Image() constructor and the HTMLImageElement interface Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 31, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
247,developer.mozilla.org/en-US/docs/Glossary/Payload/header,"developer.mozilla.org/en-US/docs/Glossary/Payload/header. Payload header - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsPayload headerArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoPayload headerA payload header is an HTTP header that describes the payload information related to safe transport and reconstruction of the original resource representation, from one or more messages. This includes information like the length of the message payload, which part of the resource is carried in this payload (for a multi-part message), any encoding applied for transport, message integrity checks, etc. Payload headers may be present in both HTTP request and response messages (i.e. in any message that is carrying payload data). The payload headers include: Content-Length, Content-Range, Trailer, and Transfer-Encoding.See also List of all HTTP headers Content-Length Content-Range Trailer Transfer-Encoding Representation header RFC 7231, section 3.3: Payload semantics Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 21, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
248,developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop,"developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop. HTMLMediaElement: loop property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLMediaElementloopArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APIHTMLMediaElementInstance propertiesaudioTracksautoplaybufferedcontroller Non-standard Deprecated controlscontrolsListcrossOrigincurrentSrccurrentTimedefaultMuteddefaultPlaybackRatedisableRemotePlaybackdurationendederrorloop mediaGroup Non-standard Deprecated mediaKeysmutednetworkStatepausedplaybackRatepreservesPitchreadyStateseekablesinkId Experimental srcsrcObjecttextTracksvideoTracksvolumeInstance methodscanPlayType()captureStream()fastSeek()load()pause()play()seekToNextFrame() Deprecated setMediaKeys()setSinkId()EventsabortcanplaycanplaythroughdurationchangeemptiedencryptedendederrorloadeddataloadedmetadataloadstartpauseplayplayingprogressratechangeseekedseekingstalledsuspendtimeupdatevolumechangewaitingInheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoHTMLMediaElement: loop propertyThe HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.ValueA boolean value.Examplesconst obj = document.createElement(""video""); obj.loop = true; // true SpecificationsSpecificationHTML Standard # dom-media-loopBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also HTMLMediaElement: Interface used to define the HTMLMediaElement.loop property Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
249,developer.mozilla.org/en-US/docs/Web/API/Navigator/getAutoplayPolicy,"developer.mozilla.org/en-US/docs/Web/API/Navigator/getAutoplayPolicy. Navigator: getAutoplayPolicy() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNavigatorgetAutoplayPolicy()In this articleSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoHTML DOM APINavigatorInstance propertiesactiveVRDisplays Non-standard Deprecated appCodeName Deprecated appName Deprecated appVersion Deprecated buildID Non-standard clipboardconnection Experimental contacts Experimental cookieEnabledcredentialsdeviceMemory Experimental doNotTrack Deprecated geolocationglobalPrivacyControl Experimental Non-standard gpu Experimental hardwareConcurrencyhid Experimental ink Experimental keyboard Experimental languagelanguageslocksmaxTouchPointsmediaCapabilitiesmediaDevicesmediaSessionmimeTypes Deprecated onLineoscpu Deprecated pdfViewerEnabledpermissionsplatform Deprecated plugins Deprecated presentationproduct Deprecated productSub Deprecated serial Experimental serviceWorkerstorageuserActivationuserAgentuserAgentData Experimental vendor Deprecated vendorSub Deprecated virtualKeyboard Experimental wakeLockwebdriverwindowControlsOverlayxr Experimental Instance methodscanShare()clearAppBadge()getAutoplayPolicy() Experimental getBattery()getGamepads()getUserMedia() Deprecated getVRDisplays() Non-standard Deprecated javaEnabled() Deprecated registerProtocolHandler()requestMediaKeySystemAccess()requestMIDIAccess()sendBeacon()setAppBadge()share()taintEnabled() Deprecated unregisterProtocolHandler()vibrate()Related pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoNavigator: getAutoplayPolicy() methodExperimental: This is an experimental technologyCheck the Browser compatibility table carefully before using this in production. The getAutoplayPolicy() method of the Autoplay Policy Detection API provides information about whether autoplay of media elements and audio contexts is allowed, disallowed, or only allowed if the audio is muted. Applications can use this information to provide an appropriate user experience. For example, if the user agent policy only allows autoplay of inaudible content, the application might mute videos so that they can still autoplay. The method can be used to get either the broad autoplay policy for all items of a particular type in the document, or for specific media elements or audio contexts.Syntax// Test autoplay policy for a particular media playing feature getAutoplayPolicy(type) // Test autoplay support for a specific element or context getAutoplayPolicy(element) getAutoplayPolicy(context) ParametersThe method must be called with one (and only one) of the following three parameters: type Optional A string indicating the media playing feature for which the broad autoplay policy is required. The supported values are: mediaelement    Get the broad autoplay policy for media elements in the document.   Media elements are HTMLMediaElement derived objects such as HTMLAudioElement and HTMLVideoElement, and their corresponding tags <audio> and <video>.   audiocontext Get the broad autoplay policy for Web Audio API players in the document. element Optional   A specific media element.  This must be an HTMLMediaElement, including derived elements such as HTMLVideoElement and HTMLAudioElement.  context Optional A specific AudioContext. Return value A string indicating the autoplay policy for the specified media feature type, element, or context. This will be a string containing one of the following values: allowed Autoplay is allowed. allowed-muted   Autoplay is allowed only for inaudible media.  This includes media that has no audio track, or for which the audio has been muted.  disallowed Autoplay is not allowed.  Note that the autoplay policy returned for a type parameter is the broad policy for items of the indicated type. On page load, all items of a type will have the same policy as the type. Once the user has interacted with the page/site, on some browsers individual items may have a different policy to the corresponding type. Exceptions TypeError   The object passed to the method is not an allowed type.  The allowed types include HTMLMediaElement (or a derived element such as HTMLVideoElement and HTMLAudioElement), or AudioContext.  Description ""Autoplay"" refers to any feature that causes content to begin to play without the user specifically requesting that playback begin. This includes the autoplay attribute in the HTML <video> and <audio> elements, and using JavaScript code to start playback without any user interaction.  User agents commonly block autoplay, or only allow inaudible content to autoplay, because unexpected sounds when a page first loads can result in a jarring and unpleasant user experience. The mechanisms used to determine whether content can autoplay or not, or only play for inaudible content, differ between user agents.  The getAutoplayPolicy() method provides a standard mechanism to determine the policy for a particular user agent to autoplay a particular type or item of content. This enables application customization such as automatic muting of video on sites where autoplay of audible content is not allowed, or modifying the application to behave without autoplay.  The recommended use of the method is to call it on page load (or before the content playing elements are created) specifying the type of feature to check, and then configuring autoplay of media elements based on the result. For example, if the application wants to autoplay video elements that have an audio track, you might use the following code to mute the video if only inaudible content is allowed to play. if (navigator.getAutoplayPolicy(""mediaelement"") === ""allowed"") { // Do nothing. The content can autoplay. } else if (navigator.getAutoplayPolicy(""mediaelement"") === ""allowed-muted"") { // Mute the video so it can autoplay. } else { // Autoplay disallowed. // Add a play button to the video element. }  The method can also be called to check the autoplay policy for a specific media element or audio context. As shown below, the code looks exactly the same except you pass in the specify item rather than the type string. const video = document.getElementById(""video_element_id""); if (navigator.getAutoplayPolicy(video) === ""allowed"") { // Do nothing. The content can autoplay. } else if (navigator.getAutoplayPolicy(video) === ""allowed-muted"") { // Mute the video so it can autoplay. } else { // Autoplay disallowed. // Add a play button to the video element. }  On page load, before the user has interacted with the page or site, the autoplay policy for the type and the individual items will be the same. After the user interacts with the site, page, or specific elements, the autoplay policy may change for the whole type. It is also possible that the policy for a specific item will change, even if the overall policy for the type does not.  There is no way to be notified that the autoplay policy has changed. For this reason, while you can check the policy for a type or item at any time, usually you will only do so on page load or before attempting to play content. ExamplesChecking if the feature is supportedThe code below shows how to check if navigator.getAutoplayPolicy() is supported: <div id=""reportResult""></div> const log = document.getElementById(""reportResult""); if (!navigator.getAutoplayPolicy) { log.textContent = ""navigator.getAutoplayPolicy() not supported.""; } else { log.textContent = ""navigator.getAutoplayPolicy() is supported.""; } The result of running the code on this page is:Test autoplay policy for media element typeThis example demonstrates how you can check the autoplay policy for the media elements type. The code creates a video element that has the autoplay attribute and is not muted by default. If the autoplay policy is ""allowed-muted"", the video will be muted to allow it to play. HTML The HTML below has a div element that is used as a reporting log, and also displays a <video> that has the autoplay attribute. This should not be muted by default, and should play automatically if autoplay is not blocked. <div id=""reportResult""></div> <!-- Simple video example --> <!-- 'Big Buck Bunny' licensed under CC 3.0 by the Blender foundation. Hosted by archive.org --> <!-- Poster from peach.blender.org --> <video id=""bunny_vid"" autoplay controls src=""https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"" poster=""https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"" width=""620""> Sorry, your browser doesn't support embedded videos, but don't worry, you can <a href=""https://archive.org/details/BigBuckBunny_124"">download it</a> and watch it with your favorite video player! </video> JavaScript The code reports whether or not the getAutoplayPolicy() method is supported, and if it is, the policy for media elements. If the policy is allowed-muted, only muted videos can be played. In this case we add some text explaining what is happening and mute the video. const log = document.getElementById(""reportResult""); const video = document.getElementById(""bunny_vid""); if (!navigator.getAutoplayPolicy) { log.textContent =  ""navigator.getAutoplayPolicy() not supported. It may or may not autoplay, depending on the browser!""; } else { log.textContent = `Autoplay policy for media elements is: ${navigator.getAutoplayPolicy(  ""mediaelement"" )}. `; if (navigator.getAutoplayPolicy(""mediaelement"") === ""allowed-muted"") {  // Mute the video so it can autoplay  video.muted = true;  log.textContent += ""Video has been muted to allow it to autoplay.""; } } Note that you might similarly check for allowed and disallowed. Result The video is displayed below along with information about whether the getAutoplayPolicy() method is supported, and if so, the policy. If getAutoplayPolicy() is supported and the policy is allowed, the video will play automatically with sound. If the policy is allowed-muted, the video will play without sound.  Note that if getAutoplayPolicy() is not supported, the video will either autoplay with audio or not play. The code has no control over this behavior: you're at the mercy of the browser implementation! Test autoplay policy for a specific media element This example shows how you can check whether a specific media element will autoplay. It is almost exactly the same as the previous example (an AudioContext check would also be similar). Note that it is possible for specific elements to autoplay even if a check on the mediaelement type indicates that autoplay is disallowed; in other words, a check on a specific element is more reliable (though it doesn't matter on page load).  The code creates a video element that has the autoplay attribute. If the autoplay policy is ""allowed-muted"", the video will be muted to allow it to play. HTML The HTML below has a div element that is used as a reporting log, and also displays a <video> that has the autoplay attribute. This should not be muted by default, and should play automatically if autoplay is not blocked. <div id=""reportResult""></div> <!-- Simple video example --> <!-- 'Big Buck Bunny' licensed under CC 3.0 by the Blender foundation. Hosted by archive.org --> <!-- Poster from peach.blender.org --> <video id=""bunny_vid"" autoplay controls src=""https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"" poster=""https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"" width=""620""> Sorry, your browser doesn't support embedded videos, but don't worry, you can <a href=""https://archive.org/details/BigBuckBunny_124"">download it</a> and watch it with your favorite video player! </video> JavaScript The code reports whether or not the getAutoplayPolicy() method is supported, and if it is, the policy for media elements. If the policy is allowed-muted, only muted videos can be played, so the code mutes the video. const log = document.getElementById(""reportResult""); const video = document.getElementById(""bunny_vid""); if (!navigator.getAutoplayPolicy) { log.textContent =  ""navigator.getAutoplayPolicy() not supported. It may or may not autoplay, depending on the browser!""; } else { // Here we pass in the HTMLVideoElement to check log.textContent = `navigator.getAutoplayPolicy(video) == ${navigator.getAutoplayPolicy(  ""mediaelement"" )}`; if (navigator.getAutoplayPolicy(video) === ""allowed-muted"") {  // Mute the video so it can autoplay  video.muted = true;  log.textContent += ""Video has been muted to allow it to autoplay.""; } } Result The result is the same as in the previous example: The video should autoplay with sound if allowed is returned, and no sound if allowed-muted is returned. If getAutoplayPolicy() is not supported, the video autoplay behavior depends only on the browser. SpecificationsSpecificationAutoplay Policy Detection # dom-navigator-getautoplaypolicyBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Autoplay guide for media and Web Audio APIs Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 14, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
250,developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing,"developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing. KeyboardEvent: isComposing property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsKeyboardEventisComposingArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoUI EventsKeyboardEventConstructorKeyboardEvent()Instance propertiesaltKeycharCode Deprecated codectrlKeyisComposing keykeyCode Deprecated keyIdentifier Non-standard Deprecated locationmetaKeyrepeatshiftKeyInstance methodsgetModifierState()initKeyboardEvent() Deprecated initKeyEvent() Non-standard Deprecated Inheritance:UIEventEventRelated pages for UI EventsCompositionEventFocusEventInputEventMouseEventMouseScrollEventMutationEventUIEventWheelEventIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoKeyboardEvent: isComposing property The KeyboardEvent.isComposing read-only property returns a boolean value indicating if the event is fired within a composition session, i.e. after compositionstart and before compositionend. ValueA boolean.Examplesconst kbdEvent = new KeyboardEvent(""syntheticKey"", false); console.log(kbdEvent.isComposing); // return false SpecificationsSpecificationUI Events # dom-keyboardevent-iscomposingBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also compositionstart and compositionend KeyboardEvent Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
251,developer.mozilla.org/en-US/docs/Learn/Common/questions/Design/and/accessibility,"developer.mozilla.org/en-US/docs/Learn/Common/questions/Design/and/accessibility. Design and accessibility - Learn web development | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusGuidesCommon questionsDesign and accessibilityArticle ActionsEnglish (US)Complete beginners start here!Getting started with the webGetting started with the webInstalling basic softwareWhat will your website look like?Dealing with filesHTML basicsCSS basicsJavaScript basicsPublishing your websiteHow the web worksHTML â Structuring the webIntroduction to HTMLIntroduction to HTMLGetting started with HTMLWhat's in the head? Metadata in HTMLHTML text fundamentalsCreating hyperlinksAdvanced text formattingDocument and website structureDebugging HTMLMarking up a letterStructuring a page of contentMultimedia and embeddingMultimedia and embeddingImages in HTMLVideo and audio contentFrom object to iframe â other embedding technologiesAdding vector graphics to the webResponsive imagesMozilla splash pageHTML tablesHTML tablesHTML table basicsHTML table advanced features and accessibilityStructuring planet dataCSS â Styling the webCSS first stepsCSS first steps overviewWhat is CSS?Getting started with CSSHow CSS is structuredHow CSS worksStyling a biography pageCSS building blocksCSS building blocksCSS selectorsType, class, and ID selectorsAttribute selectorsPseudo-classes and pseudo-elementsCombinatorsCascade, specificity, and inheritanceCascade layersThe box modelBackgrounds and bordersHandling different text directionsOverflowing contentCSS values and unitsSizing items in CSSImages, media, and form elementsStyling tablesDebugging CSSOrganizing your CSSFundamental CSS comprehensionCreating fancy letterheaded paperA cool-looking boxStyling textCSS styling textFundamental text and font stylingStyling listsStyling linksWeb fontsTypesetting a community school homepageCSS layoutCSS layoutIntroduction to CSS layoutNormal FlowFlexboxGridsFloatsPositioningMultiple-column layoutResponsive designBeginner's guide to media queriesLegacy layout methodsSupporting older browsersFundamental layout comprehensionJavaScript â Dynamic client-side scriptingJavaScript first stepsJavaScript First StepsWhat is JavaScript?A first splash into JavaScriptWhat went wrong? Troubleshooting JavaScriptStoring the information you need â VariablesBasic math in JavaScript â numbers and operatorsHandling text â strings in JavaScriptUseful string methodsArraysSilly story generatorJavaScript building blocksJavaScript building blocksMaking decisions in your code â conditionalsLooping codeFunctions â reusable blocks of codeBuild your own functionFunction return valuesIntroduction to eventsImage galleryIntroducing JavaScript objectsIntroducing JavaScript objectsJavaScript object basicsObject prototypesObject-oriented programmingClasses in JavaScriptWorking with JSONObject building practiceAdding features to our bouncing balls demoAsynchronous JavaScriptAsynchronous JavaScriptIntroducing asynchronous JavaScriptHow to use promisesHow to implement a promise-based APIIntroducing workersSequencing animationsClient-side web APIsClient-side web APIsIntroduction to web APIsManipulating documentsFetching data from the serverThird-party APIsDrawing graphicsVideo and Audio APIsClient-side storageWeb forms â Working with user dataCore forms learning pathwayWeb forms â Working with user dataYour first formHow to structure a web formBasic native form controlsThe HTML5 input typesOther form controlsStyling web formsAdvanced form stylingUI pseudo-classesClient-side form validationSending form dataAdvanced forms articlesHow to build custom form controlsSending forms through JavaScriptCSS property compatibility table for form controlsAccessibility â Make the web usable by everyoneAccessibility guidesAccessibilityWhat is accessibility?HTML: A good basis for accessibilityCSS and JavaScript accessibility best practicesWAI-ARIA basicsAccessible multimediaMobile accessibilityAssessment: Accessibility troubleshootingPerformance â Making websites fast and responsivePerformance guidesWeb performanceThe ""why"" of web performanceWhat is web performance?Perceived performanceMeasuring performanceMultimedia: ImagesMultimedia: videoJavaScript performanceHTML performance featuresCSS performance optimizationThe business case for web performanceMathML â Writing mathematics with MathMLMathML first stepsMathML first steps overviewGetting started with MathMLThree famous mathematical formulasTools and testingClient-side web development toolsUnderstanding client-side web development toolsClient-side tooling overviewCommand line crash coursePackage management basicsIntroducing a complete toolchainDeploying our appIntroduction to client-side frameworksIntroduction to client-side frameworksFramework main featuresReactGetting started with ReactBeginning our React todo listComponentizing our React appReact interactivity: Events and stateReact interactivity: Editing, filtering, conditional renderingAccessibility in ReactReact resourcesEmberGetting started with EmberEmber app structure and componentizationEmber interactivity: Events, classes and stateEmber Interactivity: Footer functionality, conditional renderingRouting in EmberEmber resources and troubleshootingVueGetting started with VueCreating our first Vue componentRendering a list of Vue componentsAdding a new todo form: Vue events, methods, and modelsStyling Vue components with CSSUsing Vue computed propertiesVue conditional rendering: editing existing todosFocus management with Vue refsVue resourcesSvelteGetting started with SvelteStarting our Svelte to-do list appDynamic behavior in Svelte: working with variables and propsComponentizing our Svelte appAdvanced Svelte: Reactivity, lifecycle, accessibilityWorking with Svelte storesTypeScript support in SvelteDeployment and next stepsAngularGetting started with AngularBeginning our Angular todo list appStyling our Angular appCreating an item componentFiltering our to-do itemsBuilding Angular applications and further resourcesGit and GitHubGit and GitHubCross browser testingCross browser testingIntroduction to cross-browser testingStrategies for carrying out testingHandling common HTML and CSS problemsHandling common JavaScript problemsHandling common accessibility problemsImplementing feature detectionIntroduction to automated testingSetting up your own test automation environmentServer-side website programmingFirst stepsServer-side website programming first stepsIntroduction to the server sideClient-Server OverviewServer-side web frameworksWebsite securityDjango web framework (Python)Django Web Framework (Python)Django introductionSetting up a Django development environmentDjango Tutorial: The Local Library websiteDjango Tutorial Part 2: Creating a skeleton websiteDjango Tutorial Part 3: Using modelsDjango Tutorial Part 4: Django admin siteDjango Tutorial Part 5: Creating our home pageDjango Tutorial Part 6: Generic list and detail viewsDjango Tutorial Part 7: Sessions frameworkDjango Tutorial Part 8: User authentication and permissionsDjango Tutorial Part 9: Working with formsDjango Tutorial Part 10: Testing a Django web applicationDjango Tutorial Part 11: Deploying Django to productionDjango web application securityAssessment: DIY Django mini blogExpress Web Framework (node.js/JavaScript)Express web framework (Node.js/JavaScript)Express/Node introductionSetting up a Node development environmentExpress Tutorial: The Local Library websiteExpress Tutorial Part 2: Creating a skeleton websiteExpress Tutorial Part 3: Using a Database (with Mongoose)Express Tutorial Part 4: Routes and controllersExpress Tutorial Part 5: Displaying library dataExpress Tutorial Part 6: Working with formsExpress Tutorial Part 7: Deploying to productionFurther resourcesCommon questionsCommon questionsUse HTML to solve common problemsUse CSS to solve common problemsSolve common problems in your JavaScript codeWeb mechanicsTools and setupDesign and accessibilityDesign and accessibilityThis section lists questions related to aesthetics, page structure, accessibility techniques, etc. How do I start to design my website? This article covers the all-important first step of every project: define what you want to accomplish with it. What do common web layouts contain?   When designing pages for your website, it's good to have an idea of the most common layouts. This article runs  through some typical web layouts, looking at the parts that make up each one.  What is accessibility? This article introduces the basic concepts behind web accessibility. How can we design for all types of users?   This article provides basic techniques to help you design websites for any kind of user â quick accessibility wins,  and other such things.  What HTML features promote accessibility?   This article describes specific features of HTML that can be used to make a webpage more accessible to people with  different disabilities.  Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 23, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
252,developer.mozilla.org/en-US/docs/Web/API/NodeList/length,"developer.mozilla.org/en-US/docs/Web/API/NodeList/length. NodeList: length property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodeListlengthArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityDocument Object ModelNodeListInstance propertieslength Instance methodsentries()forEach()item()keys()values()Related pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilityNodeList: length property The NodeList.length property returns the number of items in a NodeList. ValueAn integer value representing the number of items in a NodeList.Examples The length property is often useful in DOM programming. It's often used to test the length of a list, to see if it exists at all. It's also commonly used as the iterator in a for loop, as in this example. // All the paragraphs in the document const items = document.getElementsByTagName(""p""); // For each item in the list, // append the entire element as a string of HTML let gross = """"; for (let i = 0; i < items.length; i++) { gross += items[i].innerHTML; } // gross is now all the HTML for the paragraphs SpecificationsSpecificationDOM Standard # ref-for-dom-nodelist-lengthâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
253,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rowspan,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rowspan. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
254,developer.mozilla.org/en-US/docs/Glossary/Browsing/context,"developer.mozilla.org/en-US/docs/Glossary/Browsing/context. Browsing context - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsBrowsing contextArticle ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoBrowsing contextA browsing context is an environment in which a browser displays a Document. In modern browsers, it usually is a tab, but can be a window or even only parts of a page, like a frame or an iframe. Each browsing context has an origin (that of the active document) and an ordered history of previously displayed documents. Communication between browsing contexts is severely constrained. Between browsing contexts of the same origin, a BroadcastChannel can be opened and used.See also See origin Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Feb 22, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
255,developer.mozilla.org/en-US/docs/Web/HTML/Attributes/span,"developer.mozilla.org/en-US/docs/Web/HTML/Attributes/span. ð¤·ð½ââï¸ Page not found | MDN Web DocsSkip to main contentSkip to searchMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusPage not foundGo back to the home pageMDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
256,developer.mozilla.org/en-US/docs/Web/API/Force/Touch/events,"developer.mozilla.org/en-US/docs/Web/API/Force/Touch/events. Force Touch events - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsForce Touch eventsArticle ActionsEnglish (US)In this articleEventsEvent propertiesConstantsSpecificationsIn this articleEventsEvent propertiesConstantsSpecificationsForce Touch eventsNon-standard: This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future. Force Touch events are a proprietary, Apple-specific feature which makes possible (where supported by the input hardware) new interactions based on how hard the user clicks or presses down on the touchscreen or trackpad.Events webkitmouseforcewillbegin Non-standard This event is fired before the mousedown event. Its main use is that it can be Event.preventDefault()ed. webkitmouseforcedown Non-standard This event is fired after the mousedown event as soon as sufficient pressure has been applied for it to qualify as a ""force click"". webkitmouseforceup Non-standard This event is fired after the webkitmouseforcedown event as soon as the pressure has been reduced sufficiently to end the ""force click"". webkitmouseforcechanged Non-standard This event is fired each time the amount of pressure changes. This event first fires after the mousedown event and stops firing before the mouseup event. Event propertiesThe following property is known to be available on the webkitmouseforcewillbegin, mousedown, webkitmouseforcechanged, webkitmouseforcedown, webkitmouseforceup, mousemove, and mouseup event objects: MouseEvent.webkitForce Non-standard Read only The amount of pressure currently being applied to the trackpad/touchscreen. ConstantsThese constants are useful for determining the relative intensity of the pressure indicated by MouseEvent.webkitForce: MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN Non-standard Read only Minimum force necessary for a normal click. MouseEvent.WEBKIT_FORCE_AT_FORCE_MOUSE_DOWN Non-standard Read only Minimum force necessary for a force click. SpecificationsNot part of any specification. Apple has a description at the Mac Developer Library.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on May 6, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
257,developer.mozilla.org/en-US/docs/Web/API/DocumentType/after,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/after. DocumentType: after() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTypeafter()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentTypeInstance propertiesnamepublicIdsystemIdInstance methodsafter() before()remove()replaceWith()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentType: after() method The DocumentType.after() method inserts a set of Node objects or strings in the children list of the DocumentType's parent, just after the DocumentType. Strings are inserted as equivalent Text nodes. Syntaxafter(param1) after(param1, param2) after(param1, param2, /* â¦ ,*/ paramN) Parameters param1, â¦, paramN A set of Node objects or strings to insert. Return valueNone (undefined).Exceptions HierarchyRequestError DOMException Thrown when the node cannot be inserted at the specified point in the hierarchy. Exampleslet docType = document.implementation.createDocumentType(""html"", """", """"); let myDoc = document.implementation.createDocument("""", """", docType); docType.after(document.createElement(""html"")); myDoc.childNodes; // NodeList [<!DOCTYPE html>, <html>] SpecificationsSpecificationDOM Standard # ref-for-dom-childnode-afterâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also DocumentType.before() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
258,developer.mozilla.org/en-US/docs/Web/API/File/API/Using/files/from/web/applications#example/using/object/urls/to/display/images,"developer.mozilla.org/en-US/docs/Web/API/File/API/Using/files/from/web/applications#example/using/object/urls/to/display/images. Using files from web applications - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsFile APIUsing files from web applicationsArticle ActionsEnglish (US)In this articleAccessing selected file(s)Getting information about selected file(s)Using hidden file input elements using the click() methodUsing a label element to trigger a hidden file input elementSelecting files using drag and dropExample: Showing thumbnails of user-selected imagesUsing object URLsExample: Using object URLs to display imagesExample: Uploading a user-selected fileExample: Using object URLs to display PDFExample: Using object URLs with other file typesSee alsoFile APIFile_APIRelated pages for File APIBlobFileFileListFileReaderFileReaderSyncURL.createObjectURL()URL.revokeObjectURL()In this articleAccessing selected file(s)Getting information about selected file(s)Using hidden file input elements using the click() methodUsing a label element to trigger a hidden file input elementSelecting files using drag and dropExample: Showing thumbnails of user-selected imagesUsing object URLsExample: Using object URLs to display imagesExample: Uploading a user-selected fileExample: Using object URLs to display PDFExample: Using object URLs with other file typesSee alsoUsing files from web applicationsUsing the File API, web content can ask the user to select local files and then read the contents of those files. This selection can be done by either using an HTML <input type=""file""> element or by drag and drop.Accessing selected file(s)Consider this HTML: <input type=""file"" id=""input"" multiple /> The File API makes it possible to access a FileList containing File objects representing the files selected by the user. The multiple attribute on the input element allows the user to select multiple files. Accessing the first selected file using a classical DOM selector: const selectedFile = document.getElementById(""input"").files[0]; Accessing selected file(s) on a change eventIt is also possible (but not mandatory) to access the FileList through the change event. You need to use EventTarget.addEventListener() to add the change event listener, like this: const inputElement = document.getElementById(""input""); inputElement.addEventListener(""change"", handleFiles, false); function handleFiles() { const fileList = this.files; /* now you can work with the file list */ } Getting information about selected file(s)The FileList object provided by the DOM lists all of the files selected by the user, each specified as a File object. You can determine how many files the user selected by checking the value of the file list's length attribute: const numFiles = fileList.length; Individual File objects can be retrieved by accessing the list as an array. There are three attributes provided by the File object that contain useful information about the file. name The file's name as a read-only string. This is just the file name, and does not include any path information. size The size of the file in bytes as a read-only 64-bit integer. type The MIME type of the file as a read-only string or """" if the type couldn't be determined. Example: Showing file(s) sizeThe following example shows a possible use of the size property: <!DOCTYPE html> <html lang=""en-US""> <head>  <meta charset=""UTF-8"" />  <title>File(s) size</title> </head> <body>  <form name=""uploadForm"">  <div>   <input id=""uploadInput"" type=""file"" multiple />   <label for=""fileNum"">Selected files:</label>   <output id=""fileNum"">0</output>;   <label for=""fileSize"">Total size:</label>   <output id=""fileSize"">0</output>  </div>  <div><input type=""submit"" value=""Send file"" /></div>  </form>  <script>  const uploadInput = document.getElementById(""uploadInput"");  uploadInput.addEventListener(   ""change"",   () => {   // Calculate total size   let numberOfBytes = 0;   for (const file of uploadInput.files) {    numberOfBytes += file.size;   }   // Approximate to the closest prefixed unit   const units = [    ""B"",    ""KiB"",    ""MiB"",    ""GiB"",    ""TiB"",    ""PiB"",    ""EiB"",    ""ZiB"",    ""YiB"",   ];   const exponent = Math.min(    Math.floor(Math.log(numberOfBytes) / Math.log(1024)),    units.length - 1   );   const approx = numberOfBytes / 1024 ** exponent;   const output =    exponent === 0    ? `${numberOfBytes} bytes`    : `${approx.toFixed(3)} ${     units[exponent]     } (${numberOfBytes} bytes)`;   document.getElementById(""fileNum"").textContent =    uploadInput.files.length;   document.getElementById(""fileSize"").textContent = output;   },   false  );  </script> </body> </html> Using hidden file input elements using the click() methodYou can hide the admittedly ugly file <input> element and present your own interface for opening the file picker and displaying which file or files the user has selected. You can do this by styling the input element with display:none and calling the click() method on the <input> element. Consider this HTML: <input type=""file"" id=""fileElem"" multiple accept=""image/*"" style=""display:none"" /> <button id=""fileSelect"" type=""button"">Select some files</button> The code that handles the click event can look like this: const fileSelect = document.getElementById(""fileSelect""); const fileElem = document.getElementById(""fileElem""); fileSelect.addEventListener( ""click"", (e) => {  if (fileElem) {  fileElem.click();  } }, false ); You can style the <button> however you wish.Using a label element to trigger a hidden file input elementTo allow opening the file picker without using JavaScript (the click() method), a <label> element can be used. Note that in this case the input element must not be hidden using display: none (nor visibility: hidden), otherwise the label would not be keyboard-accessible. Use the visually-hidden technique instead. Consider this HTML: <input type=""file"" id=""fileElem"" multiple accept=""image/*"" class=""visually-hidden"" /> <label for=""fileElem"">Select some files</label> and this CSS: .visually-hidden { position: absolute !important; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px); } input.visually-hidden:is(:focus, :focus-within) + label { outline: thin dotted; } There is no need to add JavaScript code to call fileElem.click(). Also in this case you can style the label element as you wish. You need to provide a visual cue for the focus status of the hidden input field on its label, be it an outline as shown above, or background-color or box-shadow. (As of time of writing, Firefox doesn't show this visual cue for <input type=""file""> elements.)Selecting files using drag and dropYou can also let the user drag and drop files into your web application. The first step is to establish a drop zone. Exactly what part of your content will accept drops may vary depending on the design of your application, but making an element receive drop events is easy: let dropbox; dropbox = document.getElementById(""dropbox""); dropbox.addEventListener(""dragenter"", dragenter, false); dropbox.addEventListener(""dragover"", dragover, false); dropbox.addEventListener(""drop"", drop, false); In this example, we're turning the element with the ID dropbox into our drop zone. This is done by adding listeners for the dragenter, dragover, and drop events. We don't actually need to do anything with the dragenter and dragover events in our case, so these functions are both simple. They just stop propagation of the event and prevent the default action from occurring: function dragenter(e) { e.stopPropagation(); e.preventDefault(); } function dragover(e) { e.stopPropagation(); e.preventDefault(); } The real magic happens in the drop() function: function drop(e) { e.stopPropagation(); e.preventDefault(); const dt = e.dataTransfer; const files = dt.files; handleFiles(files); } Here, we retrieve the dataTransfer field from the event, pull the file list out of it, and then pass that to handleFiles(). From this point on, handling the files is the same whether the user used the input element or drag and drop.Example: Showing thumbnails of user-selected imagesLet's say you're developing the next great photo-sharing website and want to use HTML to display thumbnail previews of images before the user actually uploads them. You can establish your input element or drop zone as discussed previously and have them call a function such as the handleFiles() function below. function handleFiles(files) { for (let i = 0; i < files.length; i++) {  const file = files[i];  if (!file.type.startsWith(""image/"")) {  continue;  }  const img = document.createElement(""img"");  img.classList.add(""obj"");  img.file = file;  preview.appendChild(img); // Assuming that ""preview"" is the div output where the content will be displayed.  const reader = new FileReader();  reader.onload = (e) => {  img.src = e.target.result;  };  reader.readAsDataURL(file); } } Here our loop handling the user-selected files looks at each file's type attribute to see if its MIME type begins with the string ""image/""). For each file that is an image, we create a new img element. CSS can be used to establish any pretty borders or shadows and to specify the size of the image, so that doesn't need to be done here. Each image has the CSS class obj added to it, making it easy to find in the DOM tree. We also add a file attribute to each image specifying the File for the image; this will let us fetch the images for actual upload later. We use Node.appendChild() to add the new thumbnail to the preview area of our document. Next, we establish the FileReader to handle asynchronously loading the image and attaching it to the img element. After creating the new FileReader object, we set up its onload function and then call readAsDataURL() to start the read operation in the background. When the entire contents of the image file are loaded, they are converted into a data: URL which is passed to the onload callback. Our implementation of this routine sets the img element's src attribute to the loaded image which results in the image appearing in the thumbnail on the user's screen.Using object URLsThe DOM URL.createObjectURL() and URL.revokeObjectURL() methods let you create simple URL strings that can be used to reference any data that can be referred to using a DOM File object, including local files on the user's computer. When you have a File object you'd like to reference by URL from HTML, you can create an object URL for it like this: const objectURL = window.URL.createObjectURL(fileObj); The object URL is a string identifying the File object. Each time you call URL.createObjectURL(), a unique object URL is created even if you've created an object URL for that file already. Each of these must be released. While they are released automatically when the document is unloaded, if your page uses them dynamically you should release them explicitly by calling URL.revokeObjectURL(): URL.revokeObjectURL(objectURL); Example: Using object URLs to display imagesThis example uses object URLs to display image thumbnails. In addition, it displays other file information including their names and sizes. The HTML that presents the interface looks like this: <input type=""file"" id=""fileElem"" multiple accept=""image/*"" style=""display:none"" /> <a href=""#"" id=""fileSelect"">Select some files</a> <div id=""fileList""> <p>No files selected!</p> </div> This establishes our file <input> element as well as a link that invokes the file picker (since we keep the file input hidden to prevent that less-than-attractive user interface from being displayed). This is explained in the section Using hidden file input elements using the click() method, as is the method that invokes the file picker. The handleFiles() method follows: const fileSelect = document.getElementById(""fileSelect""), fileElem = document.getElementById(""fileElem""), fileList = document.getElementById(""fileList""); fileSelect.addEventListener( ""click"", (e) => {  if (fileElem) {  fileElem.click();  }  e.preventDefault(); // prevent navigation to ""#"" }, false ); fileElem.addEventListener(""change"", handleFiles, false); function handleFiles() { if (!this.files.length) {  fileList.innerHTML = ""<p>No files selected!</p>""; } else {  fileList.innerHTML = """";  const list = document.createElement(""ul"");  fileList.appendChild(list);  for (let i = 0; i < this.files.length; i++) {  const li = document.createElement(""li"");  list.appendChild(li);  const img = document.createElement(""img"");  img.src = URL.createObjectURL(this.files[i]);  img.height = 60;  img.onload = () => {   URL.revokeObjectURL(img.src);  };  li.appendChild(img);  const info = document.createElement(""span"");  info.innerHTML = `${this.files[i].name}: ${this.files[i].size} bytes`;  li.appendChild(info);  } } } This starts by fetching the URL of the <div> with the ID fileList. This is the block into which we'll insert our file list, including thumbnails. If the FileList object passed to handleFiles() is null, we set the inner HTML of the block to display ""No files selected!"". Otherwise, we start building our file list, as follows: A new unordered list (<ul>) element is created. The new list element is inserted into the <div> block by calling its Node.appendChild() method. For each File in the FileList represented by files:  Create a new list item (<li>) element and insert it into the list. Create a new image (<img>) element. Set the image's source to a new object URL representing the file, using URL.createObjectURL() to create the blob URL. Set the image's height to 60 pixels. Set up the image's load event handler to release the object URL since it's no longer needed once the image has been loaded. This is done by calling the URL.revokeObjectURL() method and passing in the object URL string as specified by img.src. Append the new list item to the list. Here is a live demo of the code above:Example: Uploading a user-selected fileAnother thing you might want to do is let the user upload the selected file or files (such as the images selected using the previous example) to a server. This can be done asynchronously very easily.Creating the upload tasksContinuing with the code that built the thumbnails in the previous example, recall that every thumbnail image is in the CSS class obj with the corresponding File attached in a file attribute. This allows us to select all of the images the user has chosen for uploading using Document.querySelectorAll(), like this: function sendFiles() { const imgs = document.querySelectorAll("".obj""); for (let i = 0; i < imgs.length; i++) {  new FileUpload(imgs[i], imgs[i].file); } } Line 2 fetches a NodeList, called imgs, of all the elements in the document with the CSS class obj. In our case, these will be all of the image thumbnails. Once we have that list, it's trivial to go through it and create a new FileUpload instance for each. Each of these handles uploading the corresponding file.Handling the upload process for a fileThe FileUpload function accepts two inputs: an image element and a file from which to read the image data. function FileUpload(img, file) { const reader = new FileReader(); this.ctrl = createThrobber(img); const xhr = new XMLHttpRequest(); this.xhr = xhr; const self = this; this.xhr.upload.addEventListener(  ""progress"",  (e) => {  if (e.lengthComputable) {   const percentage = Math.round((e.loaded * 100) / e.total);   self.ctrl.update(percentage);  }  },  false ); xhr.upload.addEventListener(  ""load"",  (e) => {  self.ctrl.update(100);  const canvas = self.ctrl.ctx.canvas;  canvas.parentNode.removeChild(canvas);  },  false ); xhr.open(  ""POST"",  ""http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php"" ); xhr.overrideMimeType(""text/plain; charset=x-user-defined-binary""); reader.onload = (evt) => {  xhr.send(evt.target.result); }; reader.readAsBinaryString(file); } function createThrobber(img) { const throbberWidth = 64; const throbberHeight = 6; const throbber = document.createElement(""canvas""); throbber.classList.add(""upload-progress""); throbber.setAttribute(""width"", throbberWidth); throbber.setAttribute(""height"", throbberHeight); img.parentNode.appendChild(throbber); throbber.ctx = throbber.getContext(""2d""); throbber.ctx.fillStyle = ""orange""; throbber.update = (percent) => {  throbber.ctx.fillRect(  0,  0,  (throbberWidth * percent) / 100,  throbberHeight  );  if (percent === 100) {  throbber.ctx.fillStyle = ""green"";  } }; throbber.update(0); return throbber; } The FileUpload() function shown above creates a throbber, which is used to display progress information, and then creates an XMLHttpRequest to handle uploading the data. Before actually transferring the data, several preparatory steps are taken: The XMLHttpRequest's upload progress listener is set to update the throbber with new percentage information so that as the upload progresses the throbber will be updated based on the latest information. The XMLHttpRequest's upload load event handler is set to update the throbber progress information to 100% to ensure the progress indicator actually reaches 100% (in case of granularity quirks during the process). It then removes the throbber since it's no longer needed. This causes the throbber to disappear once the upload is complete. The request to upload the image file is opened by calling XMLHttpRequest's open() method to start generating a POST request. The MIME type for the upload is set by calling the XMLHttpRequest function overrideMimeType(). In this case, we're using a generic MIME type; you may or may not need to set the MIME type at all depending on your use case. The FileReader object is used to convert the file to a binary string. Finally, when the content is loaded the XMLHttpRequest function send() is called to upload the file's content. Asynchronously handling the file upload processThis example, which uses PHP on the server side and JavaScript on the client side, demonstrates asynchronous uploading of a file. <?php if (isset($_FILES['myFile'])) {  // Example:  move_uploaded_file($_FILES['myFile']['tmp_name'], ""uploads/"" . $_FILES['myFile']['name']);  exit; } ?><!DOCTYPE html> <html lang=""en-US""> <head> <meta charset=""UTF-8""> <title>dnd binary upload</title>  <script type=""application/javascript"">   function sendFile(file) {    const uri = ""/index.php"";    const xhr = new XMLHttpRequest();    const fd = new FormData();    xhr.open(""POST"", uri, true);    xhr.onreadystatechange = () => {     if (xhr.readyState === 4 && xhr.status === 200) {      alert(xhr.responseText); // handle response.     }    };    fd.append('myFile', file);    // Initiate a multipart/form-data upload    xhr.send(fd);   }   window.onload = () => {    const dropzone = document.getElementById(""dropzone"");    dropzone.ondragover = dropzone.ondragenter = (event) => {     event.stopPropagation();     event.preventDefault();    }    dropzone.ondrop = (event) => {     event.stopPropagation();     event.preventDefault();     const filesArray = event.dataTransfer.files;     for (let i=0; i<filesArray.length; i++) {      sendFile(filesArray[i]);     }    }   }  </script> </head> <body>  <div>   <div id=""dropzone"" style=""margin:30px; width:500px; height:300px; border:1px dotted grey;"">Drag & drop your file here</div>  </div> </body> </html> Example: Using object URLs to display PDFObject URLs can be used for other things than just images! They can be used to display embedded PDF files or any other resources that can be displayed by the browser. In Firefox, to have the PDF appear embedded in the iframe (rather than proposed as a downloaded file), the preference pdfjs.disabled must be set to false Non-standard . <iframe id=""viewer""></iframe> And here is the change of the src attribute: const obj_url = URL.createObjectURL(blob); const iframe = document.getElementById(""viewer""); iframe.setAttribute(""src"", obj_url); URL.revokeObjectURL(obj_url); Example: Using object URLs with other file typesYou can manipulate files of other formats the same way. Here is how to preview uploaded video: const video = document.getElementById(""video""); const obj_url = URL.createObjectURL(blob); video.src = obj_url; video.play(); URL.revokeObjectURL(obj_url); See also File FileList FileReader URL XMLHttpRequest Using XMLHttpRequest Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 15, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
259,developer.mozilla.org/en-US/docs/Web/API/Text/Text,"developer.mozilla.org/en-US/docs/Web/API/Text/Text. Text: Text() constructor - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsTextText()Article ActionsEnglish (US)In this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelTextConstructorText() Instance propertiesassignedSlotwholeTextInstance methodssplitText()Inheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExampleSpecificationsBrowser compatibilitySee alsoText: Text() constructor The Text() constructor returns a new Text object with the optional string given in parameter as its textual content. Syntaxnew Text() new Text(string) Parameters string Optional Return valueA new Text object with the content of the string parameter, or the empty string if no parameter was given.Examplelet text = new Text(""Test""); SpecificationsSpecificationDOM Standard # ref-for-dom-text-textâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The DOM API Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
260,developer.mozilla.org/en-US/docs/Web/API/Text/wholeText,"developer.mozilla.org/en-US/docs/Web/API/Text/wholeText. Text: wholeText property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsTextwholeTextArticle ActionsEnglish (US)In this articleValueExampleSpecificationsBrowser compatibilitySee alsoDocument Object ModelTextConstructorText()Instance propertiesassignedSlotwholeText Instance methodssplitText()Inheritance:CharacterDataNodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExampleSpecificationsBrowser compatibilitySee alsoText: wholeText property The read-only wholeText property of the Text interface returns the full text of all Text nodes logically adjacent to the node. The text is concatenated in document order. This allows specifying any text node and obtaining all adjacent text as a single string. Note: This is similar to call Node.normalize() followed by reading the text value,  but without modifying the tree. ValueA string with the concatenated text.ExampleSuppose you have the following simple paragraph within your webpage: <p> Through-hiking is great! <strong>No insipid election coverage!</strong> However, <a href=""https://en.wikipedia.org/wiki/Absentee_ballot"">casting a ballot</a> is tricky. </p> You decide you don't like the middle sentence, so you remove it: const paragraph = document.querySelector(""p""); // Reads the paragraph paragraph.removeChild(para.childNodes[1]); // Delete the strong element Now you end up with ""Through-hiking is great! However, casting a ballot is tricky."", with two nodes before the hyperlink: A Text containing the string ""Through-hiking is great!"" A second Text node containing the string "" However, "" To get those two nodes at once, you would call para.childNodes[0].wholeText: console.log(`'${paragraph.childNodes[0].wholeText}'`); // 'Through-hiking is great! However, ' SpecificationsSpecificationDOM Standard # ref-for-dom-text-wholetextâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also The Text interface it belongs to. Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 8, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
261,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/firstElementChild,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/firstElementChild. DocumentFragment: firstElementChild property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentfirstElementChildIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChild lastElementChildInstance methodsappend()getElementById()prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: firstElementChild property The DocumentFragment.firstElementChild read-only property returns the document fragment's first child Element, or null if there are no child elements. ValueAn Element that is the first child Element of the object, or null if there are none.Exampleslet fragment = new DocumentFragment(); fragment.firstElementChild; // null let paragraph = document.createElement(""p""); fragment.appendChild(paragraph); fragment.firstElementChild; // <p> SpecificationsSpecificationDOM Standard # ref-for-dom-parentnode-firstelementchildâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Element.firstElementChild Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
262,developer.mozilla.org/en-US/docs/Glossary/Falsy,"developer.mozilla.org/en-US/docs/Glossary/Falsy. Falsy - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsFalsyArticle ActionsEnglish (US)In this articleExamplesSee alsoIn this articleExamplesSee alsoFalsyA falsy (sometimes written falsey) value is a value that is considered false when encountered in a Boolean context. JavaScript uses type conversion to coerce any value to a Boolean in contexts that require it, such as conditionals and loops. The following table provides a complete list of JavaScript falsy values: Value Type Description  null Null The keyword null â the absence of any value. undefined Undefined undefined â the primitive value. false Boolean The keyword false. NaN Number NaN â not a number. 0 Number The Number zero, also including 0.0, 0x0, etc. -0 Number The Number negative zero, also including -0.0, -0x0, etc. 0n BigInt The BigInt zero, also including 0x0n, etc. Note that there is no BigInt negative zero â the negation of 0n is 0n. """" String Empty string value, also including '' and ``. document.all Object The only falsy object in JavaScript is the built-in document.all. The values null and undefined are also nullish.ExamplesExamples of falsy values in JavaScript (which are coerced to false in Boolean contexts, and thus bypass the if block): if (false) { // Not reachable } if (null) { // Not reachable } if (undefined) { // Not reachable } if (0) { // Not reachable } if (-0) { // Not reachable } if (0n) { // Not reachable } if (NaN) { // Not reachable } if ("""") { // Not reachable } The logical AND operator, &&If the first object is falsy, it returns that object: console.log(false && ""dog""); // âª false console.log(0 && ""dog""); // âª 0 See also Truthy Coercion Boolean Boolean coercion Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Mar 11, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
263,developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/getElementById,"developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/getElementById. DocumentFragment: getElementById() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentFragmentgetElementById()In this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelDocumentFragmentConstructorDocumentFragment()Instance propertieschildElementCountchildrenfirstElementChildlastElementChildInstance methodsappend()getElementById() prepend()querySelector()querySelectorAll()replaceChildren()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleSyntaxExamplesSpecificationsBrowser compatibilitySee alsoDocumentFragment: getElementById() methodThe getElementById() method of the DocumentFragment returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly. If you need to get access to an element which doesn't have an ID, you can use querySelector() to find the element using any selector. Note: IDs should be unique inside a document fragment. If two or more elements in a document fragment have the same ID, this method returns the first element found. SyntaxgetElementById(id) Note: The capitalization of ""Id"" in the name of this method must be correct for the code to function; getElementByID() is not valid and will not work, however natural it may seem. Parameters id The ID of the element to locate. The ID is a case-sensitive string which is unique within the document fragment: only one element should have any given ID. Return valueAn Element object describing the DOM element object matching the specified ID, or null if no matching element was found in the document fragment.ExamplesExtend a list of elementsIn this example, the document contains a list with a single item Cherry. We also create a document fragment containing four more items, Apple, Orange, Banana, and Melon. We then log the result of using getElementById() to look for Apple and Cherry in the document and in the fragment. At this point, Cherry appears only in the document while Apple appears only in the fragment. If you click ""Add fragment to document"", we append the fragment to the list inside the document, and again log the result of looking for both Apple and Cherry in the document and in the fragment. This time, both Apple and Cherry appear in the document, and neither appear in the fragment. This is because appending a fragment to a document moves the fragment's nodes into the DOM, leaving behind an empty DocumentFragment. HTML <button id=""add"">Add fragment to document</button> <button id=""reset"">Reset example</button> <br /> List content: <ul> <li id=""Cherry"">Cherry</li> </ul> Fragment content: <ul id=""fragment""></ul> Current status: <pre id=""log"" /> button { margin-bottom: 10px; } JavaScript // Create the document fragment with its initial content const fragment = new DocumentFragment(); [""Apple"", ""Orange"", ""Banana"", ""Melon""].forEach((fruit) => { const li = document.createElement(""li""); li.textContent = fruit; li.id = fruit; fragment.append(li); }); // When the button is clicked, add the fragment to the list document.getElementById(""add"").addEventListener(""click"", () => { document.querySelector(""ul"").append(fragment); displayStatus(); }); // Log the results of both getElementById() function displayStatus() { const log = document.getElementById(""log""); log.textContent = """"; [""Apple"", ""Cherry""].forEach((id) => {  log.textContent += `document.getElementById(""${id}"") ${  document.getElementById(id) ? ""Yes"" : ""No""  } `;  log.textContent += `fragment.getElementById(""${id}"") ${  fragment.getElementById(id) ? ""Yes"" : ""No""  } `; }); // Empty the fragment viewer and fill it with the current content const fragmentViewer = document.getElementById(""fragment""); while (fragmentViewer.hasChildNodes()) {  fragmentViewer.removeChild(fragmentViewer.lastChild); } for (entry of fragment.children) {  fragmentViewer.appendChild(entry.cloneNode(true)); } } // Log the initial state displayStatus(); // Hook the reset button document.getElementById(""reset"").addEventListener(""click"", () => { document.location.reload(); }); ResultSpecificationsSpecificationDOM Standard # dom-nonelementparentnode-getelementbyidBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Document.getElementById() Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
264,developer.mozilla.org/en-US/docs/Web/API/DocumentType/name,"developer.mozilla.org/en-US/docs/Web/API/DocumentType/name. DocumentType: name property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsDocumentTypenameArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilityDocument Object ModelDocumentTypeInstance propertiesname publicIdsystemIdInstance methodsafter()before()remove()replaceWith()Inheritance:NodeEventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilityDocumentType: name propertyThe read-only name property of the DocumentType returns the type of the document. For synthetic DocumentType, this property reflects the value given in parameter to DOMImplementation.createDocumentType(). For HTML documents, browsers always set it up to html, whatever the actual DOCTYPE in the source code is.ValueA string.Examplesconst docType = document.implementation.createDocumentType(""html"", """", """"); console.log(docType.name); // Displays `html` SpecificationsSpecificationDOM Standard # dom-documenttype-nameBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
265,developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTBody,"developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTBody. HTMLTableElement: createTBody() method - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLTableElementcreateTBody()Article ActionsEnglish (US)In this articleSyntaxExamplesSpecificationsBrowser compatibilityHTML DOM APIHTMLTableElementInstance propertiesalign Deprecated bgColor Deprecated border Deprecated captioncellPadding Deprecated cellSpacing Deprecated frame Deprecated rowsrules Deprecated summary Deprecated tBodiestFoottHeadwidth Deprecated Instance methodscreateCaption()createTBody() createTFoot()createTHead()deleteCaption()deleteRow()deleteTFoot()deleteTHead()insertRow()Inheritance:HTMLElementElementNodeEventTargetRelated pages for HTML DOMBeforeUnloadEventDOMStringMapErrorEventHTMLAnchorElementHTMLAreaElementHTMLAudioElementHTMLBRElementHTMLBaseElementHTMLBodyElementHTMLButtonElementHTMLCanvasElementHTMLDListElementHTMLDataElementHTMLDataListElementHTMLDialogElementHTMLDivElementHTMLDocumentHTMLElementHTMLEmbedElementHTMLFieldSetElementHTMLFormControlsCollectionHTMLFormElementHTMLFrameSetElementHTMLHRElementHTMLHeadElementHTMLHeadingElementHTMLHtmlElementHTMLIFrameElementHTMLImageElementHTMLInputElementHTMLLIElementHTMLLabelElementHTMLLegendElementHTMLLinkElementHTMLMapElementHTMLMediaElementHTMLMetaElementHTMLMeterElementHTMLModElementHTMLOListElementHTMLObjectElementHTMLOptGroupElementHTMLOptionElementHTMLOptionsCollectionHTMLOutputElementHTMLParagraphElementHTMLPictureElementHTMLPreElementHTMLProgressElementHTMLQuoteElementHTMLScriptElementHTMLSelectElementHTMLSourceElementHTMLSpanElementHTMLStyleElementHTMLTableCaptionElementHTMLTableCellElementHTMLTableColElementHTMLTableRowElementHTMLTableSectionElementHTMLTemplateElementHTMLTextAreaElementHTMLTimeElementHTMLTitleElementHTMLTrackElementHTMLUListElementHTMLUnknownElementHTMLVideoElementHashChangeEventHistoryImageDataLocationMessageChannelMessageEventMessagePortNavigatorPageTransitionEventPluginPluginArrayPromiseRejectionEventRadioNodeListUserActivationValidityStateWindowWorkletGlobalScopeIn this articleSyntaxExamplesSpecificationsBrowser compatibilityHTMLTableElement: createTBody() method The createTBody() method of HTMLTableElement objects creates and returns a new <tbody> element associated with a given <table>. Note: Unlike HTMLTableElement.createTHead() and  HTMLTableElement.createTFoot(), createTBody()  systematically creates a new <tbody> element, even if the table  already contains one or more bodies. If so, the new one is inserted after the existing  ones. SyntaxcreateTBody() ParametersNone.Return valueHTMLTableSectionElementExampleslet mybody = mytable.createTBody(); // Now this should be true: mybody === mytable.tBodies.item(mytable.tBodies.length - 1) SpecificationsSpecificationHTML Standard # dom-table-createtbody-devBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
266,developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal/dead/zone/tdz,"developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal/dead/zone/tdz. let - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceStatements and declarationsletArticle ActionsEnglish (US)In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee also JavaScript Tutorials Complete beginners JavaScript basics JavaScript first steps JavaScript building blocks Introducing JavaScript objects  JavaScript Guide Introduction Grammar and types Control flow and error handling Loops and iteration Functions Expressions and operators Numbers and dates Text formatting Regular expressions Indexed collections Keyed collections Working with objects Using classes Using promises JavaScript typed arrays Iterators and generators Meta programming JavaScript modules  Intermediate Client-side JavaScript frameworks Client-side web APIs Language overview JavaScript data structures Equality comparisons and sameness Enumerability and ownership of properties Closures  Advanced Inheritance and the prototype chain Memory Management Concurrency model and Event Loop References Built-in objects OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape() Deprecated eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError Non-standard IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape() Deprecated URIErrorWeakMapWeakRefWeakSet  Expressions & operators OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*  Statements & declarations Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith Deprecated  Functions OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object  Classes OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks  Regular expressions OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: , \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B  Errors OverviewError: Permission denied to access property ""x""InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: ""x"" is not definedReferenceError: assignment to undeclared variable ""x""ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property ""x""SyntaxError: ""0""-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: ""use strict"" not allowed in function with non-simple parametersSyntaxError: ""x"" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag ""x""SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter ""x""SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: ""x"" has no propertiesTypeError: ""x"" is (not) ""y""TypeError: ""x"" is not a constructorTypeError: ""x"" is not a functionTypeError: ""x"" is not a non-null objectTypeError: ""x"" is read-onlyTypeError: can't assign to property ""x"" on ""y"": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property ""x"": ""obj"" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property ""x""TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const ""x""TypeError: More arguments neededTypeError: property ""x"" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property ""x""TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement  Misc JavaScript technologies overview Lexical grammar Iteration protocols Strict mode Template literals Trailing commas Deprecated features  In this articleTry itSyntaxDescriptionExamplesSpecificationsBrowser compatibilitySee alsoletThe let declaration declares a block-scoped local variable, optionally initializing it to a value.Try itSyntaxlet name1; let name1 = value1; let name1 = value1, name2 = value2; let name1, name2 = value2; let name1 = value1, name2, /* â¦, */ nameN = valueN; Parameters nameN The names of the variable or variables to declare. Each must be a legal JavaScript identifier. valueN Optional For each variable declared, you may optionally specify its initial value to any legal JavaScript expression. The destructuring assignment syntax can also be used to declare variables. let { bar } = foo; // where foo = { bar: 10, baz: 12 }; // This creates a variable with the name 'bar', which has a value of 10 Descriptionlet allows you to declare variables that are limited to the scope of a block statement, or expression on which it is used, unlike the var keyword, which declares a variable globally, or locally to an entire function regardless of block scope. The other difference between var and let is that the latter can only be accessed after its declaration is reached (see temporal dead zone). For this reason, let declarations are commonly regarded as non-hoisted. Just like const the let does not create properties of the window object when declared globally (in the top-most scope). An explanation of why the name let was chosen can be found in the linked StackOverflow answer. Many issues with let variables can be avoided by declaring them at the top of the scope in which they are used (doing so may impact readability). Unlike var, let begins declarations, not statements. That means you cannot use a lone let declaration as the body of a block (which makes sense, since there's no way to access the variable). if (true) let a = 1; // SyntaxError: Lexical declaration cannot appear in a single-statement context ExamplesScoping rulesVariables declared by let have their scope in the block for which they are declared, as well as in any contained sub-blocks. In this way, let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function: function varTest() { var x = 1; {  var x = 2; // same variable!  console.log(x); // 2 } console.log(x); // 2 } function letTest() { let x = 1; {  let x = 2; // different variable  console.log(x); // 2 } console.log(x); // 1 } At the top level of programs and functions, let, unlike var, does not create a property on the global object. For example: var x = ""global""; let y = ""global""; console.log(this.x); // ""global"" console.log(this.y); // undefined RedeclarationsRedeclaring the same variable within the same function or block scope raises a SyntaxError. if (x) { let foo; let foo; // SyntaxError thrown. } You may encounter errors in switch statements because there is only one block. let x = 1; switch (x) { case 0:  let foo;  break; case 1:  let foo; // SyntaxError for redeclaration.  break; } A block nested inside a case clause will create a new block scoped lexical environment, avoiding the redeclaration errors shown above. let x = 1; switch (x) { case 0: {  let foo;  break; } case 1: {  let foo;  break; } } If you're experimenting in a REPL, such as the Firefox web console (Tools > Web Developer > Web Console), and you run two let declarations with the same name in two separate inputs, you may get the same re-declaration error. See further discussion of this issue in Firefox bug 1580891. The Chrome console allows let re-declarations between different REPL inputs.Temporal dead zone (TDZ)A let or const variable is said to be in a ""temporal dead zone"" (TDZ) from the start of the block until code execution reaches the line where the variable is declared and initialized. While inside the TDZ, the variable has not been initialized with a value, and any attempt to access it will result in a ReferenceError. The variable is initialized with a value when execution reaches the line of code where it was declared. If no initial value was specified with the variable declaration, it will be initialized with a value of undefined. This differs from var variables, which will return a value of undefined if they are accessed before they are declared. The code below demonstrates the different result when let and var are accessed in code before the line in which they are declared. { // TDZ starts at beginning of scope console.log(bar); // undefined console.log(foo); // ReferenceError var bar = 1; let foo = 2; // End of TDZ (for foo) } The term ""temporal"" is used because the zone depends on the order of execution (time) rather than the order in which the code is written (position). For example, the code below works because, even though the function that uses the let variable appears before the variable is declared, the function is called outside the TDZ. { // TDZ starts at beginning of scope const func = () => console.log(letVar); // OK // Within the TDZ letVar access throws `ReferenceError` let letVar = 3; // End of TDZ (for letVar) func(); // Called outside TDZ! } The TDZ and typeof Using the typeof operator for a let variable in its TDZ will throw a ReferenceError: // results in a 'ReferenceError' console.log(typeof i); let i = 10; This differs from using typeof for undeclared variables, and variables that hold a value of undefined: // prints out 'undefined' console.log(typeof undeclaredVariable); TDZ combined with lexical scoping The following code results in a ReferenceError at the line shown: function test() { var foo = 33; if (foo) {  let foo = foo + 55; // ReferenceError } } test(); The if block is evaluated because the outer var foo has a value. However due to lexical scoping this value is not available inside the block: the identifier foo inside the if block is the let foo. The expression foo + 55 throws a ReferenceError because initialization of let foo has not completed â it is still in the temporal dead zone. This phenomenon can be confusing in a situation like the following. The instruction let n of n.a is already inside the private scope of the for...of loop's block. So, the identifier n.a is resolved to the property a of the n object located in the first part of the instruction itself (let n). This is still in the temporal dead zone as its declaration statement has not been reached and terminated. function go(n) { // n here is defined! console.log(n); // { a: [1, 2, 3] } for (let n of n.a) {  //   ^ ReferenceError  console.log(n); } } go({ a: [1, 2, 3] }); Other situationsWhen used inside a block, let limits the variable's scope to that block. Note the difference between var, whose scope is inside the function where it is declared. var a = 1; var b = 2; { var a = 11; // the scope is global let b = 22; // the scope is inside the block console.log(a); // 11 console.log(b); // 22 } console.log(a); // 11 console.log(b); // 2 However, this combination of var and let declarations below is a SyntaxError because var not being block-scoped, leading to them being in the same scope. This results in an implicit re-declaration of the variable. let x = 1; { var x = 2; // SyntaxError for re-declaration } SpecificationsSpecificationECMAScript Language Specification # sec-let-and-const-declarationsBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also var const Hoisting ES6 In Depth: let and const Breaking changes in let and const in Firefox 44 You Don't Know JS: Scope & Closures: Chapter 3: Function vs. Block Scope StackOverflow: What is the Temporal Dead Zone? StackOverflow: What is the difference between using let and var? Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 4, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
267,developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling,"developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling. Node: previousSibling property - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsNodepreviousSiblingArticle ActionsEnglish (US)In this articleValueExamplesSpecificationsBrowser compatibilitySee alsoDocument Object ModelNodeInstance propertiesbaseURIchildNodesfirstChildisConnectedlastChildnextSiblingnodeNamenodeTypenodeValueownerDocumentparentElementparentNodepreviousSibling textContentInstance methodsappendChild()cloneNode()compareDocumentPosition()contains()getRootNode()hasChildNodes()insertBefore()isDefaultNamespace()isEqualNode()isSameNode()lookupNamespaceURI()lookupPrefix()normalize()removeChild()replaceChild()EventsselectstartInheritance:EventTargetRelated pages for DOMAbortControllerAbortSignalAbstractRangeAttrCDATASectionCharacterDataCommentCustomEventDOMErrorDOMExceptionDOMImplementationDOMParserDOMPointDOMPointReadOnlyDOMRectDOMTokenListDocumentDocumentFragmentDocumentTypeElementEventEventTargetHTMLCollectionMutationObserverMutationRecordNamedNodeMapNodeIteratorNodeListProcessingInstructionRangeStaticRangeTextTextDecoderTextEncoderTimeRangesTreeWalkerXMLDocumentIn this articleValueExamplesSpecificationsBrowser compatibilitySee alsoNode: previousSibling property The read-only previousSibling property of the Node interface returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list. Note: Browsers insert text nodes into a document to represent whitespace in the source markup.  Therefore a node obtained, for example, using Node.firstChild  or Node.previousSibling  may refer to a whitespace text node rather than the actual element the author intended to get. See Whitespace in the DOM for more information.  You can use previousElementSibling  to get the previous element node (skipping text nodes and any other non-element nodes). To navigate the opposite way through the child nodes list use Node.nextSibling. Value A Node representing the previous sibling of the current node, or null if there are none. ExamplesThe following examples demonstrate how previousSibling works with and without text nodes mixed in with elements.First exampleIn this example, we have a series of img elements directly adjacent to each other, with no whitespace between them. <img id=""b0"" /><img id=""b1"" /><img id=""b2"" /> document.getElementById(""b1"").previousSibling; // <img id=""b0""> document.getElementById(""b2"").previousSibling.id; // ""b1"" Second exampleIn this example, there are whitespace text nodes (line breaks) between the img elements. <img id=""b0"" /> <img id=""b1"" /> <img id=""b2"" /> document.getElementById(""b1"").previousSibling; // #text document.getElementById(""b1"").previousSibling.previousSibling; // <img id=""b0""> document.getElementById(""b2"").previousSibling.previousSibling; // <img id=""b1""> document.getElementById(""b2"").previousSibling; // #text document.getElementById(""b2"").previousSibling.id; // undefined SpecificationsSpecificationDOM Standard # ref-for-dom-node-previoussiblingâ Browser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also Node.nextSibling Element.previousElementSibling Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license."
