<video>: The Video Embed element - HTML: HyperText Markup Language | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesHTMLElements<video>Article ActionsEnglish (US)In this articleTry itAttributesEventsUsage notesExamplesAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also

HTML
Tutorials
HTML basics


Introduction to HTML

Introduction to HTML overview
Getting started with HTML
What's in the head? Metadata in HTML
HTML text fundamentals
Creating hyperlinks
Advanced text formatting
Document and website structure
Debugging HTML
Assessment: Marking up a letter
Assessment: Structuring a page of content





Multimedia and embedding

Multimedia and embedding overview
Images in HTML
Video and audio content
From object to iframe â other embedding technologies
Adding vector graphics to the web
Responsive images
Assessment: Mozilla splash page





HTML tables

HTML tables overview
HTML table basics
HTML table advanced features and accessibility
Assessment: Structuring planet data



References


HTML elements
<a><abbr><acronym>
Deprecated
<address><area><article><aside><audio><b><base><bdi><bdo><big>
Deprecated
<blockquote><body><br><button><canvas><caption><center>
Deprecated
<cite><code><col><colgroup><data><datalist><dd><del><details><dfn><dialog><dir>
Deprecated
<div><dl><dt><em><embed><fieldset><figcaption><figure><font>
Deprecated
<footer><form><frame>
Deprecated
<frameset>
Deprecated
<h1><head><header><hgroup><hr><html><i><iframe><image>
Non-standard

Deprecated
<img><input><ins><kbd><label><legend><li><link><main><map><mark><marquee>
Deprecated
<menu><menuitem>
Non-standard

Deprecated
<meta><meter><nav><nobr>
Deprecated
<noembed>
Deprecated
<noframes>
Deprecated
<noscript><object><ol><optgroup><option><output><p><param>
Deprecated
<picture><plaintext>
Deprecated
<portal>
Experimental
<pre><progress><q><rb>
Deprecated
<rp><rt><rtc>
Deprecated
<ruby><s><samp><script><section><select><slot><small><source><span><strike>
Deprecated
<strong><style><sub><summary><sup><table><tbody><td><template><textarea><tfoot><th><thead><time><title><tr><track><tt>
Deprecated
<u><ul><var><video><wbr><xmp>
Deprecated





Global attributes
accesskeyautocapitalizeautofocusclasscontenteditablecontextmenu
Non-standard

Deprecated
data-*dirdraggableenterkeyhintexportpartshiddenidinertinputmodeisitemiditempropitemrefitemscopeitemtypelangnoncepartpopover
Experimental
slotspellcheckstyletabindextitletranslatevirtualkeyboardpolicy
Experimental





Attributes

accept
autocomplete
capture
crossorigin
disabled
elementtiming
for
max
maxlength
min
minlength
multiple
pattern
readonly
rel
required
size
step





<input> types
<input type="button"><input type="checkbox"><input type="color"><input type="date"><input type="datetime-local"><input type="email"><input type="file"><input type="hidden"><input type="image"><input type="month"><input type="number"><input type="password"><input type="radio"><input type="range"><input type="reset"><input type="search"><input type="submit"><input type="tel"><input type="text"><input type="time"><input type="url"><input type="week">


Guides


Content categories
Block-level elements
Inline elements
Quirks Mode and Standards Mode
Date and time formats used in HTML
Constraint validation
Microdata
Microformats
Viewport meta tag
Allowing cross-origin use of images and canvas



In this articleTry itAttributesEventsUsage notesExamplesAccessibility concernsTechnical summarySpecificationsBrowser compatibilitySee also<video>: The Video Embed elementThe <video> HTML element embeds a media player which supports video playback into the document. You can use <video> for audio content as well, but the <audio> element may provide a more appropriate user experience.Try it
The above example shows simple usage of the <video> element. In a similar manner to the <img> element, we include a path to the media we want to display inside the src attribute; we can include other attributes to specify information such as video width and height, whether we want it to autoplay and loop, whether we want to show the browser's default video controls, etc.
The content inside the opening and closing <video></video> tags is shown as a fallback in browsers that don't support the element.AttributesLike all other HTML elements, this element supports the global attributes.

autoplay

A Boolean attribute; if specified, the video automatically begins to play back as soon as it can do so without stopping to finish loading the data.

Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay.

To disable video autoplay, autoplay="false" will not work; the video will autoplay if the attribute is there in the <video> tag at all. To remove autoplay, the attribute needs to be removed altogether.
In some browsers (e.g. Chrome 70.0) autoplay doesn't work if no muted attribute is present.

controls

If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback.

controlslist 
Experimental

Non-standard


The controlslist attribute, when specified, helps the browser select what controls to show for the video element whenever the browser shows its own set of controls (that is, when the controls attribute is specified).
The allowed values are nodownload, nofullscreen and noremoteplayback.
Use the disablepictureinpicture attribute if you want to disable the Picture-In-Picture mode (and the control).

crossorigin

This enumerated attribute indicates whether to use CORS to fetch the related video. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are:

anonymous

Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted.

use-credentials

Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted.


When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.

disablepictureinpicture 
Experimental


Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases.

disableremoteplayback 
Experimental


A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.).
In Safari, you can use x-webkit-airplay="deny" as a fallback.

height

The height of the video's display area, in CSS pixels (absolute values only; no percentages).

loop

A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video.

muted

A Boolean attribute that indicates the default setting of the audio contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning that the audio will be played when the video is played.

playsinline

A Boolean attribute indicating that the video is to be played "inline", that is within the element's playback area. Note that the absence of this attribute does not imply that the video will always be played in fullscreen.

poster

A URL for an image to be shown while the video is downloading. If this attribute isn't specified, nothing is displayed until the first frame is available, then the first frame is shown as the poster frame.

preload

This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values:

none: Indicates that the video should not be preloaded.
metadata: Indicates that only video metadata (e.g. length) is fetched.
auto: Indicates that the whole video file can be downloaded, even if the user is not expected to use it.
empty string: Synonym of the auto value.

The default value is different for each browser. The spec advises it to be set to metadata.

Note:

The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the video for playback.
The specification does not force the browser to follow the value of this attribute; it is a mere hint.



src

The URL of the video to embed. This is optional; you may instead use the <source> element within the video block to specify the video to embed.

width

The width of the video's display area, in CSS pixels (absolute values only; no percentages).

Events


Event Name
Fired When




audioprocess 
Deprecated


        The input buffer of a ScriptProcessorNode is
        ready to be processed.
      


canplay

        The browser can play the media, but estimates that not enough data has
        been loaded to play the media up to its end without having to stop for
        further buffering of content.
      


canplaythrough

        The browser estimates it can play the media up to its end without
        stopping for content buffering.
      


complete

        The rendering of an OfflineAudioContext is
        terminated.
      


durationchange
The duration attribute has been updated.


emptied

        The media has become empty; for example, this event is sent if the media
        has already been loaded (or partially loaded), and the
        load()
        method is called to reload it.
      


ended
Playback has stopped because the end of the media was reached.


error

        An error occurred while fetching the media data, or the type of the
        resource is not a supported media format.
      


loadeddata
The first frame of the media has finished loading.


loadedmetadata
The metadata has been loaded.


pause
Playback has been paused.


play
Playback has begun.


playing 

        Playback is ready to start after having been paused or delayed due to
        lack of data.
      


progress
Fired periodically as the browser loads a resource.


ratechange
The playback rate has changed.


seeked
A seek operation completed.


seeking
A seek operation began.


stalled

        The user agent is trying to fetch media data, but data is unexpectedly
        not forthcoming.
      


suspend
Media data loading has been suspended.


timeupdate

        The time indicated by the currentTime attribute has been
        updated.
      


volumechange
The volume has changed.


waiting
Playback has stopped because of a temporary lack of data.


Usage notesBrowsers don't all support the same video formats; you can provide multiple sources inside nested <source> elements, and the browser will then use the first one it understands.
<video controls>
  <source src="myVideo.webm" type="video/webm" />
  <source src="myVideo.mp4" type="video/mp4" />
  <p>
    Your browser doesn't support HTML video. Here is a
    <a href="myVideo.mp4">link to the video</a> instead.
  </p>
</video>

We offer a substantive and thorough guide to media file types and the guide to the codecs supported for video. Also available is a guide to audio codecs that can be used with them.
Other usage notes:

If you don't specify the controls attribute, the video won't include the browser's default controls; you can create your own custom controls using JavaScript and the HTMLMediaElement API. See Creating a cross-browser video player for more details.
To allow precise control over your video (and audio) content, HTMLMediaElements fire many different events. In addition to providing controllability, these events let you monitor the progress of both download and playback of the media, as well as the playback state and position.
You can use the object-position property to adjust the positioning of the video within the element's frame, and the object-fit property to control how the video's size is adjusted to fit within the frame.
To show subtitles/captions along with your video, you can use some JavaScript along with the <track> element and the WebVTT format. See Adding captions and subtitles to HTML video for more information.
You can play audio files using a <video> element. This can be useful if, for example, you need to perform audio with a WebVTT transcript, since the <audio> element doesn't allow captions using WebVTT.
To test the fallback content on browsers that support the element, you can replace <video> with a non-existing element like <notavideo>.

A good general source of information on using HTML <video> is the Video and audio content beginner's tutorial.Styling with CSSThe <video> element is a replaced element â its display value is inline by default, but its default width and height in the viewport is defined by the video being embedded.
There are no special considerations for styling <video>; a common strategy is to give it a display value of block to make it easier to position, size, etc., and then provide styling and layout information as required. Video player styling basics provides some useful styling techniques.Detecting track addition and removalYou can detect when tracks are added to and removed from a <video> element using the addtrack and removetrack events. However, these events aren't sent directly to the <video> element itself. Instead, they're sent to the track list object within the <video> element's HTMLMediaElement that corresponds to the type of track that was added to the element:

HTMLMediaElement.audioTracks

An AudioTrackList containing all of the media element's audio tracks. You can add a listener for addtrack to this object to be alerted when new audio tracks are added to the element.

HTMLMediaElement.videoTracks

Add an addtrack listener to this VideoTrackList object to be informed when video tracks are added to the element.

HTMLMediaElement.textTracks

Add an addtrack event listener to this TextTrackList to be notified when new text tracks are added to the element.


For example, to detect when audio tracks are added to or removed from a <video> element, you can use code like this:
const elem = document.querySelector("video");

elem.audioTracks.onaddtrack = (event) => {
  trackEditor.addTrack(event.track);
};

elem.audioTracks.onremovetrack = (event) => {
  trackEditor.removeTrack(event.track);
};

This code watches for audio tracks to be added to and removed from the element, and calls a hypothetical function on a track editor to register and remove the track from the editor's list of available tracks.
You can also use addEventListener() to listen for the addtrack and removetrack events.Server support for videoIf the MIME type for the video is not set correctly on the server, the video may not show or show a gray box containing an X (if JavaScript is enabled).
If you use Apache Web Server to serve Ogg Theora videos, you can fix this problem by adding the video file type extensions to "video/ogg" MIME type. The most common video file type extensions are ".ogm", ".ogv", or ".ogg". To do this, edit the "mime.types" file in "/etc/apache" or use the "AddType" configuration directive in httpd.conf.
AddType video/ogg .ogm
AddType video/ogg .ogv
AddType video/ogg .ogg

If you serve your videos as WebM, you can fix this problem for the Apache Web Server by adding the extension used by your video files (".webm" is the most common one) to the MIME type "video/webm" via the "mime.types" file in "/etc/apache" or via the "AddType" configuration directive in httpd.conf.
AddType video/webm .webm

Your web host may provide an easy interface to MIME type configuration changes for new technologies until a global update naturally occurs.ExamplesSingle sourceThis example plays a video when activated, providing the user with the browser's default video controls to control playback.
HTML
<!-- Simple video example -->
<!-- 'Big Buck Bunny' licensed under CC 3.0 by the Blender foundation. Hosted by archive.org -->
<!-- Poster from peach.blender.org -->
<video
  controls
  src="https://archive.org/download/BigBuckBunny_124/Content/big_buck_bunny_720p_surround.mp4"
  poster="https://peach.blender.org/wp-content/uploads/title_anouncement.jpg?x11217"
  width="620">
  Sorry, your browser doesn't support embedded videos, but don't worry, you can
  <a href="https://archive.org/details/BigBuckBunny_124">download it</a>
  and watch it with your favorite video player!
</video>

Result
Until the video starts playing, the image provided in the poster attribute is displayed in its place. If the browser doesn't support video playback, the fallback text is displayed.Multiple sourcesThis example builds on the last one, offering three different sources for the media; this allows the video to be watched regardless of which video codecs are supported by the browser.
HTML
<!-- Using multiple sources as fallbacks for a video tag -->
<!-- 'Elephants Dream' by Orange Open Movie Project Studio, licensed under CC-3.0, hosted by archive.org -->
<!-- Poster hosted by Wikimedia -->
<video
  width="620"
  controls
  poster="https://upload.wikimedia.org/wikipedia/commons/e/e8/Elephants_Dream_s5_both.jpg">
  <source
    src="https://archive.org/download/ElephantsDream/ed_hd.ogv"
    type="video/ogg" />
  <source
    src="https://archive.org/download/ElephantsDream/ed_hd.avi"
    type="video/avi" />
  <source
    src="https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4"
    type="video/mp4" />

  Sorry, your browser doesn't support embedded videos, but don't worry, you can
  <a href="https://archive.org/download/ElephantsDream/ed_1024_512kb.mp4">
    download the MP4
  </a>
  and watch it with your favorite video player!
</video>

Result
First Ogg is tried. If that can't be played, then AVI is tried. Finally, MP4 is tried. A fallback message is displayed if the video element isn't supported, but not if all sources fail.
Some media file types let you provide more specific information using the codecs parameter as part of the file's type string. A relatively simple example is video/webm; codecs="vp8, vorbis", which says that the file is a WebM video using VP8 for its video and Vorbis for audio.Accessibility concernsVideos should provide both captions and transcripts that accurately describe its content (see Adding captions and subtitles to HTML video for more information on how to implement these). Captions allow people who are experiencing hearing loss to understand a video's audio content as the video is being played, while transcripts allow people who need additional time to be able to review audio content at a pace and format that is comfortable for them.
It's worth noting that while you can caption audio-only media, you can only do so when playing audio in a <video> element, since the video region of the element is used to present the captions. This is one of the special scenarios in which it's useful to play audio in a video element.
If automatic captioning services are used, it is important to review the generated content to ensure it accurately represents the source video.
In addition to spoken dialog, subtitles and transcripts should also identify music and sound effects that communicate important information. This includes emotion and tone:
14
00:03:14 --> 00:03:18
[Dramatic rock music]

15
00:03:19 --> 00:03:21
[whispering] What's that off in the distance?

16
00:03:22 --> 00:03:24
It'sâ¦ it's aâ¦

16 00:03:25 --> 00:03:32
[Loud thumping]
[Dishes clattering]

Captions should not obstruct the main subject of the video. They can be positioned using the align VTT cue setting.

Web Video Text Tracks Format (WebVTT)
WebAIM: Captions, Transcripts, and Audio Descriptions
MDN Understanding WCAG, Guideline 1.2 explanations
Understanding Success Criterion 1.2.1 | W3C Understanding WCAG 2.0
Understanding Success Criterion 1.2.2 | W3C Understanding WCAG 2.0
Technical summary


Content categories

Flow content, phrasing content, embedded content. If it has a
        controls attribute: interactive
        content and palpable content.
      


Permitted content


          If the element has a src
          attribute: zero or more <track> elements,
          followed by transparent content that contains no media elementsâthat
          is no <audio> or
          <video>.
        

          Else: zero or more <source> elements, followed
          by zero or more <track> elements, followed by
          transparent content that contains no media elementsâthat is no
          <audio> or <video>.
        



Tag omission
None, both the starting and ending tag are mandatory.


Permitted parents
Any element that accepts embedded content.


Implicit ARIA role
No corresponding role


Permitted ARIA roles
application


DOM interface
HTMLVideoElement


SpecificationsSpecificationHTML Standard # the-video-elementBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also
Guide to media types and formats on the web

Media container formats (file types)
Web video codec guide
Web audio codec guide


Positioning and sizing the picture within its frame: object-position and object-fit
<audio>
Using HTML audio and video
Manipulating video using canvas
Configuring servers for Ogg media
Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 19, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license.