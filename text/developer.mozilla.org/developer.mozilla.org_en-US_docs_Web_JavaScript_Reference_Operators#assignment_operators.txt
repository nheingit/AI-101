Expressions and operators - JavaScript | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesJavaScriptReferenceExpressions and operatorsArticle ActionsEnglish (US)In this articleExpressions and operators by categorySpecificationsBrowser compatibilitySee also

JavaScript
Tutorials


Complete beginners

JavaScript basics
JavaScript first steps
JavaScript building blocks
Introducing JavaScript objects





JavaScript Guide

Introduction
Grammar and types
Control flow and error handling
Loops and iteration
Functions
Expressions and operators
Numbers and dates
Text formatting
Regular expressions
Indexed collections
Keyed collections
Working with objects
Using classes
Using promises
JavaScript typed arrays
Iterators and generators
Meta programming
JavaScript modules





Intermediate

Client-side JavaScript frameworks
Client-side web APIs
Language overview
JavaScript data structures
Equality comparisons and sameness
Enumerability and ownership of properties
Closures





Advanced

Inheritance and the prototype chain
Memory Management
Concurrency model and Event Loop



References


Built-in objects
OverviewAggregateErrorArrayArrayBufferAsyncFunctionAsyncGeneratorAsyncGeneratorFunctionAsyncIteratorAtomicsBigIntBigInt64ArrayBigUint64ArrayBooleanDataViewDatedecodeURI()decodeURIComponent()encodeURI()encodeURIComponent()Errorescape()
Deprecated
eval()EvalErrorFinalizationRegistryFloat32ArrayFloat64ArrayFunctionGeneratorGeneratorFunctionglobalThisInfinityInt16ArrayInt32ArrayInt8ArrayInternalError
Non-standard
IntlisFinite()isNaN()IteratorJSONMapMathNaNNumberObjectparseFloat()parseInt()PromiseProxyRangeErrorReferenceErrorReflectRegExpSetSharedArrayBufferStringSymbolSyntaxErrorTypedArrayTypeErrorUint16ArrayUint32ArrayUint8ArrayUint8ClampedArrayundefinedunescape()
Deprecated
URIErrorWeakMapWeakRefWeakSet




Expressions & operators
OverviewAddition (+)Addition assignment (+=)Assignment (=)async function expressionasync function* expressionawaitBitwise AND (&)Bitwise AND assignment (&=)Bitwise NOT (~)Bitwise OR (|)Bitwise OR assignment (|=)Bitwise XOR (^)Bitwise XOR assignment (^=)class expressionComma operator (,)Conditional (ternary) operatorDecrement (--)delete operatorDestructuring assignmentDivision (/)Division assignment (/=)Equality (==)Exponentiation (**)Exponentiation assignment (**=)Function expressionfunction* expressionGreater than (>)Greater than or equal (>=)Grouping operator ( )import.metaimport()in operatorIncrement (++)Inequality (!=)instanceofLeft shift (<<)Left shift assignment (<<=)Less than (<)Less than or equal (<=)Logical AND (&&)Logical AND assignment (&&=)Logical NOT (!)Logical OR (||)Logical OR assignment (||=)Multiplication (*)Multiplication assignment (*=)new operatornew.targetnullNullish coalescing assignment (??=)Nullish coalescing operator (??)Object initializerOperator precedenceOptional chaining (?.)Property accessorsRemainder (%)Remainder assignment (%=)Right shift (>>)Right shift assignment (>>=)Spread syntax (...)Strict equality (===)Strict inequality (!==)Subtraction (-)Subtraction assignment (-=)superthistypeofUnary negation (-)Unary plus (+)Unsigned right shift (>>>)Unsigned right shift assignment (>>>=)void operatoryieldyield*




Statements & declarations
Overviewasync functionasync function*blockbreakclassconstcontinuedebuggerdo...whileemptyexportExpression statementforfor await...offor...infor...offunction declarationfunction*if...elseimportlabelletreturnswitchthrowtry...catchvarwhilewith
Deprecated





Functions
OverviewArrow function expressionsDefault parametersgetMethod definitionsRest parameterssetThe arguments object




Classes
OverviewconstructorextendsPrivate class featuresPublic class fieldsstaticStatic initialization blocks




Regular expressions
OverviewBackreference: \1, \2Capturing group: (...)Character class escape: \d, \D, \w, \W, \s, \SCharacter class: [...], [^...]Character escape: \n, \u{...}Disjunction: |Input boundary assertion: ^, $Literal character: a, bLookahead assertion: (?=...), (?!...)Lookbehind assertion: (?<=...), (?<!...)Named backreference: \k<name>Named capturing group: (?<name>...)Non-capturing group: (?:...)Quantifier: *, +, ?, {n}, {n,}, {n,m}Unicode character class escape: \p{...}, \P{...}Wildcard: .Word boundary assertion: \b, \B




Errors
OverviewError: Permission denied to access property "x"InternalError: too much recursionRangeError: argument is not a valid code pointRangeError: BigInt division by zeroRangeError: BigInt negative exponentRangeError: invalid array lengthRangeError: invalid dateRangeError: precision is out of rangeRangeError: radix must be an integerRangeError: repeat count must be less than infinityRangeError: repeat count must be non-negativeRangeError: x can't be converted to BigInt because it isn't an integerReferenceError: "x" is not definedReferenceError: assignment to undeclared variable "x"ReferenceError: can't access lexical declaration 'X' before initializationReferenceError: deprecated caller or arguments usageReferenceError: reference to undefined property "x"SyntaxError: "0"-prefixed octal literals and octal escape seq. are deprecatedSyntaxError: "use strict" not allowed in function with non-simple parametersSyntaxError: "x" is a reserved identifierSyntaxError: a declaration in the head of a for-of loop can't have an initializerSyntaxError: applying the 'delete' operator to an unqualified name is deprecatedSyntaxError: await is only valid in async functions, async generators and modulesSyntaxError: cannot use `??` unparenthesized within `||` and `&&` expressionsSyntaxError: continue must be inside loopSyntaxError: for-in loop head declarations may not have initializersSyntaxError: function statement requires a nameSyntaxError: identifier starts immediately after numeric literalSyntaxError: illegal characterSyntaxError: invalid assignment left-hand sideSyntaxError: invalid BigInt syntaxSyntaxError: invalid regular expression flag "x"SyntaxError: JSON.parse: bad parsingSyntaxError: label not foundSyntaxError: missing ; before statementSyntaxError: missing : after property idSyntaxError: missing ) after argument listSyntaxError: missing ) after conditionSyntaxError: missing ] after element listSyntaxError: missing } after function bodySyntaxError: missing } after property listSyntaxError: missing = in const declarationSyntaxError: missing formal parameterSyntaxError: missing name after . operatorSyntaxError: missing variable nameSyntaxError: redeclaration of formal parameter "x"SyntaxError: return not in functionSyntaxError: test for equality (==) mistyped as assignment (=)?SyntaxError: Unexpected '#' used outside of class bodySyntaxError: Unexpected tokenSyntaxError: unlabeled break must be inside loop or switchSyntaxError: unparenthesized unary expression can't appear on the left-hand side of '**'SyntaxError: unterminated string literalSyntaxError: Using //@ to indicate sourceURL pragmas is deprecated. Use //# insteadTypeError: 'x' is not iterableTypeError: "x" has no propertiesTypeError: "x" is (not) "y"TypeError: "x" is not a constructorTypeError: "x" is not a functionTypeError: "x" is not a non-null objectTypeError: "x" is read-onlyTypeError: can't assign to property "x" on "y": not an objectTypeError: can't convert BigInt to numberTypeError: can't convert x to BigIntTypeError: can't define property "x": "obj" is not extensibleTypeError: can't delete non-configurable array elementTypeError: can't redefine non-configurable property "x"TypeError: cannot use 'in' operator to search for 'x' in 'y'TypeError: cyclic object valueTypeError: invalid 'instanceof' operand 'x'TypeError: invalid Array.prototype.sort argumentTypeError: invalid assignment to const "x"TypeError: More arguments neededTypeError: property "x" is non-configurable and can't be deletedTypeError: Reduce of empty array with no initial valueTypeError: setting getter-only property "x"TypeError: X.prototype.y called on incompatible typeURIError: malformed URI sequenceWarning: -file- is being assigned a //# sourceMappingURL, but already has oneWarning: unreachable code after return statement




Misc

JavaScript technologies overview
Lexical grammar
Iteration protocols
Strict mode
Template literals
Trailing commas
Deprecated features




In this articleExpressions and operators by categorySpecificationsBrowser compatibilitySee alsoExpressions and operatorsThis chapter documents all the JavaScript language operators, expressions and keywords.Expressions and operators by categoryFor an alphabetical listing see the sidebar on the left.Primary expressionsBasic keywords and general expressions in JavaScript. These expressions have the highest precedence (higher than operators).

this

The this keyword refers to a special property of an execution context.

Literals

Basic null, boolean, number, and string literals.

[]

Array initializer/literal syntax.

{}

Object initializer/literal syntax.

function

The function keyword defines a function expression.

class

The class keyword defines a class expression.

function*

The function* keyword defines a generator function expression.

async function

The async function defines an async function expression.

async function*

The async function* keywords define an async generator function expression.

/ab+c/i

Regular expression literal syntax.

`string`

Template literal syntax.

( )

Grouping operator.

Left-hand-side expressionsLeft values are the destination of an assignment.

Property accessors

Member operators provide access to a property or method of an object (object.property and object["property"]).

?.

The optional chaining operator returns undefined instead of causing an error if a reference is nullish (null or undefined).

new

The new operator creates an instance of a constructor.

new.target

In constructors, new.target refers to the constructor that was invoked by new.

import.meta

An object exposing context-specific metadata to a JavaScript module.

super

The super keyword calls the parent constructor or allows accessing properties of the parent object.

import()

The import() syntax allows loading a module asynchronously and dynamically into a potentially non-module environment.

Increment and decrementPostfix/prefix increment and postfix/prefix decrement operators.

A++

Postfix increment operator.

A--

Postfix decrement operator.

++A

Prefix increment operator.

--A

Prefix decrement operator.

Unary operatorsA unary operation is an operation with only one operand.

delete

The delete operator deletes a property from an object.

void

The void operator evaluates an expression and discards its return value.

typeof

The typeof operator determines the type of a given object.

+

The unary plus operator converts its operand to Number type.

-

The unary negation operator converts its operand to Number type and then negates it.

~

Bitwise NOT operator.

!

Logical NOT operator.

await

Pause and resume an async function and wait for the promise's fulfillment/rejection.

Arithmetic operatorsArithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value.

**

Exponentiation operator.

*

Multiplication operator.

/

Division operator.

%

Remainder operator.

+ (Plus)

Addition operator.

-

Subtraction operator.

Relational operatorsA comparison operator compares its operands and returns a boolean value based on whether the comparison is true.

< (Less than)

Less than operator.

> (Greater than)

Greater than operator.

<=

Less than or equal operator.

>=

Greater than or equal operator.

instanceof

The instanceof operator determines whether an object is an instance of another object.

in

The in operator determines whether an object has a given property.



Note: => is not an operator, but the notation for Arrow functions.
Equality operatorsThe result of evaluating an equality operator is always of type boolean based on whether the comparison is true.

==

Equality operator.

!=

Inequality operator.

===

Strict equality operator.

!==

Strict inequality operator.

Bitwise shift operatorsOperations to shift all bits of the operand.

<<

Bitwise left shift operator.

>>

Bitwise right shift operator.

>>>

Bitwise unsigned right shift operator.

Binary bitwise operatorsBitwise operators treat their operands as a set of 32 bits (zeros and ones) and return standard JavaScript numerical values.

&

Bitwise AND.

|

Bitwise OR.

^

Bitwise XOR.

Binary logical operatorsLogical operators implement boolean (logical) values and have short-circuiting behavior.

&&

Logical AND.

||

Logical OR.

??

Nullish Coalescing Operator.

Conditional (ternary) operator
(condition ? ifTrue : ifFalse)

The conditional operator returns one of two values based on the logical value of the condition.

Assignment operatorsAn assignment operator assigns a value to its left operand based on the value of its right operand.

=

Assignment operator.

*=

Multiplication assignment.

/=

Division assignment.

%=

Remainder assignment.

+=

Addition assignment.

-=

Subtraction assignment

<<=

Left shift assignment.

>>=

Right shift assignment.

>>>=

Unsigned right shift assignment.

&=

Bitwise AND assignment.

^=

Bitwise XOR assignment.

|=

Bitwise OR assignment.

**=

Exponentiation assignment.

&&=

Logical AND assignment.

||=

Logical OR assignment.

??=

Nullish coalescing assignment.

[a, b] = arr, { a, b } = obj

Destructuring assignment allows you to assign the properties of an array or object to variables using syntax that looks similar to array or object literals.

Yield operators
yield

Pause and resume a generator function.

yield*

Delegate to another generator function or iterable object.

Spread syntax
...obj

Spread syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.

Comma operator
,

The comma operator allows multiple expressions to be evaluated in a single statement and returns the result of the last expression.

SpecificationsSpecificationECMAScript Language Specification # sec-addition-operator-plusECMAScript Language Specification # sec-assignment-operatorsECMAScript Language Specification # sec-async-function-definitionsECMAScript Language Specification # sec-async-generator-function-definitionsECMAScript Language Specification # prod-BitwiseANDExpressionECMAScript Language Specification # sec-bitwise-not-operatorECMAScript Language Specification # prod-BitwiseORExpressionECMAScript Language Specification # prod-BitwiseXORExpressionECMAScript Language Specification # sec-class-definitionsECMAScript Language Specification # sec-comma-operatorECMAScript Language Specification # sec-conditional-operatorECMAScript Language Specification # sec-postfix-decrement-operatorECMAScript Language Specification # sec-delete-operatorECMAScript Language Specification # sec-destructuring-assignmentECMAScript Language Specification # sec-destructuring-binding-patternsECMAScript Language Specification # sec-multiplicative-operatorsECMAScript Language Specification # sec-equality-operatorsECMAScript Language Specification # sec-exp-operatorECMAScript Language Specification # sec-function-definitionsECMAScript Language Specification # sec-generator-function-definitionsECMAScript Language Specification # sec-relational-operatorsECMAScript Language Specification # sec-grouping-operatorECMAScript Language Specification # sec-import-callsECMAScript Language Specification # prod-ImportMetaHTML Standard # hostgetimportmetapropertiesECMAScript Language Specification # sec-postfix-increment-operatorECMAScript Language Specification # sec-left-shift-operatorECMAScript Language Specification # prod-LogicalANDExpressionECMAScript Language Specification # sec-logical-not-operatorECMAScript Language Specification # prod-LogicalORExpressionECMAScript Language Specification # sec-new-operatorECMAScript Language Specification # sec-built-in-function-objectsECMAScript Language Specification # sec-null-valueECMAScript Language Specification # prod-CoalesceExpressionECMAScript Language Specification # sec-object-initializerECMAScript Language Specification # prod-OptionalExpressionECMAScript Language Specification # sec-property-accessorsECMAScript Language Specification # sec-signed-right-shift-operatorECMAScript Language Specification # prod-SpreadElementECMAScript Language Specification # prod-ArgumentListECMAScript Language Specification # prod-PropertyDefinitionECMAScript Language Specification # sec-subtraction-operator-minusECMAScript Language Specification # sec-super-keywordECMAScript Language Specification # sec-this-keywordECMAScript Language Specification # sec-typeof-operatorECMAScript Language Specification # sec-unary-minus-operatorECMAScript Language Specification # sec-unary-plus-operatorECMAScript Language Specification # sec-unsigned-right-shift-operatorECMAScript Language Specification # sec-void-operatorECMAScript Language Specification # prod-YieldExpressionECMAScript Language Specification # sec-generator-function-definitions-runtime-semantics-evaluationBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also
Operator precedence
Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license.