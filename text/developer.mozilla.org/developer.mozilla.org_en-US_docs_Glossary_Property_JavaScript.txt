Property (JavaScript) - MDN Web Docs Glossary: Definitions of Web-related terms | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusMDN Web Docs Glossary: Definitions of Web-related termsPropertyProperty (JavaScript)Article ActionsEnglish (US)In this articleSee alsoIn this articleSee alsoProperty (JavaScript)A JavaScript property is a member of an object that associates a key with a value. A JavaScript object is a data structure that stores a collection of properties.
A property consists of the following parts:

A name (also called a key), which is either a string or a symbol.
A value, which can be any JavaScript value. A property that has a function as its value may also be called a method.
Some attributes, which specify how the property can be read and written. A property may have the configurable, enumerable, and writable attributes.

Accessor properties do not have an actual "value". The value is represented indirectly through a pair of functions, one (the getter) invoked when reading the value and one (the setter) invoked when setting the value. However, accessor properties behave like regular data properties on the surface, because the getter and setter functions are invoked automatically and are typically transparent to JavaScript code.
The property's value (including the getter and setter) and its attributes are stored in a data record called the property descriptor. Many methods, such as Object.getOwnPropertyDescriptor() and Object.defineProperty(), work with property descriptors.
The term property itself does not correspond to any JavaScript value â it's an abstract concept. For example, in the following code:
const obj = {
  a: 1,
  b() {},
};

The object obj has two properties. The first one has "a" as the key and 1 as the value. The second one has "b" as the key and a function as the value (using the method syntax). The "a" â 1, "b" â function associations are the properties of the object.
In the context of classes, properties can be divided into instance properties, which are owned by each instance, and static properties, which are owned by the class and hold data common to all instances. In the context of inheritance, properties can also be divided into own properties, which are owned by the object itself, and inherited properties, which are owned by objects in the prototype chain of the object.
For more information about reading and writing properties, see working with objects.See also
Property (programming) on Wikipedia
Introduction to object-oriented JavaScript
Object properties
Enumerability and ownership of properties
Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 5, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license.