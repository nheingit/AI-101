HTMLElement: dragover event - Web APIs | MDNSkip to main contentSkip to searchSkip to select languageMDN Web DocsOpen main menuReferencesReferencesOverview / Web TechnologyWeb technology reference for developersHTMLStructure of content on the webCSSCode used to describe document styleJavaScriptGeneral-purpose scripting languageHTTPProtocol for transmitting web resourcesWeb APIsInterfaces for building web applicationsWeb ExtensionsDeveloping extensions for web browsersWeb TechnologyWeb technology reference for developersGuidesGuidesOverview / MDN Learning AreaLearn web developmentMDN Learning AreaLearn web developmentHTMLLearn to structure web content with HTMLCSSLearn to style content using CSSJavaScriptLearn to run scripts in the browserAccessibilityLearn to make the web accessible to allPlusPlusOverviewA customized MDN experienceUpdatesAll browser compatibility updates at a glanceDocumentationLearn how to use MDN PlusFAQFrequently asked questions about MDN PlusBlog NewSearch MDNClear search inputSearchThemeLog inGet MDN PlusReferencesWeb APIsHTMLElementdragoverArticle ActionsEnglish (US)In this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElementInstance propertiesaccessKeyaccessKeyLabelcontentEditabledatasetdirenterKeyHinthiddeninertinnerTextinputModeisContentEditablelangnonceoffsetHeightoffsetLeftoffsetParentoffsetTopoffsetWidthouterTextpopover
Experimental
styletabIndextitleInstance methodsattachInternals()blur()click()focus()hidePopover()
Experimental
showPopover()
Experimental
togglePopover()
Experimental
Eventsbeforeinputbeforetoggle
Experimental
changecopycutdragdragenddragenterdragleavedragover dragstartdroperrorinputloadmscandidatewindowhide
Non-standard
mscandidatewindowshow
Non-standard
mscandidatewindowupdate
Non-standard
pastetoggle
Experimental
Inheritance:ElementNodeEventTargetIn this articleSyntaxEvent typeEvent propertiesExamplesSpecificationsBrowser compatibilitySee alsoHTMLElement: dragover eventThe dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).
The event is fired on the drop target(s).SyntaxUse the event name in methods like addEventListener(), or set an event handler property.
addEventListener("dragover", (event) => {});

ondragover = (event) => {};
Event typeA DragEvent. Inherits from Event.



      Event
    






      UIEvent
    






      MouseEvent
    






      DragEvent
    
Event propertiesIn addition to the properties listed below, properties from the parent interface, Event, are available.

DragEvent.dataTransfer Read only 

The data that is transferred during a drag and drop interaction.

ExamplesA minimal drag and drop exampleIn this example, we have a draggable element inside a container. Try grabbing the element, dragging it over the other container, and then releasing it.
We use three event handlers here:

in the dragstart event handler, we get a reference to the element that the user dragged
in the dragover event handler for the target container, we call event.preventDefault(), which enables it to receive drop events.
in the drop event handler for the drop zone, we handle moving the draggable element from the original container to the drop zone.

For a more complete example of drag and drop, see the page for the drag event.
HTML
<div class="dropzone">
  <div id="draggable" draggable="true">This div is draggable</div>
</div>
<div class="dropzone" id="droptarget"></div>

CSS
body {
  /* Prevent the user selecting text in the example */
  user-select: none;
}

#draggable {
  text-align: center;
  background: white;
}

.dropzone {
  width: 200px;
  height: 20px;
  background: blueviolet;
  margin: 10px;
  padding: 10px;
}

JavaScript
let dragged = null;

const source = document.getElementById("draggable");
source.addEventListener("dragstart", (event) => {
  // store a ref. on the dragged elem
  dragged = event.target;
});

const target = document.getElementById("droptarget");
target.addEventListener("dragover", (event) => {
  // prevent default to allow drop
  event.preventDefault();
});

target.addEventListener("drop", (event) => {
  // prevent default action (open as link for some elements)
  event.preventDefault();
  // move dragged element to the selected drop target
  if (event.target.className === "dropzone") {
    dragged.parentNode.removeChild(dragged);
    event.target.appendChild(dragged);
  }
});

ResultSpecificationsSpecificationHTML Standard # ix-handler-ondragoverHTML Standard # event-dnd-dragoverBrowser compatibilityBCD tables only load in the browser with JavaScript enabled. Enable JavaScript to view data.See also
Other drag and drop events:
    
drag
dragstart
dragend
dragenter
dragleave
drop


This event on other targets:
    
Window: dragover event
Document: dragover event
SVGElement: dragover event


Found a content problem with this page?Edit the page on GitHub.Report the content issue.View the source on GitHub.Want to get more involved? Learn how to contribute.This page was last modified on Apr 7, 2023 by MDN contributors.MDN logoYour blueprint for a better internet.MDN on TwitterMDN on GitHubMDNAboutBlogCareersAdvertise with usSupportProduct helpReport an issueOur communitiesMDN CommunityMDN ForumMDN ChatDevelopersWeb TechnologiesLearn Web DevelopmentMDN PlusHacks BlogMozilla logoWebsite Privacy NoticeCookiesLegalCommunity Participation GuidelinesVisit Mozilla Corporationâs not-for-profit parent, the Mozilla Foundation.Portions of this content are Â©1998â2023 by individual mozilla.org contributors. Content available under a Creative Commons license.